---

title: Method and system for exchanging content between applications
abstract: A system and method for enabling the sharing of content between secure applications and unsecure applications are described herein. Content requests can be received from secure applications and unsecure applications. In response to the content requests, listings of options can be returned that have the ability to satisfy the content requests from the requesting secure applications or the requesting unsecure applications. In addition, selections of the options of the listings of options can be received through the requesting secure applications or the requesting unsecure applications. Content locations that are to be returned to the secure applications can be selectively modified such that subsequent content requests that involve the modified content locations are identified as being associated with an unsecure option.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098715&OS=09098715&RS=09098715
owner: OPENPEAK INC.
number: 09098715
owner_city: Boca Raton
owner_country: US
publication_date: 20141028
---
The present description relates to methods and systems for controlling the sharing of content between applications and more particularly for controlling the sharing of content between secure applications and unsecure applications.

In an effort to increase productivity many employers allow their workers to conduct business related to the employer on their personal mobile devices. In some cases employers also provide some of their employees with company issued mobile devices. In either arrangement an employer understands that a single device may include sensitive data related to that employer in addition to data that is personal to the employee. Several advances have been made in an effort to protect an employer s data in these circumstances. For example OpenPeak Inc. of Boca Raton Fla. has developed solutions that enable a mobile device to include both enterprise and personal data but that isolate the enterprise data from the personal data. As part of these solutions an employee may download to the employee s mobile device secure applications that may be used to conduct transactions related to the enterprise. The employee s mobile device may also have several unsecure applications installed on the device. Consequently a solution is needed to control the exchange of data between among the secure and unsecure applications.

A method of enabling the sharing of content between secure applications and unsecure applications is described herein. In the method content requests from secure applications and unsecure applications may be received. In response to the content requests listings of options that have the ability to satisfy the content requests from the requesting secure applications or the requesting unsecure applications can be returned. Selections of the options of the listings of options can be received through the requesting secure applications or the requesting unsecure applications. In addition content locations that are to be returned to the secure applications can be selectively modified such that subsequent content requests that involve the modified content locations are identified as being associated with an unsecure option.

In one example the unsecure option may be an unsecure application and modifying the content locations that are to be returned can include appending a character to a uniform resource identifier associated with the unsecure application. As another example some of the content requests may be requests to retrieve content for the requesting secure applications or the requesting unsecure applications. Alternatively some of the content requests may be requests to share content from the requesting secure applications or the requesting unsecure applications.

If the content request is from a secure application to access content the listing of options may include both secure and unsecure applications that have the ability to satisfy the content request from the requesting secure application. Conversely if the content request is from an unsecure application to access content the listing of options may include only unsecure applications that have the ability to satisfy the content request from the requesting unsecure application.

As mentioned above the content request may be a request from a secure application to retrieve content. In this example a conventional content request for unsecure options that have the ability to satisfy the conventional content request can be generated. Moreover a secure content request for secure options that have the ability to satisfy the secure content request can be generated in this example. In another arrangement returning the listings of options that have the ability to satisfy the content requests can include returning a combined listing of options that lists the unsecure options that have the ability to satisfy the conventional content request and the secure options that have the ability to satisfy the secure content request.

In some cases the content requests from the secure applications and only from the secure applications can be selectively modified to ensure that the unsecure applications are prevented from processing such content requests. In addition content locations that are to be returned to the secure applications and that are associated with a secure option can be modified.

A method of exchanging content between a secure application and an unsecure application is also described herein. A content request to access content can be generated through a secure application. In response to the content request a combined listing that includes at least one secure application and at least one unsecure application both of which have the ability to respond to the content request can be returned. A selection of the unsecure application can be received. A content location that is to be returned to the secure application from the unsecure application can be modified to identify the content location as being associated with an unsecure application.

As an example the content request to access content is an intent and the content location is a uniform resource identifier. In one embodiment modifying the content location can include appending a character to the uniform resource identifier.

In another embodiment a content request to share content can be generated through the secure application. The content request to share content can be modified such that any unsecure applications are prevented from being able to respond to the content request to share content from the secure application.

As an example generating the content request to access content can include generating a conventional content request to access content from unsecure applications and generating a secure content request to access content from secure applications. Further the unsecure applications may be unable to respond to the secure content request to access content. In another example the secure application and the unsecure application can be registered with a system process to indicate to the system process that the secure application and the unsecure application are capable of responding to the content request to access content. The unsecure application can be launched in response to the selection of the unsecure application.

In one arrangement the selected unsecure application can be installed on a computing device along with a corresponding secure application. A process of distinguishing between the selected unsecure application and the corresponding secure application can be performed based on the modified content location.

A computing device configured to enable the exchange of content is also described herein. The computing device can include an interface that is configured to display secure applications and unsecure applications that are installed on the computing device. The computing device can also include memory that is configured to store data associated with the secure applications and the unsecure applications and can further include a processing unit. The processing unit can be configured to receive a content request to access content in which the content request is from a requesting secure application and to cause a combined list of one or more other secure applications and one or more unsecure applications to be displayed on the interface. The processing unit can also be configured to receive a selection of an unsecure application of the combined list and to cause a content location to be modified such that the modified content location indicates that the modified content location is associated with an unsecure application.

As an example the content request to access content is an intent and the content location is a uniform resource identifier. As another example the processing unit can be further configured to cause the content location to be modified by appending a character to the uniform resource identifier.

In one embodiment the content request to access content can be made up of at least two requests one of which is a secure request to access content and another of which is an unsecure request to access content. In this example the processing unit can be further configured to cause the unsecure request to be generated such that unsecure applications are capable of responding to the unsecure request to cause the secure request to be generated such that secure applications and only secure applications are capable of responding to the secure request.

The processing unit can be further configured to receive a selection of a secure application of the combined list and to cause a second content location to be modified such that the modified second content location indicates that the modified second content location is associated with a secure application. The processing unit can be further configured to cause the selected secure application to be launched. In one arrangement the computing device can further include an encryption unit. The encryption unit can be configured to decrypt data that is returned from the selected and launched secure application.

A computing device that has at least one secure application and at least one unsecure application installed thereon is also described herein. This computing device can include an interface that can be configured to display the secure applications and the unsecure applications and can also include a processing unit. The processing unit can be configured to receive a content request from one of the secure applications or one of the unsecure applications to share content. If the content request to share content is from an unsecure application the processing unit can be configured to cause a combined list to be displayed on the interface in response to the content request that shows at least one unsecure application that is able to respond to the content request to share content and at least one secure application that is able to respond to the content request to share content. If the content request to share content is from a secure application the processing unit can be configured to cause only one or more secure applications to be displayed on the interface that are able to respond to the content request to share content from the secure application in response to the content request from the secure application such that no unsecure applications are displayed on the interface in response to the content request from the secure application.

As an example the secure application that is displayed in response to the content request to share content from the unsecure application is a container application that provides access to additional secure applications that are able to respond to the content request to share data from the unsecure application. As another example the computing device can include an authentication unit that is configured to authenticate a user of the computing device if the user selects the container application or another secure application that is displayed in response to the content request to share data from the unsecure application.

In one arrangement if the user selects the container application the processing unit can be further configured to generate a secure content request that can be configured to be processed by a system process to enable a return of the additional secure applications that are able to respond to the content request to share content from the unsecure application. In another arrangement if the content request to share content is from the unsecure application the processing unit can be further configured to cause a content location to be modified to indicate that the content request to share content is from an unsecure application.

Further features and advantage as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. It is noted that this description is not limited to the specific embodiments presented herein. Such embodiments are provided for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the embodiments herein will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments however the scope of the present claims is not limited to these embodiments. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present claims.

References in the specification to one embodiment an embodiment an example embodiment one arrangement an arrangement or the like indicate that the embodiment or arrangement described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment or arrangement. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment or arrangement it is submitted that it is within the knowledge of one skilled in the art to implement such feature structure or characteristic in connection with other embodiments or arrangements whether or not explicitly described. The word among as it is used throughout this description should not necessarily be interpreted as requiring exchanges or interaction among three or more applications irrespective of grammar rules. The word a is not necessarily limited to a singular instance of something as it may mean one or more.

Several definitions that apply throughout this document will now be presented. The term exemplary as used herein is defined as an example or an instance of an object apparatus system entity composition method step or process. The term communicatively coupled is defined as a state in which two or more components are connected such that communication signals are able to be exchanged directly or indirectly between the components on a unidirectional or bidirectional or multi directional manner either wirelessly through a wired connection or a combination of both. A computing device is defined as a component that is configured to perform some process or function for a user and includes both mobile and non mobile devices. The term computer readable storage medium is defined as one or more components that are configured to store instructions that are to be executed by one or more processing units.

An application is defined as a program or programs that perform one or more particular tasks on a computing device. Examples of an application include programs that may present a user interface for interaction with a user or that may run in the background of an operating environment that may not present a user interface while in the background. The term operating system is defined as a collection of software components that directs a computing device s operations including controlling and scheduling the execution of other programs and managing storage input output and communication resources. A processing unit or processor is defined as one or more components that execute sets of instructions and the components may be disparate parts or part of a whole unit and may not necessarily be located in the same physical location.

The terms memory memory element or repository are defined as one or more components that are configured to store data either on a temporary or persistent basis. The term shared memory is memory a memory element or a repository that is accessible directly or indirectly by two or more applications or other processes. An interface is defined as a component or a group of components that enable s a device to communicate with one or more different devices whether through hard wired connections wireless connections or a combination of both. An input output device is defined as a device that is configured to at least receive input from a user or a machine that is intended to cause some action or other effect on a component with which the input device is associated.

The term file system is defined as an abstraction that is used to organize store and retrieve data. The term secure application is defined as an application that has been modified from its original form to restrict communications between the application and unauthorized programs applications or devices and to restrict operation of the application based on policy or to alter augment or add features associated with the operation of the application or any combination thereof . A target application is defined as an application that has been selected for conversion into a secure application. An unsecure application is defined as an application that has not undergone the modification required to convert the application into a secure application and as such is unable to obtain data from a secure application in view of an obfuscation scheme employed by or applied to that secure application. A virtual machine is defined as a platform independent execution environment that emulates a physical machine.

The term personal workspace is defined as a workspace profile or partition that is configured to contain the personal content and unsecure applications or other unsecure programs associated with a user of a computing device on which the personal workspace sits. The term secure workspace is defined as a workspace profile or partition that is configured to contain secure content secure applications and other secure programs and requires some form of authentication to be accessed.

The term runtime is defined as at least the portion of time that an application or other program is executing. A secure namespacing scheme is defined as a namespacing scheme that is designed to be unpredictable and for use only by secure applications. The term secure request is defined as a request that has been modified to conform to a secure namespacing scheme or some other obfuscation process designed to protect the request from being processed by an unsecure application or other program. In addition a secure return is defined as a return that conforms to a secure namespacing scheme or some other obfuscation process designed to protect the return from being processed by an unsecure application or other program. The term manifest is defined as a file that contains information about an application that is designed to enable the application to interact with a system that supports the application.

The term content is defined as any type of material information or data that is capable of being shared between applications. A content request is defined as a request originating from an application to access content from or provide content to one or more other applications. A conventional content request is a content request that is in accordance with the standard content request protocol set by an operating system or other controlling or managing objects on a computing device. A secure content request is a content request that is in a form such that it is recognizable by secure applications but not unsecure applications. The phrase content location is defined as information that is used to identify the location s of content and the phrase modifying content location is defined as altering or amending content location strings to enable a distinction to be recognized between content location strings that are associated with unsecure applications and those that are associated with secure applications. The term character is defined as one or more symbols that represent data that can be processed by a processing unit or other component.

An encryption unit is defined as a component that is comprised of hardware and software and that is configured to encrypt and or decrypt data. An authentication unit is defined as a component that is comprised of hardware and software and that is configured to authenticate a user other component or entity prior to that user other component or entity being granted access to a secure application or some other secure or protected data.

As explained earlier solutions have been developed that enable a mobile device to include both enterprise and personal data but that isolate the enterprise data from the personal data. In particular a user s device may include both secure and unsecure applications. Accordingly it may be useful to provide ways to enable the selective exchange of data between secure and unsecure applications in an efficient manner.

In view of this need a system and method for enabling the exchange of content between secure applications and unsecure applications are described herein. Content requests can be received from secure applications and unsecure applications. In response to the content requests listings of options can be returned that have the ability to satisfy the content requests from the requesting secure applications or the requesting unsecure applications. In addition selections of the options of the listings of options can be received through the requesting secure applications or the requesting unsecure applications. Content locations that are to be returned to the secure applications can be selectively modified such that subsequent content requests that involve the modified content locations are identified as being associated with an unsecure option.

Through this arrangement secure and unsecure applications can selectively exchange data with one another. Moreover in view of the modification of the content locations confusion over whether a data request is intended for a secure application or an unsecure application can be avoided.

Referring to a system that is useful for distributing applications is shown. In one arrangement the system can include an application developer portal a network a management unit an application store or repository and any number of computing devices . Although not shown here the system can include multiple application developer portals networks management units or application stores . Also while implies that the computing device is a mobile unit the system and the processes described herein may be relevant to and practiced with fixed computing devices.

The application developer portal can present an interface that enables developers of applications to upload their applications for eventual publication in the application store . The application store as is known in the art can enable users of the portable computing devices to install such published applications on their devices . In some cases the applications from the application developers may be directed to the management unit prior to being published in the application store . Through the management unit the applications may be modified such that they are more conducive for operation on behalf of an enterprise or other organization. For example the applications may be converted into secure applications a process in which certain intercepts may be imposed on an application during runtime such that functions of the application may be restricted enhanced or otherwise modified in some way depending on input from the enterprise. Examples of this process will be presented below. An application that has been selected for conversion into a secure application by the management unit or some other component may be referred to as a target application. In addition an application that has not undergone the process of conversion into a secure application may be referred to as a non secure or unsecure application.

Once a secure application is generated it can be published in the application store similar to a conventional application that has been published. Because the application store accepts and offers secure applications it may also be referred to as a secure application store . In some cases a secure application store may be configured to accept and offer only secure applications although in other scenarios it may accept and offer both secure and unsecure applications. In addition a secure application store may have limited access to a certain group of users such as those associated with a particular enterprise or it may be open to the general public. If access is limited to the secure application store an accessing user may be required to provide some form of authentication before being granted such access. Moreover the applications that are made available through the secure application store are not necessarily required to be received from the application developer portal as other sources may be used to provide applications to the secure application store .

The network can facilitate communications between any of the components of the system . As mentioned earlier there may be multiple networks in the system and each network may be composed of various types of components to support wireless or wired communications including both . In addition the network s may be configured to support both local or wide area communications or both . In one arrangement the management unit may serve as a remote portal that can be used to manage certain features or operations of the computing devices including the secure applications that may be installed in the computing devices .

Referring to an example of a block diagram of the system architecture of a computing device is shown. In this arrangement the computing device can include a hardware layer a kernel layer and a libraries layer which may include a plurality of native libraries. This architecture may also include a runtime environment a system server a secure framework and an application layer .

In one arrangement the hardware layer may include any number and type of hardware components such as one or more displays one or more input output I O devices one or more processing units and any suitable type and number of memory devices and interfaces . Examples of the I O devices include speakers microphones physical keypads etc. In addition the display can serve as an I O device in the form of a touch screen display. The interfaces can be configured to support various types of communications including wired or wireless and through any suitable type of standards and protocols. In some cases the hardware layer may also include an encryption unit and an authentication unit . The encryption unit can be configured to encrypt and or decrypt content that is associated with the computing device and the authentication unit can be configured to authenticate users or components prior to such users or components being granted access to secure or otherwise protected information. The encryption unit and the authentication unit may be stand alone components or they may be part of the processing unit .

In addition the runtime environment can support any suitable number of virtual machines and core libraries and the system server can serve as an abstraction for the underlying layers for the applications in the application layer and can provide numerous system services for the applications. In this example the application layer may include any number of unsecure applications and any number of secure applications one of which may be a core secure application . The secure framework can function similar to that of a conventional framework but the secure framework can facilitate the encapsulation of a number of secure applications to selectively restrict their data exchanges with the unsecure applications . In particular the secure framework can be configured to intercept and modify certain calls from the secure applications prior to passing them to the system server . Because the unsecure applications may not be privy to the modification technique the unsecure applications may be unable to obtain data from a secure application . Additional detail on this process will be presented below.

In many cases the unsecure applications are associated with the personal data of a user of the computing device . In contrast the secure applications are typically associated with confidential or otherwise sensitive information that belongs to or is associated with an enterprise or some other organization and the user of the device may work for such an entity. In one arrangement a virtual partition may be created on the computing device in which the secure applications and the secure core application are part of a secure workspace and the unsecure applications are part of a personal workspace . In certain cases a user may be required to provide authentication information such as a password PIN or biometric data to gain access to the secure workspace or to any individual or group of secure applications . The authentication information may be verified by the authentication unit . In addition the user may launch both secure applications and unsecure applications through the I O device . As will be shown below in some embodiments a container application not pictured here may be used to access the secure workspace or any of the secure applications .

As mentioned earlier one of the secure applications may be a secure core application . The core application may include any number of files that can make up any number of shared libraries. As an example the files may be Java Archive JAR files and when the core application is loaded these JAR files may be copied to an appropriate repository of the computing device . As such the core application can be responsible for providing a certain number of classes that can make up the shared libraries which can be made available to the secure applications . These classes in some cases can be substituted for certain system classes that would be normally used. In one arrangement the secure framework can be one or more libraries that are delivered by the core application .

Referring to an example of a block diagram of the management unit of is shown. In this example the management unit may include an interface that can be configured to receive a target application . The interface can be any suitable combination of components that are designed to receive the target application from the application developer portal via the network . The management unit can also include one or more processing units one or more I O devices one or more displays and any suitable type and number of memory components. As will be explained below when the target application is received the management unit can be used to convert the target application into a secure application which may be eventually installed on the computing device .

Referring to an exemplary method for creating a secure application to enable runtime injection of the application is shown. The method however may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to and although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes.

At step a target application can be received and an override class can be implemented in the target application as shown at step . The override class can be declared in the target application thereby creating a secure application as shown at step . At step conventional components of the target application may be modified to create corresponding secure components. In addition at step the secure application can be uploaded to an application repository for distribution to a computing device. Examples of these steps will be presented below.

In one arrangement the management unit can receive the target application which can include conventional components and a manifest that presents information about the conventional components. A conventional component in this sense is a component that already exists in the target application and is capable of being modified as part of the process in converting the target application into a secure application . Examples of conventional components include intents and intent filters activities services and content providers. Another example of a conventional component is an application class which as is known in the art is a base class for maintaining global variables.

Once the target application is received an override class can be implemented in the target application as mentioned earlier. For example an application tag in the manifest can be modified to cause the override class to extend the pre existing application class. As part of this process in one embodiment the override class can be declared in the manifest of the target application . In view of this configuration at launch the override class can be loaded prior to any of the conventional components. Any adapt code can be integrated into the target application to ensure that this process occurs. As will be explained further below the override class can cause an override class loader which may be part of the secure core application to be injected into the normal system operation.

Steps can also be taken to modify other conventional components of the target application . For example any number of the intents intent filters activities services and content providers recited in the manifest of the target application may be modified or decorated to create corresponding secure components. The conventional components that are modified may be components that are well known in view of the design of the target application in relation to an operating system of the computing device . In view of this decoration process these corresponding secure components may be in compliance with a predetermined and unpredictable namespacing scheme which can be used to ensure the security of the interprocess communications of the secure applications . The technique of modifying the conventional components in the manifest is also useful for intent resolution. At this point or alternatively when the override class is implemented or declared the target application may be considered to be a secure application .

In one arrangement the secure application may be uploaded to an application repository such as an electronic application store. The computing device may be configured to access the repository and can download and install the secure application . Once installed steps can be taken to enable runtime injection of the secure application as will be explained below.

Referring to a method for runtime injection is illustrated. The method however may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to and although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes. Reference may also be made to which show examples of message exchange between several components to help explain the method although other exchange models may be applicable here.

At step it can be determined that a secure application has been initiated and at step an instance of a secure framework can be loaded as part of the process of the secure application. In response to the initiation of the secure application one or more conventional variables associated with the secure application may be replaced with a corresponding proxy as shown at step .

For example when the secure application is installed on the computing device the decorated secure components can be registered with the system server or some other element of the system of the computing device . In addition as previously noted the core application of the computing device may include any number of libraries that may be shared among the secure applications including the secure framework .

When a secure application is initiated the override class can be initiated prior to the application class and the override class can be responsible for loading the shared libraries of the core application one of which may be an override class loader. Moreover as part of this flow an instance of the secure framework can be loaded as part of the process of the initiated secure application . As such the override class loader can enable the secure application to access the shared libraries of the core application even though the secure application may have been initially unaware of them.

As part of this initial set up of the secure application the override class loader can also enable runtime hooks to be set up for the secure application . As an example the override class loader can load an encryption manager that can establish runtime encryption hooks and a service manager that can set up other runtime hooks for any number of system services. In one arrangement this procedure can cause one or more conventional variables of the application framework of the process for the secure application to be replaced with a corresponding proxy. In one arrangement the replaced conventional variables can correspond to system services that are available to the secure application . For example any number of well known application programming interfaces API that are related to system services can be parsed and certain variables of these APIs can be replaced with a corresponding proxy. As another example the variables of the APIs that are replaced may be fields that serve as the binder or interface between the application space of the secure application and the system server or other system process.

Continuing with the example the corresponding proxy can be an invocation handler that is an object of the same type as the replaced field and the invocation handler can be a generic object that can implement all or at least a substantial portion of the classes of the operating system of the computing device . As part of this configuration the invocation handler can process various methods and can provide a single method of invoke. Moreover the invocation handler encapsulates the replaced field and the invocation handler is integrated into the application process for the secure application . As such the corresponding proxy can be considered a different instance of the replaced field and as will be explained below can enable the decoration of the affected API calls and their delivery to the system server .

As can be seen this process can enable runtime hooks to be implemented for the APIs of the secure application . Any number of the system services may be targeted during this step including all of them or only a portion thereof. Once the initial relevant classes have been loaded and the runtime hooks have been set the override class loader may selectively defer to the application class. In view of this selective deferment there are some instances where the override class loader may load other classes from the core application during runtime in place of system classes. As will be explained below the classes loaded by the override class loader may facilitate the modification or decoration of calls from the secure application . Additional information on the override class loader and its operation can be found in U.S. Patent Application No. 61 936 378 filed on Feb. 6 2014 which is incorporated herein by reference.

Referring back to the method during runtime of the secure application a conventional request from the secure application can be intercepted as shown at step . At step the intercepted conventional request can be modified such that the request is unrecognizable to an unsecure application thereby creating a secure request. At step the secure request can be passed to a system process to enable the system process to process the secure request. In response to the secure request a secure return may be received from the system process as shown at step . At step the secure return may then be converted to a conventional return and the conventional return can be passed to the secure application for processing by the secure application as shown at step .

Referring to examples of this process will be presented. In the first example which is illustrated in a user may have initiated a secure application and may wish to share some type of content such as with another secure application . In the second example which is shown in a user may wish to copy some content from a secure application and paste that content in the same secure application although such content may be pasted in a different secure application.

Referring to a representation of a message exchange between a secure application an application framework a secure framework and a system server is illustrated. In this example the secure application the application framework and the secure framework may be considered to be part of an application process . In addition the system server may be part of a system process a process that is separate from the application process .

In this example as previously noted the user may wish to share some content from the secure application . Accordingly a conventional request may be generated by the secure application which normally would be facilitated by the application framework . A conventional request in this context is simply a request that conforms with a normal request for a system service and has not yet been decorated or modified. In view of the runtime hooks the conventional request can be intercepted and directed to the secure framework which can modify or decorate the conventional request. This decoration can convert the conventional request into a secure request which can conform to a predetermined secure namespacing scheme. For example the relevant component of the conventional request may be appended with an affix or some other morpheme or any number of characters to create the secure request. At this point only applications that are privy to the secure namespacing scheme such as the secure applications may be able to respond to the secure request. Accordingly these communications may be modified such that they are obfuscated from or unrecognizable by unsecure applications.

Once the secure request is created the secure framework can make the same API call to the encapsulated field thereby sending the secure request to the application framework . The application framework can then send the secure request across to the system server which can process the secure request. For example one or more other secure applications may have previously declared certain component filters in their manifests that would enable them to respond to the secure request for sharing content. As such the system server can send to the secure framework a secure return that is related to the secure applications that can handle the request.

As an option the secure framework can convert the secure return to a conventional return or can perform additional filtering or other steps. In one arrangement the secure return can be converted to a conventional return by removing the appended affix from the secure return a process that may also be referred to as undecorating. The secure framework can pass the conventional return to the application framework which can send it to the secure application for processing. As an example if more than one secure application can handle the request a chooser dialog or some other user interface element can be presented to the user to permit the user to select which secure application should process the request. If the user selects one of the presented secure applications that secure application can launch and the calls associated with this interaction can be decorated and undecorated as described above with the secure framework overseeing such manipulation.

Referring to an exemplary copy and paste operation is presented. In this example a user may be operating a secure application and may copy some data that is associated with the secure application . In view of the description above the copy call may be intercepted by the secure framework which can modify the call by re directing it to the core application . In response the core application can store the copied data in a memory element which may be a memory element with restricted access. In one arrangement the data copied in the memory element can be mapped to enable correlation which may be helpful if multiple copy operations are permitted in the computing device .

In one embodiment the core application can return a hash of an identifier to the secure framework . For example the identifier can be a timestamp of the current time although other identifiers may be employed here. The secure framework can then send the hash of the identifier to the encapsulated field or interface of the application framework which can then send it to the system server . The system server can then copy the hash of the identifier in a memory element in accordance with standard operating procedure for a copy API. Thus the copy request may be modified because the true data intended to be copied is intercepted and replaced with a hash of an identifier. Moreover the request is unrecognizable by an unsecure application because an unsecure application that attempts a paste operation will be returned the hash of the identifier not the data from the secure application . Accordingly the request can be decorated in ways that are different from appending the components as described above.

At a later time the user may wish to perform a paste operation either from the same secure application from where the copy feature was initiated or a different secure application . In this example the paste originates from the secure application that initiated the corresponding copy operation.

Here the paste operation can be intercepted by the secure framework and can be directed to the application framework which can send the paste call to the system server . The system server can retrieve the hash of the identifier from the memory element and can return it to the secure framework . In response the secure framework can return the hash of the identifier to the core application which can then retrieve the actual copied data from the memory element . Subsequently the core application can return the actual copied data to the secure framework which can then pass the data to the application framework . At this point the application framework can return the data to the secure application to complete the paste operation.

As noted earlier there are certain system services that may be hooked to render the affected communications or operations taking place from being recognizable by unauthorized processes such as unsecure applications. While many well known API calls may be targeted in this scheme some system services may be unaffected. That is this process may apply to only certain calls to and from the secure application while the remaining ones are permitted to proceed in conventional fashion.

As previously mentioned the computing device may include both secure applications and unsecure applications . As has been shown here steps may be taken to protect data or content requests originating from a secure application from being processed or otherwise handled by an unsecure application . Nonetheless there may be some instances in which content may be permitted to be exchanged between unsecure applications and secure applications . Examples of these instances will be presented below.

In view of such content exchange steps may be taken to avoid confusion in the delivery or acquirement of the requested data. In particular the computing device may include a secure application and an unsecure application that are the same type of applications. For example the computing device may have an unsecure version of a picture gallery that includes personal pictures of the user of the device and a separate and secure version of a picture gallery that contains pictures associated with the user s employer or some other entity. In this case the pictures from the secure gallery may be encrypted and not meant to be accessed without user authentication. As another example the computing device may include both secure and unsecure versions of an application that stores and manages documents stored at a remote location. Even though the content requests associated with the secure version of an application may be isolated from the unsecure version of the application steps may need to be taken to minimize or prevent comingling of the content that is the subject of such content requests.

Consider the example where the computing device includes a secure picture gallery and an unsecure picture gallery. If a user is interacting with a secure application and wishes to attach a picture from the unsecure picture gallery i.e. unsecure application a process may be implemented to ensure that the selected content is pulled from the unsecure picture gallery instead of the secure picture gallery. This process can distinguish content requests associated with unsecure applications from those involving secure applications. As part of these scheme steps may also be taken to ensure that protected or secure content is still kept from being received by unsecure applications or other unauthorized processes. Several examples illustrating this feature will be presented below.

Referring to a method of enabling the exchange of content between secure applications and unsecure applications is shown. The method may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes. Reference may also be made to which show examples of message exchange between applications to help explain the method .

At step content requests can be received from secure applications and unsecure applications. At decision block it can be determined whether a particular request is from a secure application or an unsecure application. If the request is from a secure application the method can continue to decision block . If the request is from an unsecure application the method can continue to step which moves the flow to . A description related to will appear below.

Returning to decision block it can be determined whether the content request is a request to access content or to share content. If the request is to access content the method can continue at step and if the request is to share content the method can continue at step . Turning to step a conventional content request and a secure content request can be generated in response to the request to access content. At step a combined listing of secure and unsecure applications that can satisfy the request to access content can be returned and displayed. A selection of for example an unsecure application may be received as shown at step . At step a content location can be modified to identify the content location as being associated with an unsecure application. At step a selection of a secure application can be received and a content location can be modified to identify the content location as being associated with a secure application as shown at step .

An example of the process described above will now be presented with reference being made to . In a signal flow between a requesting secure application and a providing secure application and a providing unsecure application is shown. A system server and instantiations or portions of a secure framework for the requesting secure application and the providing secure application are also shown. To be clear this signal flow represents an example of a secure application generating a request to access content. Moreover in this example the concept of intercepting and modifying conventional requests to convert them to secure requests a process that was described above applies here.

Initially a user may be interacting with a secure application and the user may wish to access content through this secure application . As such in this case the content request is a request to retrieve or access content and the secure application may be referred to as a requesting secure application . In one arrangement secure applications may be permitted to access content from other secure applications and even unsecure applications . That is the ability to retrieve unsecure content outside the secure workspace or other secure environment of the computing device may be allowed because such a step does not violate the principle of keeping secure content from being disseminated outside the secure workspace or the secure environment.

A secure application that may be able to provide content in response to the request from the requesting secure application may be referred to as a providing secure application . Moreover to minimize confusion the instantiation or potion of the secure framework that is attached to the requesting secure application may be referred to as a requesting secure framework . Conversely the secure framework associated with the providing secure application may be called a providing secure framework . The use of the modifiers requesting and providing should not be construed as limiting the secure applications and the secure frameworks to which they are attached. That is the roles of these secure applications and secure frameworks may change depending on the type of operation being executed.

To accomplish the task of possibly retrieving content from both secure applications and unsecure applications the content request may be comprised of two requests a secure request to access content from secure applications and a conventional request to access content from unsecure applications . For example the requesting secure application may generate a request to access content which the requesting secure framework can intercept. The requesting secure framework can then convert the intercepted request to a secure content request in accordance with the process previously described. The requesting secure framework can then pass the secure content request to the system server . In addition the requesting secure framework can pass the content request as is i.e. the conventional request to access content to the system server . In one particular example these requests may be intents although other suitable abstract operational identifiers may apply here including for any of the other actions presented herein.

An unsecure application that is installed on the computing device may register with the system server or some other component to indicate to the system server that the unsecure application is capable of handling certain requests from other applications. Thus when the conventional content request is passed to the system server the system server can determine which unsecure applications have the ability to satisfy the conventional content request. Secure applications when installed may also register with the system server or other suitable component to enable the system server to determine which providing secure applications are capable of supporting the secure content request. In view of the secure namespacing scheme described earlier the unsecure applications are prevented from responding to the secure content request.

Once the system server determines which unsecure applications and which providing secure applications have the ability to satisfy respectively the conventional content request and the secure content request the system server can return a combined listing of them to the requesting secure framework which can return the combined listing to the requesting secure application . The returned unsecure applications and providing secure applications may be displayed to the user in any suitable format to enable the user to make one or more selections. An example of such a presentation is shown in .

In a secure application such as a secure email application is shown in which a user wishes to attach some form of content to the secure application . A menu is pictured that presents several options to retrieve or access content for the user to choose. Depending on which option is selected another menu can be displayed that presents a combined listing of options that have the ability to satisfy the request to retrieve or access content such as both secure applications and unsecure applications that can handle the request. Various schemes such as text or icon designs can be structured to enable the user to distinguish between secure applications and unsecure applications particularly when such applications are different versions of the same application e.g. secure gallery versus unsecure gallery . At this point the user while interacting with a requesting secure application can retrieve content from either a providing secure application or a providing unsecure application without violating the principle of isolating secure or protected content from the unsecure applications .

In this example the user may select a providing unsecure application through the menu to access some desired content. Turning to again the requesting secure application can generate a request to launch the selected unsecure application . In this case because the request involves an unsecure application the request to launch the unsecure application should not be modified. This request is eventually passed to the unsecure application which can then be launched. The user may then select the content that the user wishes to access from the unsecure application .

Once the content is selected the unsecure application can generate a return that includes for example a content location that can provide data as to where the selected content is located on the computing device or even a remote location . In one embodiment the content location may be a uniform resource identifier URI or some other string of characters that indicate where the related content is located either on the computing device or some remote location. The generated return and the content location can be passed to the requesting secure framework which can be configured to modify the content location. For example a character can be appended to the content location that can identify the content location as being associated with an unsecure application . The modified content location can then be returned to the requesting secure application . With this return the requesting secure application may eventually seek to retrieve the content associated with the modified content location as will be explained later.

The object that is modified at this stage is not necessarily limited to a content location. Specifically any part of the return from the unsecure application may be modified in any suitable way to identify the return as being associated with an unsecure application . Moreover the content location may not necessarily be associated with a single location. For example the content location may comprise multiple locations such that the portions of the requested content are stored in numerous separate areas.

Once it receives the return with the modified content location the requesting secure application may generate a request for the actual content related to the modified content location. For example referring to the secure email application of the user may have taken action to cause an email to which the access content is to be attached to be delivered to its intended destination. The requesting secure application can pass the content request along with the modified content location to the requesting secure framework . The requesting secure framework can recognize the modified content location as being associated with an unsecure application . As such the requesting secure framework can make a distinction between the relevant unsecure application and a potential providing secure application that is a secure version of the relevant unsecure application . For example if the computing device includes an unsecure picture gallery and a secure picture gallery the modified content location from the requesting secure application enables the requesting secure framework to determine that the request is to be directed to the unsecure picture gallery. Thus this model enables content requests to be properly directed in the case of secure and unsecure versions of the same application.

In one embodiment the requesting secure framework can remove the modification of the content location such that the content location can be in its original form. As an example this arrangement can be done by stripping out the character appended to the URI. In an alternative embodiment the original character that was added to modify the URI can be replaced with another character and this replacement scheme may apply to any of the exchanges described herein. In either event because the content request is to be directed to an unsecure application there is no need to modify the content request itself. The content request and the original content locations can be passed to the unsecure application . The unsecure application because it is dealing with an unmodified content request and content location can process the request in a conventional manner eventually returning the requested content to the requesting secure application .

As noted earlier the user may select a providing secure application from the menu of instead of an unsecure application . The signal flow associated with this selection will also be presented in and the dashed horizontal line separates the first content request directed to the unsecure application discussed above from the second content request that seeks content from the providing secure application . Because the initial steps of this second example may be the same as already presented with respect to the first example this description can begin at the point where the user has selected a providing secure application .

Once a providing secure application is selected the requesting secure application can generate a request to have the providing secure application launch which the requesting secure framework can intercept. Because a secure application was selected the requesting secure framework can modify the request to launch the providing secure application to obfuscate or hide the request from any unauthorized processes such as unsecure applications . The requesting secure framework can then pass the modified request to the system server which can send the request to the providing secure framework . In response the providing secure framework can remove the modification to the request and can pass the unmodified request to the providing secure application which can be launched.

At this point the user may select some content from the providing secure application and the providing secure application may generate a return in response to the selection and send the return to the providing secure framework . This return may include a content location that can identify the location of the requested content. Like the example above the content location in this illustration can be a URI.

The providing secure framework can intercept and modify the request to hide it from the unsecure applications . As part of this step the providing secure framework can also modify the content location which can identify it as being associated with a secure application . For example the providing secure framework can append the URI from the providing secure application with some character that can serve as a signal for such identification. This character may be in a different form from that of the character assigned for unsecure applications to assist in the distinction between the unsecure applications and the secure applications . Because the content return and the content location and URI in this example are associated with a secure application they may be respectively referred to as a secure content return and a secure content location and secure URI upon their modification by the providing secure framework .

The providing secure framework can then pass the secure modified content return and the secure modified content location to the system server which can forward the modified secure return and secure content location to the requesting secure framework . In one arrangement the requesting secure framework can remove the modification from the secure return and the secure content location that is part of the return. The requesting secure framework can send the conventional unmodified return and content location to the requesting secure application .

Subsequently the requesting secure application may generate a request to access the content associated with the unmodified content location which can be intercepted by the requesting secure framework . The requesting secure framework can convert the content request into a secure content request and can modify the content location in accordance with prior examples and description. In one arrangement the requesting secure framework can be set to default to a secure version of an application when it receives an unmodified content location from a requesting secure application . In other words the requesting secure framework can determine on a default basis that an unmodified content location from a first secure application is associated with content from a second secure application .

The requesting secure framework can then pass the modified secure request and modified secure content location to the system server . The system server can send the secure request and secure content location to the providing secure framework which can remove the modifications. The providing secure framework can then pass the unmodified request and unmodified content location to the providing secure application . The providing secure application can then return the requested content to the requesting secure application .

In some embodiments the content that is to be returned from the providing secure application may be encrypted. In such cases the providing secure application can decrypt this content prior to it being sent to the requesting secure application . The requesting secure application may then re encrypt the content with its own key s prior to sending out such content. Of course the returned content may also stay in its encrypted state during its transfer to the requesting secure application . In another arrangement the secure applications may be configured to share encryption keys if such an arrangement is desired. In either case the encryption unit see may support any encryption decryption that may be needed.

As can be seen an exemplary system method is provided in which modifications may be selectively made to ensure interprocess communications between secure applications are kept secure and to facilitate the distinction between content locations associated with secure applications and their corresponding unsecure versions i.e. unsecure applications . That is tagging the content locations associated with an unsecure application and leaving such modifications in place upon presentation to the requesting secure application can ensure that the requesting secure framework can determine that it is dealing with a content request from an unsecure application . The modifications to the content locations associated with secure applications may be removed before being presented to the requesting secure application . This step can be performed because unmodified content locations from a secure application may be assumed to be associated with another secure application . Although in contrast to the treatment of a content location associated with an unsecure application this process can minimize the operational structural changes required for secure applications .

In an alternative arrangement however the content location associated with secure applications may remain modified when presented to a requesting secure application i.e. it may not be necessary to remove the modification prior to it being passed to the requesting secure application . In yet another arrangement the content locations associated with secure applications may remain modified for presentation to the requesting secure application and the content locations associated with unsecure applications may be unmodified prior to such presentation. In other words the system can on a default basis determine that an unmodified content location from a secure application is from an unsecure application .

Although a combined listing of secure applications and unsecure applications may be presented to a user for convenience such an arrangement is not a necessity. For example separate listings for secure applications and unsecure applications may be returned and displayed to the user. Moreover some content requests may be answered in an explicit manner such that a single secure application or unsecure application may be presented in response to a content request for a particular secure application or unsecure application . Also even though the description above notes that content locations associated with both secure applications and unsecure applications may be modified to indicate their association with such versions such an arrangement is not meant to be limiting. For example only the content locations associated with the unsecure applications may be modified and those of the secure applications may remain unaltered during the content exchange process. In another example only the secure content locations may be modified in accordance with the description above and those of the unsecure applications may not need to be modified. Although described in reference to a process of accessing content these alternative arrangements may apply to other operations including those involved with secure applications unsecure applications or both.

Referring once again to the next portion of the method will focus on a secure application seeking to share content. At step a secure content request can be generated and at step a listing of only secure applications may be returned and displayed. At step a selection of a secure application may be received. A content location can be modified to identify the content location as being associated with a secure application as shown in step .

Referring to an exemplary signal flow diagram is shown. In this example a user may be interacting with a secure application and may wish to share some content from the secure application . The secure application in this example may also be referred to as a requesting secure application as it is generating a request to share content. As also shown in the signal flow diagram a requesting secure framework a system server a receiving secure framework and a receiving secure application may facilitate this exchange.

In response to the user s actions the requesting secure application can generate a content request and the requesting secure framework can intercept and modify the content request. In accordance with prior descriptions herein this step can convert the content request into a secure content request. The requesting secure framework can then pass the secure content request to the system server . In response the system server may return one or more receiving secure applications that may be able to process the request i.e. receive the content . Because the content request is a secure content request the system server may only return receiving secure applications as the unsecure applications should not be registered for secure content requests. Similar to the description presented in the receiving secure applications that can handle the content request may be displayed to the user such as through a menu.

The user may then select one of the secure applications to receive the content and the requesting secure application can generate a request to have the selected receiving secure application launch. The requesting secure framework can intercept the launch request and can convert it into a secure launch request. The secure launch request may also include a content location that identifies the location of the content to be shared with the receiving secure application . Because the content to be shared is from a secure application the requesting secure framework can also modify the content location e.g. a character may be appended to the URI to convert it to a secure content location. The requesting secure framework can then pass the secure launch request and the secure content location to the system server which can forward it to the receiving secure framework . The receiving secure framework can remove the modifications to the secure request and content location and can pass them to the receiving secure application . The receiving secure application may then be launched.

Eventually the receiving secure application may generate a request for the content which may be intercepted and modified by the receiving secure framework . The content location may also be modified by the receiving secure framework to indicate that it is associated with a secure application . The receiving secure framework can then pass the secure content request and the secure content location to the system server which can send it to the requesting secure framework . In response the requesting secure framework can remove the modifications to the secure content request and the secure content location and can return them to the requesting secure application . At this point the requesting secure application can return the requested content to the receiving secure application . Like the example above the returned content may be decrypted prior to delivery to the receiving secure application or may remain encrypted during this stage. If decrypted the receiving secure application may re encrypt the returned content.

Referring back to at decision block if a content request is from an unsecure application then the method can continue to step which can jump to . Turning to a method is shown in which an exemplary content request from an unsecure application is performed. Like previous descriptions the method may include additional or even fewer steps or processes in comparison to what is illustrated in . Moreover the method is not necessarily limited to the chronological order that is shown in . In describing the method reference may be made to although it is understood that the method may be practiced with any other suitable systems and components and may take advantage of other suitable processes. Reference may also be made to which show examples of message exchange between applications to help explain the method .

At decision block it can be determined whether the content request is to access content or to share content. If the request is to access content the method can continue to step where content can be accessed from unsecure applications only.

As an example a user of the computing device may be interacting with an unsecure application and the user may wish to access some content from another application or share content from the unsecure application with some other application. If the content request is to access content from another application then the unsecure application can generate a content request that can be processed by the system server . Because the content request is coming from an unsecure application the content request may be in its conventional form or not in a modified state to prevent it from being hidden from other unsecure applications . The system sever can then return any number of unsecure applications that can respond to the request to access the content. No secure applications however should be returned in response to this request to access content because secure applications in this setting are generally or completely barred from sharing such content with unsecure applications .

In contrast if the content request is a request to share data from an unsecure application secure applications may be permitted to accept such content from the unsecure application . Returning to at decision block if the content request is to share content the method can continue at step . At step a combined listing of secure and unsecure applications that are able to satisfy the sharing content request can be returned and displayed. At decision block it can be determined whether a secure application or an unsecure application is selected. If an unsecure application is selected the content can be shared with that unsecure application as shown at step . If however a secure application is selected the user may be authenticated as shown at step . In addition a content location may be modified to indicate that the content location is related to an unsecure application as shown at step .

To help explain this process reference will be made to which illustrates a signal flow diagram . The signal flow diagram is an example of an unsecure application sharing content with a secure application . Once the user selects an action to share the relevant content from the unsecure application the unsecure application may generate a share content request which can be passed to the system server . In this case the share content request should not be modified as when dealing with secure applications because the request originates from the unsecure application . In response the system server can return a listing of components that are able to process the share request. The listing of components can include one or more unsecure applications and one or more secure applications .

In one arrangement the secure application that is returned can be a container application . The container application may be an application that enables a user to switch from the personal unsecure workspace to the secure workspace . Even though the container application may be considered a secure application it may be registered with the system server as an unsecure application that is capable of handling certain requests from unsecure applications .

Continuing with the example whichever unsecure applications and secure applications are returned can be displayed to the user. For example referring to an unsecure application with which the user is interacting is shown and the user may wish to share some content from this unsecure application . A menu may present the available options to the user which can in this example include multiple other unsecure applications and the container application . Either one of these options may be selected for sharing the relevant content.

Referring back to if the user selects an unsecure application the content can be shared with the selected unsecure application and no modifications to the exchanges between the unsecure applications and the system server are necessary. That is conventional message exchanges may be performed here. If the user selects the container application the initial request to launch the container application may remain unmodified and the container application may launch. The secure framework of the container application however may intercept and modify the content request originating from the container application such that only secure applications may be returned for servicing the share content request. The system server can then return the secure applications that can process the share request. Turning back to an example of a menu is shown that reflects the returned secure applications that may be able to receive the content that the user wishes to share. The user may select any one of these secure applications for purposes of having the content from the unsecure application delivered to that selected secure application .

Moving back to once the user selects a secure application for receiving the content from the unsecure application the container application can generate a request to have that secure application launch. The secure framework attached to the container application can intercept and modify this request as the message exchange here involves secure applications . The modified launch request may also have the content location associated with the content to be shared from the unsecure application . As an example this content location may remain unmodified at this point.

When the receiving secure framework receives this exchange it may remove the modification from the launch request and may modify the content location. As before the modification of the content location may involve appending a URI with some identifier to indicate that the modified content location is associated with an unsecure application . The receiving secure framework may also cause an authentication request to be presented to the receiving secure application . The authentication request can cause the receiving secure application to request some form of authentication from the user such as a personal identification number PIN request screen.

When the receiving secure application launches the user may be presented with a request for credentials such as a PIN and if the user provides the correct response the receiving secure application may become active. If the user is unable to provide the proper credentials however the receiving secure application may abort the launch procedure and shut down.

The receiving secure application may then request the content to be shared and the receiving secure framework may remove the modification to the content location as previously described. Because the content request is destined for an unsecure application the content request may not be modified. As with previous cases the modification of the content location enables the receiving secure framework to distinguish between different versions secure and unsecure of the same application. The relevant unsecure application in response to the content request can return the requested content to the receiving secure application . In this example the content returned to the receiving secure application may not need to be decrypted because the content is originating from an unsecure application . The secure application however may take steps to have the returned content encrypted particularly before the content is sent outside the secure workspace .

One skilled in the art will appreciate that the processes described herein may be under the direction of facilitated by or at least assisted by one or more of the processing units of . Other circuitry and hardware components of the computing device may also provide such support. For example the encryption unit may handle the encryption and decryption of the exchanged content while the authentication unit may facilitate the authentication of the user when using for example a secure application .

As can be seen methods and system have been described that enable efficient and selective content exchanges between secure applications and unsecure applications. In particular a secure application may generate a content request to access or retrieve content and one or more secure applications and one or more unsecure applications that have the ability to satisfy the request may be returned and displayed to a user of the requesting secure application. Steps can be taken to modify subsequent requests and returns to enable the isolation of secure interprocess communications from unauthorized processes such as the unsecure applications.

In some cases there may be secure and unsecure versions of the same application. For example an unsecure application may be a target application that is converted into a secure application and both the unsecure application and related or corresponding secure application may be installed on the same computing device. Through the selective modification techniques presented here the processes in place may be able to distinguish between the unsecure application and the corresponding secure application to ensure the correct content is delivered to the requesting secure application.

In a similar vein an unsecure application may generate a content request to share content and any number of secure application and unsecure applications that can process the request may be returned and displayed. If content is to be shared with a secure application for example the user may be required to enter some form of credentials. In any event the principle of protecting secure data or content from unsecure applications or other unauthorized processes may be maintained in this exchange. Further the modification techniques can ensure that the content to be shared is delivered to the correct version secure versus unsecure of application.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the subject matter as defined in the appended claims. Accordingly the breadth and scope of the present subject matter should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

