---

title: Daemon process determination of idle time of network activity at network interface
abstract: Network activity of a client device that is coupled to a data network is monitored, to detect network activity idle time. Based upon detecting the idle time, an application running in the client device is automatically signaled that its background task be executed over the data network. Other embodiments are also described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959213&OS=08959213&RS=08959213
owner: Apple Inc.
number: 08959213
owner_city: Cupertino
owner_country: US
publication_date: 20140114
---
This application is a continuation of U.S. application Ser. No. 13 220 529 filed on Aug. 29 2011 now U.S. Pat. No. 8 683 037 which is a continuation of U.S. application Ser. No. 11 620 613 filed on Jan. 5 2007 now issued as U.S. Pat. No. 8 028 060.

An embodiment of the invention is directed to managing data network communications in a client device. Other embodiments are also described.

A data network allows people to communicate with each other and obtain information from various sources on the network using their respective client devices that are on the network. For example a Web browser application program running in a user s workstation or laptop computer can connect with a Web server to download a Web page. The connection may span several intermediate nodes or hops of the network which may include specialized computers such as routers. These devices can discover routes between the end nodes through which they can forward messages that have been broken up into packets of data. Each node may be assigned a unique or global address such as an Internet Protocol IP address. The Internet is a well known global inter network in which networks of computers are connected to each other via routers.

Computer network protocols have a layered architecture. Typically the upper most layer includes the functionality provided by an application program such as a Web browser. This is the layer that at least in the end nodes may initiate a connection between two computers over a network. Thus for example a user may select a desired Website on his computer. The Web browser running in that computer starts a procedure that results in a connection being made with a server that is associated with the selected Website. The Web browser sends the request down through a series of functions referred to as an Internet protocol suite or Transport Control Protocol Internet protocol TCP IP stack. This stack of protocols is typically implemented in software at its higher layers often as part of an operating system OS program running in the client device. Once the selected Website has been translated into an IP address of a Web server the server is contacted over the Internet and an appropriate connection is made with an upper layer program of a similar protocol suite implemented in the Web server.

To use the connection the TCP IP stack in the user s computer encapsulates a request message from the Web browser in this example a request identifying the Web page. The message may be encapsulated more than once by several vertical layers on its way down in the protocol stack including a network access layer. It finally arrives at the lowest layer of the client device namely the physical layer which is typically deemed to be a part of the network access layer .

After leaving the physical layer of the user s computer and then making its way through one or more hops in the network the message from the Web browser arrives in the Web server and is passed up the protocol stack in the Web server to a program that is deemed a peer of the Web browser. The peer program may then respond to the message by causing the data for the requested Web page to be collected and sent back to the user s computer through the existing network connection. The data is broken up into multiple messages or packets and is sent in a manner analogous to how the request message was sent.

An application program can have several tasks or processes that are executed by one or more processors in the user s computer. When the computer is viewed as a time sharing system a task executing in foreground is given a higher priority to use the resources in the computer than a background task typically the user interacts with only one foreground task per terminal or terminal window to minimize confusion. When a user selects a particular window for example one belonging to an email application all other tasks that are being executed may become background tasks.

Both foreground and background tasks can access the data network. To access the network an application program may first request an operating system OS in the user s computer to open a connection with the remote server. Once the connection has been opened the remote server is said to be listening for requests from the OS in the user s computer. The foreground task in the user s computer can now communicate with the remote server. When finished with the foreground task the application may perform any background tasks it has over the open connection before signaling the OS to close the connection . As an example a user finishes reading her new email messages using an email client application and then clicks on a Web browser window to start surfing the Web. The email client now in background can periodically check with the remote email server for any new messages using its open connection.

Each application program typically gets its own port or connection to the network though they may all share the same lower layer network resources in the user s computer. Thus referring back to the example given above while the email program may be mostly dormant from a network activity standpoint once the user has clicked on the Web browser window network activity resumes when the user clicks on a link to a Web page.

An embodiment of the invention is a computer implemented method for background task execution over a data network. Network activity of the client device is monitored preferably from within the client device to detect network activity idle time. Based upon detecting the idle time an application running in the client device is automatically signaled that its background task be executed over the data network.

In one embodiment the application has registered with a callback mechanism of a software component in the client device. On the basis of the registration the application is then notified by the software component that it is time to execute its background task over the data network. Other embodiments are also described.

An embodiment of the invention is directed to a computer implemented method for background task execution over a data network is a block diagram of a data network environment in which an embodiment of the invention lies. A client device is on a packet switched data work . The network may be an Internet Protocol IP network which may be a wide area network or a global public inter network of nodes that are interconnected by routers such as the Internet. Also on the network are an email server a voicemail server a Web server and another client device in this case a laptop compute . These are just examples of the different end nodes with which the client device can communicate.

The client device may be a desktop computer a notebook or laptop computer a video game machine or other consumer electronic device. In this example the client device is a portable wireless device that may include two way voice email messaging and media playback functions. The communication path between the client device and a server in this example has a wireless segment between the client device and a wireless base station . An application program in the client device uses a protocol suite or stack such as a TCP IP suite in the client device to communicate with a peer program in a remote server. In the Internet reference model the client device communicates with a network access gateway via the base station in accordance with any suitable wireless communications network access protocol examples of which are given below. The other client device may be reached via the combination of another base station and gateway . On top of the network access layer are the internetworking layer e.g. defining an Internet Protocol IP address for each node on the network the transport layer e.g. Transport Control Protocol TCP performing host to host flow control and the opening and closing of connections and the application layer e.g. application programs and process protocols such as HTTP SMTP and SSH .

Turning now to a block diagram of an example client device with networking capability is shown in accordance with an embodiment of the invention. One or more application programs are stored in the client device . An application program may be for example a Web browser a dedicated email client a voice over IP telephony client or a widget that accesses the Internet regularly for example to show the latest news or check the current weather. The application programs as well as the other software components described below are comprised of instructions stored in some form of machine readable medium within the client device . The machine readable medium may be part of a solid state memory a rotating magnetic disk drive or other suitable storage device. The client device also includes one or more processors not shown that are to execute the stored instructions to perform the functionality described below.

The application programs run on top of an operating system OS . An example of the OS is the Mac OS by Apple Computer Inc. of Cupertino Calif. for a desktop or laptop client device. Alternatively an embedded or real time operating system may be used in situations where the client device is an embedded computer system such as a personal digital assistant PDA handset or a cellular telephone handset. The client device may also include a local display interface that allows the OS and the application programs to display text and graphics to the user a local audio interface which may include for example speakers and a local user input interface which may include a keyboard an alphanumeric keypad a mouse or other cursor control and pointing device and or a combination touch sensitive display surface.

To communicate with another node in the network the client device may implement at least one set of transport and network layers of a network communications protocol. These may be part of a TCP IP stack also referred to as an Internet protocol suite. There may also be a second set of transport and network layers available that implement a different network communications protocol suite. Each set of network and transport layers is on top of a network access layer . The network access layer may be viewed as split into a data link layer on top of a physical layer. Examples of network access layer protocols are Ethernet Wi Fi Bluetooth General Packet Radio Services GPRS and UMTS.

In accordance with an embodiment of the invention the client device also stores a software component referred to here as a daemon server DS which manages data network communications for background tasks as described below in connection with .

Network activity idle time may be detected by measuring Internet data traffic over a recently occurring time interval or duration and then immediately comparing the measured traffic to a threshold traffic rate. In certain embodiments the time interval may be predefined while in others it may be dynamically generated over time. In one embodiment if the measured traffic is less than a given number of bytes per second on average over the given time interval then network activity idle time has been reached.

In one embodiment the following process may be used to determine network activity idle time. First the client device makes a record of its current network throughput. It then starts a timer. If network activity e.g. a threshold number of bytes or packets in the upstream or downstream direction within a given time interval occurs before the timer expires then the timer is reset. Otherwise if the timer expires and the threshold number has not been exceeded network activity idle time has been detected. At that point one or more applications running in the client device can be signaled that now is an opportune time for them to perform their background tasks over the network.

When the network activity has sufficiently slowed down and the idle time has thus been reached block an application program running in the client device is signaled to execute its background task over the network block . The application can have both background and foreground tasks that access the network. For example an email program has a foreground task that allows the user to create and then send new messages. While in background the email program may need to periodically check a remote email server for new messages addressed to the user. In accordance with an embodiment of the invention performing this checking for new email messages or more generally executing a background task over the network in response to receiving the signal of network activity idle time helps make more efficient use of the network capability thereby improving the user s experience with networking functions on the client device.

Turning now to a flow diagram of another computer implemented method for background task execution is shown. In this method in addition to monitoring network activity to detect network activity idle time blocks the method performs a decision function that takes input from additional criteria. Examples of such additional criteria are determining the type of network connection block determining the status or type of task or application that the user is performing or is about to perform block and monitoring other activity of the client device block .

Determining the type of network connection may involve for example making a call to the BSD Unix function ioctl. Other known techniques for gathering information on the type of network connection or network interface being used in the client device are possible.

An example of block would be whether the task or application is of the kind that is likely to generate Internet use. For example the user may have spent the last few minutes interacting with a digital photography application that typically does not involve much Internet access. Continued monitoring of the user s activity on such an application may reveal that predefined non network activity has been detected block . This determination together with having detected network activity idle time block could result in the decision function indicating that this is an opportune time to execute background tasks over the network block . For example accessing local ages stored in the client device may not require network access indicating an opportune time to perform background tasks over the network.

As another example of blocks a telephone keypad in the client device may be monitored to detect whether the user is pushing buttons to dial a telephone number. That finding could be used by the decision function to suggest that it is not an opportune time for background task execution over the network if doing so would consume bandwidth needed for the telephone call. The duration of time spent on a particular task may also be used to influence the decision function e.g. once the user has spent a predetermined period of time with a word processor application in foreground this may suggest an opportune time for a background task to access the network . As another example determining that a Web browser running in the client device has changed its status from foreground to background may be used to lean in favor of signaling that it is time to execute a background task.

Turning now to a block diagram of a daemon server DS interacting with applications in the client device is shown. An application program running in the client device may be hooked up with an OS running in the client device. For example the application may choose to register with a call back mechanism of a software component in the client device in this example that of the DS . In this example application is a mail client while application is a widget e.g. a weather checker client which can be present on the dashboard of an OS . The DS maintains a registered list of such applications. On the basis of its respective registration each application is notified by the DS when the DS has determined that it is an opportune time to execute a background task over the data network. As there may be several applications that have registered with the DS to execute their background tasks the DS may maintain a queue of registered applications or tasks a background task queue . The DS may thus notify the registered applications in for example round robin or other order. Note that the DS may be integrated with or part of an operating system program in the client device that is they may have been developed and or marketed by the same entity.

From the standpoint of the DS a request may be received from an application program or in the client device to register with a call back mechanism. The DS on the basis of the registration then notifies the registered application when network activity idle time has been detected. The registered application may then interpret this notification to mean that now is an opportune time to execute its background task over the network. In one embodiment the application may in response to the notification perform its background task without further assistance from the DS . In another embodiment the application may pass its background task to the DS for execution.

The interaction between the DS and the individual applications may be further involved as follows. An application program may in response to being notified by the DS inform the DS that it has no background task to execute at this time. This information may be used by the DS to further inform the decision to signal another application that it is an opportune time to execute a background task. For example in certain embodiments if most of the clients in the register list inform the DS that they have a background task to be executed immediately then the DS may use that information to decide that network activity is on the rise such that a measurement of network activity and further notifications to its clients should be delayed for the time being.

In a further embodiment an application program may specify a particular network transport physical layer NTPL when registering with the call back mechanism. This allows a client to specify which of a number of different NTPLs in the client device are to be used for executing its background tasks. For instance a user might want her cellular telephone voicemail client to be checked only using a GPRS connection. The DS would then notify that client only when the GPRS network access layer exhibits idle time.

In yet another embodiment a client of the DS may specify e.g. when registering with the call back mechanism a set time in the future when it is to be notified by the DS . This may involve setting a future date or a fixed recurring time e.g. everyday . Alternatively the client may specify that it be notified upon expiration of a duration e.g. in 10 minutes. However given that it is not clear when a network interface will become idle clients of the DS should accept this lack of clarity. Thus instead of being notified at the 10 minute mark the client may need to tolerate being notified a little earlier or a little later. This should not be a problem given that most of the background tasks are generally speaking low priority items relative to foreground tasks. As another alternative the DS may be instructed to check for network idle time and notify members in its list each time a network location change occurs in the client device.

In some cases the application can be allowed to force its background task to be executed over the data network regardless of whether it has been notified by the DS . This may be for example in response to not having been notified by the DS upon expiration of a timer.

In accordance with another embodiment of the invention the DS notifies the applications which may be registered with it that network activity idle time has been detected in response to an indication that the client device will soon be entering a lower power consumption mode e.g. a sleep mode . For example the OS may signal the DS that the client device will be put to sleep in five minutes the DS may in response reevaluate the decision in block of namely whether it has detected network activity idle time prior to signaling one or more applications that are listed in its background task queue that their background tasks should now be executed over the network.

In another embodiment the operating system and instruct the DS that the user is currently interacting with the client device e.g. the use ay be entering data through a keypad or moving a cursor on a display . The DS may then respond by delaying the sending of any notifications to the clients listed in its background task queue.

An application programming interface API may be provided by the author of the DS software component that allows the interaction between the DS and the application programs depicted in . In addition the DS needs to recognize or otherwise obtain knowledge of network activity as mentioned above. One way to do so is to provide an API in an interface to a call stack within an operating system which allows any client and in particular the DS acting as a client to ask for current usage statistics on a given network connection. For instance a function named get Statistics may be defined that returns the number of upstream bytes and packets and the number of downstream bytes and packets that have been transferred through a given data connection over a certain time interval. In implementations that use a BSD Unix operating system in the client device a call to the BSD library function get address or get interface addresses can be used by the DS to evaluate the numbers regarding bytes and or packets being transferred through a particular network interface of the client device.

The DS may also need to determine which process or task is in the foreground. This can be done using a mechanism such as that provided by the OS X operating system of Apple Computer Inc. With OS X the foreground process can be determined by using the GetFrontProcess function to obtain the process serial number of the front process. The function provides at its output the process serial number of the process which is running in the foreground. This function may be used to determine if a particular process or some other process is in the foreground.

The forgoing description has used specific embodiments of the invention. It will be apparent however that variations and modifications may be made to the above in order to obtain some or all of the advantages mentioned. It is intended that the appended claims cover all such variations and modifications as they would fall within the true spirit and scope of the invention.

