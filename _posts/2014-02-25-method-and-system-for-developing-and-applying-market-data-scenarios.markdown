---

title: Method and system for developing and applying market data scenarios
abstract: A method for developing and applying market data scenarios may include receiving market data by a record and replay daemon executing on a computer system; storing the received market data in a storage device; replaying the stored market data; changing the stored market data with respect to at least one asset by applying in an automated manner a contrived market activity scenario selected from a plurality of different scenarios stored on the computer system, whereby performance of at least one specific asset is changed to a contrived performance to simulate market activity desired by a user to create a contrived market activity scenario; and transmitting the contrived market activity scenario to a client application, which is able to process the contrived market activity scenario as if it were market data transmitted directly from the market data distribution platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08781935&OS=08781935&RS=08781935
owner: CodeStreet, LLC
number: 08781935
owner_city: New York
owner_country: US
publication_date: 20140225
---
The disclosure relates to methods and systems for working with real time streaming data and more particularly to methods and systems for manipulating real time streaming market data to create artificial market data scenarios.

There is an increasing need to process real time market data electronically for multiple purposes such as for example determining prices of securities placing orders for the purchase or sale of securities automatically and for measuring risk within a portfolio of securities. Typically such software applications receive market data from a commercially available market data service and produce a variety of outputs based on the incoming market data scenario. The purposes of this market data processing software can be wide ranging and the software potentially can react to a wide range of market data scenarios such as a change in a treasury bill yield curve or a change in a relationship between the prices of two securities.

A problem inherent with the development of such market data processing software applications is that it is difficult to verify in advance of actual use of the software application that the application will react appropriately in response to a detected market condition. Currently the only way to test the performance of such market data processing software is to wait for the desired market condition to occur and then observe the behavior of the software in response to it.

The disclosed method and system enable the automated build and test of market data processing software applications by providing precise market data scenarios that may be applied to the market data processing software applications as a test with an expected precise result that can be monitored for pass or failure. By providing automated market data scenarios to securities trading applications testing of the accuracy and reliability of such market data processing applications may be simplified.

In one embodiment a method for developing and applying market data scenarios may include providing a computer system receiving by a record and replay daemon executing on the computer system market data from a market data distribution platform storing the received market data in a storage device operating on the computer system replaying the stored market data the record and replay daemon changing the stored market data by the record and replay daemon with respect to at least one specific asset included in the market data by applying in an automated manner a contrived market activity scenario not reflective of actual market activity to the stored market data with respect to the at least one specific asset including entering at least one parameter directed to the at least one specific asset whereby performance of the at least one specific asset is changed from performance of the at least one specific asset in the stored received market data to a contrived performance of the at least one specific asset the contrived market activity scenario being selected from a plurality of different contrived market activity scenarios stored on the computer system whereby at least one value of the at least one stored specific asset is changed to simulate market activity desired by a user to create contrived market data with respect to the at least one specific asset and transmitting by the record and replay daemon the contrived market data with respect to the at least one specific asset to a client application whereby the client application is able to process the contrived market data with respect to the at least one specific asset as if it were market data transmitted directly from a market data distribution platform.

In another embodiment a system for developing and applying market data scenarios may include a computer system a record and replay daemon executing on the computer system and adapted to receive market data from a market data distribution platform a storage device executing on the computer system and adapted to store the market data received by the record and replay daemon the record and replay daemon adapted to replay the market data stored in the storage device the record and replay daemon adapted to change the market data stored in the storage device with respect to at least one specific asset included in the market data by applying in an automated manner a contrived market activity scenario not reflective of actual market activity to the stored market data with respect to the at least one specific asset including entering at least one parameter directed to the at least one specific asset whereby performance of the at least one specific asset is changed from performance of the at least one specific asset in the stored received market data to a contrived performance of the at least one specific asset the contrived market activity scenario being selected from a plurality of different contrived market activity scenarios stored on the computer system whereby at least one value of the at least one stored specific asset is changed to simulate market activity desired by a user of the computer system to create contrived market data with respect to the at least one specific asset and the record and replay daemon may be adapted to transmit the contrived market data with respect to the at least one specific asset to a client application whereby the client application is able to process the contrived market data with respect to the at least one specific asset as if it were market data transmitted directly from the market data distribution platform.

Other objects and advantages of the disclosed method and system for applying market data scenarios will be apparent from the following description the accompanying drawings and the appended claims.

As shown in in one embodiment the market data simulator generally designated may provide an environment for building testing evaluating demonstrating and analyzing software systems that consume real time market data. The simulator may receive a stream of market data in real time from a market data system preferably a commercially available market data service over a network such as the Internet. The simulator may modify or change the market data received from the market data system and may transmit the changed data to a client application under test over networks or .

The market data simulator may include a record and replay daemon a data store a client application interface that may take the form of a proxy server and a user interface module that may take the form of a command line interface and or a graphical user interface . The command line interface and graphical user interface may be connected to pass command messages to the record and replay daemon either to record or replay data received from the market data system . The record and replay daemon may in turn respond with status messages to the command line interface or graphical user interface . The exchange of data between the graphical user interface and command line interface and the record and replay daemon may utilize messaging protocols such as the TIBCO Rendezvous messaging protocol available from TIBCO Software Inc. . However other messaging protocols may be used as well.

When either the command line interface or graphical user interface instructs the record and replay daemon to record data the daemon may begin to record the specified data from the market data system received over network . This data may be transferred to and stored in non volatile storage which in an embodiment may include data store . Preferably data store is a hierarchical directory of flat files with binary encoding that are linked together as a chain of files. These files may be stored within directories which are in turn stored within directories allowing for essentially an unlimited amount of data to be recorded the only limit being the physical data storage capabilities of data store .

Once data is stored within data store it may be manipulated by the market data simulator to form arbitrary market data scenarios. This may be accomplished by passing the data from the data store through the record and replay daemon to the user interface which in an embodiment may include graphical user interface . The graphical user interface may transform the data appropriately based upon the request of a user of the simulator and then send the manipulated data back to the record and replay daemon for storage in the data store . This contrived scenario of manipulated or changed data may be replayed on demand to the application under test .

With the configuration shown in the command line interface and graphical user interface may be developed as Java applications. The record and replay daemon may be implemented on a C server.

The market data simulator may provide data from the record and replay daemon to the application under test through the client application interface which in an embodiment may include either or both of two paths depending on the type of distribution system being emulated by the simulator during playback. For example if it is desired to use the simulator to simulate a multicast or broadband based distribution system then the client application interface may employ the record and replay daemon such that data may flow directly from the record and replay daemon over network to application under test . Alternately if it is desired to use the simulator to simulate a point to point distribution platform then the client application interface may employ proxy server such that altered market data may flow from the record and replay daemon through the replay proxy server into the application under test over network . It should be noted that it is within the scope of the disclosure to provide the application under test in the same computer system as the simulator thereby eliminating the need for network connections .

The application under test thus may be able to perform as if it were subscribing directly to one of the two distribution modes of the market data system . Accordingly the market data simulator may be entirely transparent to the application under test . While shows two different distribution modes it is within the scope of this disclosure to provide a wide range of distribution components from a variety of vendor distribution platforms without affecting the structure or operation of the simulator .

As shown in the record and replay daemon may include subcomponents such as a record module replay module administration module or interface and storage module or interface . The administration module may receive commands from graphical user interface or command line interface .

The storage module may communicate with data store . The storage module may store data in the data store in the form of binary message blobs. The content of messages is extracted and stored along with associated header and index data. Storage module may receive market data from record module and store the market data in data store . The storage module also may retrieve modified or altered market data from data store .

The record module may record information from the market data system . The record module may be provided a series of symbols to record and the record module may make subscription requests for each symbol. The record module may record both update values which only include fields that have changed as well as initial value records that may be stored periodically in data store so an entire record may be created during a replay. The record module or interface may communicate with a market data distribution platform such as the market data system for recording data from that platform. In a preferred embodiment the record module may be built using a market data subscription API application programming interface used to subscribe to market data from a market data distribution platform. In such an embodiment the Reuters or MDS Triarch and TIB platforms may be supported but other platforms could be supported as needed.

Replay module may communicate with storage module to retrieve data from data store for modification. Alternately replay module may receive real time data from record module that in turn receives the market data from the market data system . The replay module is the interface through which market data is replayed. The replay module mimics the semantics of a market data distribution platform such as market data system so that the client application under test subscribing to the replay module is unable to distinguish between the replay module and the actual market data system .

The replay module may use the publication APIs from market data vendors such as Reuters to simulate the vendor s market data platform. The replay module may replay by way of a command line or GUI command received from command line interface or graphical user interface respectively a previously recorded or created data stream of market data either from data store or directly from record module . By use of the graphical user interface or command line interface a user may specify changes to the replay stream received from data store or record module .

Such changes may include accelerating or decelerating the update rate pausing and inserting custom updates injecting error conditions and manipulating the overall update stream through programmatic means. By use of the graphical user interface a user may specify and apply custom functions that manipulate the replayed data in a variety of ways. For example a user may plot pricing data for a series of bonds and then adjust the yield for this set of bonds by in effect manipulating points along a graph. Manipulating a single point in the graph may then be applied to a range of updates over a period of time. For example recorded data might include a series of on the run United States treasury bonds. By taking a moment in time and reflecting the yield for the latest update for bonds of each maturity along the yield curve a user may drag and drop or specify directly a change in the yield curve. This in turn may lead to a change in all relevant values within relevant updates over a specified interval. Consequently a user may be able to shift the yield curve over a trading day of recorded market data and all associated fields for all symbols should be appropriately adjusted.

Similarly functions may be provided to shift foreign exchange rates equity prices options and a wide variety of financial assets for which market data is provided. Once such market data scenarios have been created the market data scenarios may be stored under a unique name by transmitting the manipulated data from replay module to storage module for storage in data store . Such stored scenarios may then be applied against applications in an automated manner allowing a large regression suite to be developed that can be applied automatically.

When a client application under test attaches to the market data simulator see it may retrieve the appropriate initial value snapshot to initialize itself that reflects the relevant moment in time within the replay stream. The client application under test may do so because the system consistently maintains snapshots of the complete market data record at periodical intervals throughout the recording interval in data store .

The administration module may transmit control messages to start and stop replays and recordings by replay module and record module respectively. Administration requests may be communicated from the graphical user interface or command line interface to the administration module . The administration module also may pass the request to the record module and replay module . As shown in the administration module also may transmit requests to the storage module and such requests may include instructions to be transmitted to the data store to purge itself or perform other necessary maintenance operations. In a preferred embodiment the TIBCO Rendezvous messaging protocol may be used to receive control messages. The administration messages may originate from either the graphical user interface the command line interface or by an administration API not shown .

The graphical user interface may allow control messages to be sent using the TIBCO Rendezvous protocol to the record and replay daemon . The record and replay daemon may run on the same hardware as the graphical user interface or in the alternative it may be run on a physically remote computer system.

The administration module may receive instructions from the graphical user interface or command line interface that it passes to storage module to retrieve previously created altered market data streams modified in a manner that will be described in greater detail below stored in data store that are replayed by replay module for transmission to client application under test . Alternately administration module may alter market data streams from market data system by sending the transformation instructions to proxy server so that real time market data received by proxy server from replay module may be modified by the proxy server and sent to client application under test in real time.

As shown in the graphical user interface may include a main dialog screen panel . The main dialog panel may include a recording area a graphical area that displays a data stream for transformation or replay and a replay area . The main dialog panel also may include a menu of activities that can be performed with the tool. Preferably the activities are wizard driven. The recording area may display the recordings either of data received from market data system or of transformed market data that have been made by the record module see from data received from the market data system and stored in data store .

The graphical area may show data rates of the particular recording highlighted in the recording area . The graphical area may include a DELETE button and a PURGE button . The PURGE button may purge or truncate the oldest portion of a recording shown in window for example the last three hours of an eight hour recording. The DELETE button may delete an entire recording displayed in window . Buttons are provided for starting and stopping replays and recordings respectively. The graphical area also may enable a user to select periods within a recording for replay or modification.

The lower level of the main dialog panel may display replay sessions. For example in row the replay session named test2 was received by way of a point to point P2P service. 164 278 messages out of 164 278 messages were played from Friday Aug. 10 2007 at 5 35 p.m. and 21 seconds to 5 40 p.m. and 17 seconds.

As shown in the graphical user interface may include a transformation screen using Groovy language in which market data altering scenarios are contrived. The transformation screen includes a Choose Example XML window that displays a list of predetermined and stored scenarios for changing market data. For example the Groovy script for the scenario highlighted in window named Groovy add two percent 2 BID ASK is displayed in window . Accordingly the instructions displayed in window may be transmitted by the graphical user interface to the administration module which in turn may transmit the instructions either to replay module or storage module .

In addition a user may create a customized market data modification by typing script instructions in Current Transformation window . Transformation window also may include a Load Transformation button an Add Example XML button an Undo button and a Redo button . Preferably the Load Transformation button adds the selected transformation or change command stored within an external file to window . The external file may be stored in data store elsewhere locally or over a network such as the Internet. The Add Example XML button may allow a selected transformation in window the script of which is displayed in window to be added to window as shown in . The Undo and Redo buttons respectively enable a user to undo a transformation or resend a transformation to the administration module and add and remove the transformation from window .

Transformation screen also may include a row that displays the example input record of data to be modified and a row that contains data in fields that has been modified by the command in window or . As shown in the transformation added from window and displayed in window has modified the ask price of 30.83 to 31.4464 and the bid price of 30.82 to 31.4364. Both rows display the subject IDN RDF.ANY.EBAY.O and the time at which the price was taken 2007 01 05T 16 59 03.765 . The transformation screen also may include buttons for saving the transformed data in data store or canceling the transformation of the selected data shown in window . When saved a user is asked by GUI to give the transformation a specific name for ease of later recall.

As shown in a transformation screen using XML language although it is within the scope of the disclosure to use a variety of different languages is shown. In transformation screen a window may display a listing of subfolders each containing files of predetermined transformations or changes of market data received from market data system and transmitted to the graphical user interface through record module and administration module see . The specific transformation highlighted in window may be set out in window . A user may create a transformation by keying in script in edit window .

A Load Transformation button may be located beneath window and when clicked may allow a user to load a specific transformation stored in an external file in a manner similar to the Load Transformation button of and apply that transformation to window . A user may select a transformation from window the script of which is displayed in window . When clicked the Add Transformation button then adds the transformation highlighted in window to the transformation edit window . Changes to a transformation in the transformation edit window may be removed by clicking the Undo button . Window may display samples of market data received and stored in data store . Window may display the individual segments of the data stream that have been transformed and stored in data store . Save button and Cancel button are used to save or cancel a particular transformation definition. The transformations created or added in screens of respectively are applied to recorded market data using the Run script wizard of menu of main dialog panel .

The main dialog panel in may be used to perform the following functions start a replay of stored market data in data store stop a replay of stored market data fast forward a replay pause a replay inject error conditions i.e. of feed down stale data and other system errors in a replay view recorded data in data store manipulate the recorded data and send the manipulated data interleaved with recorded data to the replay module start a recording by record module stop a recording by the record module and delete a recording stored in data store .

The manipulation of recorded data as mentioned previously may be accomplished by opening screens or to perform a desired manipulation of market data. In addition error conditions may be injected by calling market data to a grid created for example by Excel modifying the data to include the error condition and injecting the modified data into the replay stream. Alternatively the grid may be used to inject script directly into the replay stream.

The command line interface see provides a one for one equivalent function for each command available in the GUI. This command line interface is provided in the form of a shell window that communicates with the record and replay daemon in the same manner as the graphical user interface . As in the case of the graphical user interface the shell sends TIBCO Rendezvous messages to the administration module of the record and replay daemon see .

In an embodiment the proxy server see may provide point to point transmission of data to a client application under test . In an embodiment the proxy server may implement the point to point semantics of market data platform such as the Reuters Market Data System.

Accordingly in various embodiments the disclosed method and system for developing and applying market data scenarios provides the ability to record market data from a market data distribution platform to form a baseline from which to contrive scenarios view and chart recorded data apply functions to recorded data to contrive scenarios speed up or slow down replay of a recorded scenario introduce custom updates into a recorded stream introduce error conditions within a recorded stream pause single step and restart a stream drag and drop a chart of data to form a new scenario automate application of tests allow arbitrary modifications of the data stream via programmatic means store large volumes of recorded data and mimic a market data distribution platform when replaying market data streams into applications.

In one aspect the disclosed method and system simulate the output of a market data platform or service by changing the data content received from a commercially available market data service to incorporate contrived market scenarios. The changed market data then may be transmitted to a client application and the client application may process the changed market data as if it were actual market data transmitted directly from the market data distribution platform. The method provides asset specific transformations of the data so that specific transformations may be employed by a user or a user may create his or her own transformations of data.

In a preferred embodiment the method may include the steps of receiving market data from a market data distribution platform storing the received market data replaying the stored market data and changing the stored market data with respect to at least one specific field included in the market data by applying in an automated manner a market activity scenario to the stored market data. This modification may include entering parameters directed to the specific field whereby the value of the specific field is changed from that in the stored received market data. After having been altered in this fashion the altered market data then may be transmitted to a client application. With this embodiment it is possible to apply specific market scenarios and thereby test trading and other market data consuming applications in off hours when the market being studied is closed.

The aforementioned method may be accomplished by the disclosed system which may include a recording module for receiving a stream of market data over a network from a market data distribution platform a user interface module that enables a user to specify changes to the market data stream to form a stream of altered market data and a client application interface for transmitting the stream of altered market data to a client application whereby the stream of altered market data mimics the market data stream from the market data distribution platform. The client application may process the stream of altered market data as if it were market data from the market data distribution platform. In a preferred embodiment the system may include a data store for storing market data market data altered by the system and specific market data altering scenarios.

While the forms of apparatus and methods herein described constitute preferred embodiments of this invention it is to be understood that the invention is not limited to these precise forms of apparatus and methods and that changes may be made therein without departing from the scope of the invention.

