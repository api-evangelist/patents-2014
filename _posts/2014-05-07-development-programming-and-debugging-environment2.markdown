---

title: Development, programming, and debugging environment
abstract: A method includes receiving hardware description code that generically describes circuitry, and translating the hardware description code into one or more configuration files specific to a programmable system. The method further includes generating program code for a microcontroller of the programmable system based, at least in part, on the hardware description code, and configuring the programmable system to implement the circuitry according to the configuration files and the program code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09575748&OS=09575748&RS=09575748
owner: Cypress Semiconductor Corporation
number: 09575748
owner_city: San Jose
owner_country: US
publication_date: 20140507
---
This patent application is a continuation of U.S. patent application Ser. No. 13 740 022 filed Jan. 11 2013 which is a continuation of U.S. patent application Ser. No. 12 776 175 filed May 7 2010 which claims the benefit of U.S. Provisional Patent Application No. 61 176 272 filed May 7 2009 all of which are incorporated by reference herein.

This disclosure relates generally to electronic systems and more particularly to developing programming and debugging environment for programmable systems.

Microcontroller manufacturers and vendors often supply their customers with development tools that allow programmers to create software for the microcontrollers to execute. Similarly many configurable hardware manufacturers will provide their customers with specialized hardware configuration tools that allow designers the ability to configure their hardware devices.

Some electronic systems include both configurable hardware components and a processing device which can be programmed and configured to work together to implement various functions. When configuring these electronic systems designers often will utilize software tools to program the processing device and utilize the specialized hardware configuration tools to configure the hardware components. In other words the system designers manually manage multiple projects e.g. the use of the multiple development tools with differing development methodologies when attempting to cohesively develop program and debug these electronic systems.

The patent application describes a method including receiving hardware description code that generically describes circuitry and translating the hardware description code into one or more configuration files specific to a programmable system. The method also includes generating program code for a microcontroller of the programmable system based at least in part on the hardware description code and configuring the programmable system to implement the circuitry according to the configuration files and the program code.

A system includes an interface device to receive hardware description code that describes hardware circuitry for a programmable system to implement and to receive an indication to initiate automatic configuration and programming of the programmable system based on the hardware description code. The system further includes a processing system responsive to the indication to automatically generate one or more hardware configuration files and program code based at least in part on the hardware description code and to automatically send the configuration files and the program code to the programmable system wherein the programmable system is configured to implement the hardware circuitry according to the configuration files and the program code.

A Programmable System on Chip PSoC such as that used in the PSoC family of products offered by Cypress Semiconductor Corporation San Jose Calif. or other electronic system can include a microcontroller or other processing device and configurable hardware components such as programmable analog and or digital blocks. A processing system can implement a unified integrated development environment that allows designers to develop applications and program both the configurable hardware components and the microcontroller of the PSoC and or electronic system. Embodiments are shown and described below in greater detail.

The processing system can implement an integrated development environment allowing unified hardware and software development and configuration of the programmable system with hardware configuration files and software programming developed by the integrated development environment . The processing system can include one or more processors to implement the integrated development environment for example by executing instructions stored in a memory system or other computer readable medium.

After hardware configuration files and software programming is developed the processing system can program and or configure the programmable system with the developed hardware configuration and software programming for example through a coupling device . In some embodiments the coupling device can be a wired device such as a Universal Serial Bus USB cable Ethernet cable etc or can represent a wireless link between the processing system and the programmable system .

The processing system can include system interface devices that allow the processing system to communicate with external devices such as the user input device the display device and the programmable system . For example the processing system can include a system interface to communicate with the programmable system over the coupling device . In some embodiments the system interface devices can receive inputs for example through the user input device and present information for example via the display device .

The processing system can develop hardware and software applications for the programmable system in response to user input for example from the user input device . The integrated development environment can include various development tools that allow system designers to describe hardware circuitry for the programmable system to implement and to provide software or firmware code for the microcontroller . In some embodiments the integrated development environment can receive hardware description code that describes this hardware circuitry in an abstracted or generic manner and can convert the generic code into device specific configuration files that are particular to the architecture and or resources of the programmable system . The hardware description code provided by the system designers can include schematic circuit diagrams and or hardware code written according to a hardware description language such as Verilog or VHDL.

The processing system can also generate application programming interfaces based at least in part on the hardware description code. These application programming interfaces when provided to the programmable system can program the microcontroller to communicate with the programmable digital and or analog blocks and configured according to the device specific configuration files.

The processing system can send the device specific configuration files and the application programming interfaces to the programmable system . The programmable system can utilize the configuration files to configure particular hardware components in the programmable digital and or analog blocks and to implement the hardware circuitry described by the hardware description code. The programmable system can utilize the application programming interfaces to program the microcontroller to communicate with the programmable digital and or analog blocks and configured according to the device specific configuration files.

After the programmable system has been programmed with the hardware configuration and software or firmware programming developed with the integrated development environment the processing system can include debug hardware to perform debugging operations on the programmable system . In some embodiments the debug hardware can be located externally from the processing system and can communicate with the processing system via the system interface devices .

The core architecture may also include a CHub core hub including a bridge such as a single level or multi level Advanced High Performance Bus Bridge and optionally a DMA direct memory access controller that is coupled to the microcontroller via bus . The Chub may provide the primary data and control interface between the microcontroller and its peripherals and memory and a programmable core . The DMA controller may be programmed to transfer data between system elements without burdening the CPU core . In various embodiments each of these subcomponents of the microcontroller and CHub may be different with each choice or type of CPU core . The Chub may also be coupled to shared SRAM and an SPC system performance controller . The private SRAM is independent of the shared SRAM that is accessed by the microcontroller through the bridge . The CPU core accesses the private SRAM without going through the bridge thus allowing local register and RAM accesses to occur simultaneously with DMA access to shared SRAM . Although labeled here as SRAM these memory modules may be any suitable type of a wide variety of volatile or non volatile memory or data storage modules in various other embodiments.

In various embodiments the programmable core may include various combinations of subcomponents not shown including but not limited to a digital logic array digital peripherals analog processing channels global routing analog peripherals DMA controller s SRAM and other appropriate types of data storage IO ports and other suitable types of subcomponents. In one embodiment the programmable core includes a GPIO general purpose IO and EMIF extended memory interface block to provide a mechanism to extend the external off chip access of the microcontroller a programmable digital block a programmable analog block and a special functions block each configured to implement one or more of the subcomponent functions. In various embodiments the special functions block may include dedicated non programmable functional blocks and or include one or more interfaces to dedicated functional blocks such as USB a crystal oscillator drive JTAG and the like.

The programmable digital block may include a digital logic array including an array of digital logic blocks and associated routing. In one embodiment the digital block architecture is comprised of UDBs universal digital blocks . For example each UDB may include an ALU together with CPLD functionality or other types of digital programmable logic functions.

In various embodiments one or more UDBs of the programmable digital block may be configured to perform various digital functions including but not limited to one or more of the following functions a basic I2C slave an I2C master a SPI master or slave a multi wire e.g. 3 wire SPI master or slave e.g. MISO MOSI multiplexed on a single pin timers and counters e.g. a pair of 8 bit timers or counters one 16 bit timer or counter one 8 bit capture timer or the like PWMs e.g. a pair of 8 bit PWMs one 16 bit PWM one 8 bit deadband PWM or the like a level sensitive I O interrupt generator a quadrature encoder a UART e.g. half duplex delay lines and any other suitable type of digital function or combination of digital functions which can be implemented in a plurality of UDBs.

In other embodiments additional functions may be implemented using a group of two or more UDBs. Merely for purposes of illustration and not limitation the following functions can be implemented using multiple UDBs an I2C slave that supports hardware address detection and the ability to handle a complete transaction without CPU core e.g. CPU core intervention and to help prevent the force clock stretching on any bit in the data stream an I2C multi master which may include a slave option in a single block an arbitrary length PRS or CRC up to 32 bits SDIO SGPIO a digital correlator e.g. having up to 32 bits with 4 over sampling and supporting a configurable threshold a LINbus interface a delta sigma modulator e.g. for class D audio DAC having a differential output pair an I2S stereo an LCD drive control e.g. UDBs may be used to implement timing control of the LCD drive blocks and provide display RAM addressing full duplex UART e.g. 7 8 or 9 bit with 1 or 2 stop bits and parity and RTS CTS support an IRDA transmit or receive capture timer e.g. 16 bit or the like deadband PWM e.g. 16 bit or the like an SMbus including formatting of SMbus packets with CRC in software a brushless motor drive e.g. to support 6 12 step commutation auto BAUD rate detection and generation e.g. automatically determine BAUD rate for standard rates from 1200 to 115200 BAUD and after detection to generate required clock to generate BAUD rate and any other suitable type of digital function or combination of digital functions which can be implemented in a plurality of UDBs.

The programmable analog block may include analog resources including but not limited to comparators mixers PGAs programmable gain amplifiers TIAs trans impedance amplifiers ADCs analog to digital converters DACs digital to analog converters voltage references current sources sample and hold circuits and any other suitable type of analog resources. The programmable analog block may support various analog functions including but not limited to analog routing LCD drive JO support capacitive sensing voltage measurement motor control current to voltage conversion voltage to frequency conversion differential amplification light measurement inductive position monitoring filtering voice coil driving magnetic card reading acoustic doppler measurement echo ranging modem transmission and receive encoding or any other suitable type of analog function.

The integrated development environment can include a design editor to receive information describing hardware circuitry. This information describing hardware circuitry can be received from various sources and in various formats for example through a user interface . The design editor can include various development tools that present a user or system designer options for inputting circuit designs or descriptions to the integrated development environment . For instance the design editor can receive code written according to a hardware description language such as Verilog or VHDL. The design editor can also provide a graphics based circuit design application such as a Schematic Editor a Symbol Editor a GPIF General Programmable Interface editor etc which allows designers to create schematic diagrams of the hardware circuitry to be implemented by the programmable system . In some embodiments the design editor can access a database to help determine dependency build rules and debug rules for the received descriptions of the hardware circuitry.

The design editor can also receive user generated program code from the user interface . The program code can utilize at least one application programming interface generated by the integrated development environment to communicate with the hardware components in the programmable system . This program code can also include at least one application programming interface to allow the microcontroller in the programmable system when programmed with the code to communicate with hardware components in the programmable system .

The integrated development environment can include a code generator to generate configuration files from the received descriptions of the hardware circuitry. In some embodiments when the received descriptions of the hardware circuitry are in an abstracted or generic format the code generator can access a device specific hardware mapping unit to map the received descriptions of the hardware circuitry to the programmable digital and or analog blocks and of the programmable system . In other words the code generator can determine where and how the programmable system implements the generic circuitry provided by the user or system designer. This level of abstraction can allow users without specific knowledge of the programmable system the ability to program and configure the programmable system to perform various applications through the use of generic circuit descriptions and diagrams. The code generator can generate the configuration files from the device specific version of the hardware circuitry descriptions.

The code generator can also generate application programming interfaces from the received descriptions of the hardware circuitry. The application programming interface when provided to the programmable system can program the microcontroller and allow it to communicate with hardware components of the programmable system .

The integrated development environment can include a compiler to compile the configuration files and the application programming interfaces and link them to the programmable system . Once the configuration files and the application programming interfaces have been compiled and linked the compiler can provide them to a programmable system configuration unit to send them to the programmable system for example via a programmable system interface . The programmable system can configure its programmable digital and or analog blocks and according to the configuration files and program the microcontroller according to the application programming interfaces in order to implement the hardware circuitry described by the user.

The compiler can also provide the configuration files and the application programming interfaces to a debugger such as the debug hardware . The debugger can perform debugging operations on the programmable system as configured with the configuration files and the application programming interfaces. For instance the debugger can perform step over step into and step out operations which allows users the ability to perform incremental evaluations that step through programming code.

The integrated development environment in a block can netlist the hardware description language code the state diagrams the hardware schematics and or the flowcharts into a single representation of the hardware circuitry to be implemented by the programmable system . This netlisting of the hardware description language code the state diagrams the hardware schematics and or the flowcharts can combine and integrate the circuitry descriptions which have various formats into the single representation of the hardware circuitry.

The integrated development environment in a block can perform high level synthesis on the netlisted hardware description code. The high level synthesis can break down or reduce the netlisted hardware description code into lower level primitives logic equations and or flip flops. This reduction of the netlisted hardware description code allows the integrated development environment in a block to map the reduced hardware description code to the programmable system through low level synthesis. The integrated development environment can determine which hardware resources or components within the program system such as the programmable digital blocks and the programmable analog blocks can implement the circuitry described by the reduced hardware description code according to a mapping.

The integrated development environment in blocks and can perform placement and routing for both the programmable digital blocks and the programmable analog blocks of the programmable system . The placement and routing can determine where the hardware circuitry is to be placed in the programmable digital blocks and the programmable analog blocks . The placement and routing can also allocate or set signal routing for the hardware circuitry placed in the programmable digital blocks and the programmable analog blocks .

The integrated development environment in a block can generate perform hardware configuration files and application programming interfaces. The hardware configuration files can be based on the mapping of the reduced hardware description code and the place and routing analysis performed in blocks . The application programming interfaces can be based on the mapping of the reduced hardware description code and the place and routing performed in blocks and can be based on software programming code received from at least one system interface. The software programming code can include at least one application programming interface to allow the microcontroller in the programmable system when programmed with the software programming code to communicate with hardware components in the programmable system .

The integrated development environment in a block can compile the hardware configuration files and the application programming interfaces and link them to the programmable system . The integrated development environment in a block can send the compiled and linked hardware configuration files and the application programming interfaces to the programmable system . The programmable system can be configured to implement the hardware circuitry described in the hardware description language code the state diagrams the hardware schematics and or the flowcharts responsive to the hardware configuration files and the application programming interfaces. The integrated development environment in a block can execute a debugging application to debug the programmable system as configured with the hardware configuration files and the application programming interfaces.

In some embodiments the integrated development environment can receive an indication to initiate automatic configuration and programming of the programmable system after receiving the input information and . The integrated development environment can automatically perform operations associated with the blocks in response to receiving the indication. In some embodiments the indication can be received from a user via at least one of the system interfaces. Although shows blocks being performed in a particular processing order in some embodiments the integrated development environment can perform the operations in different orders.

In a next block the integrated development environment can receive an indication to initiate automatic configuration and programming of the programmable system. In some embodiments the indication can be received from a user via at least one of the system interfaces. The integrated development environment can automatically perform the blocks in response to receiving the indication.

In block the integrated development environment can translate the hardware description code into one or more configuration files specific to a programmable system . The translation of the hardware description code into the configuration files can include multiple operations. For example the hardware description code can be netlisted into a single representation of the circuitry. The netlisted code can be reduced into lower level primitives logic expressions and flip flops. The reduced code can be mapped to the programmable device to determine how the programmable system can implement the circuitry. The mapped code can be analyzed to determine placement and routing of the circuitry implemented by the programmable system . The integrated development environment can translate the mapped code that has undergone placement and routing analysis into one or more configuration files that are specific to the programmable system .

In block the integrated development environment can generate program code for a microcontroller of the programmable system based at least in part on the hardware description code. In some embodiments the program code can be application programming interfaces for the microcontroller to communicate with the hardware components of the programmable system .

In block the integrated development environment can configure the programmable system to implement the circuitry according to the configuration files and the program code. The integrated development environment can provide the configuration files and the program code to the programmable system . The configuration files and the program code can prompt the programmable system to implement the circuitry described by the hardware description code.

In block the integrated development environment can debug the programmable system as programmed by the configuration files and the program code.

One of skill in the art will recognize that the concepts taught herein can be tailored to a particular application in many other ways. In particular those skilled in the art will recognize that the illustrated embodiments are but one of many alternative implementations that will become apparent upon reading this disclosure.

The preceding embodiments are examples. Although the specification may refer to an one another or some embodiment s in several locations this does not necessarily mean that each such reference is to the same embodiment s or that the feature only applies to a single embodiment.

