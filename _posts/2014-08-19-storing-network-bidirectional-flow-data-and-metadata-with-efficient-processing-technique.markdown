---

title: Storing network bidirectional flow data and metadata with efficient processing technique
abstract: A processing technique provides an improved indexing arrangement that enables storage, filtering and querying of metadata used to retrieve packets captured from a network and persistently stored in a data repository. A packet capture engine records the packets in packet capture (PCAP) formats from a network link at a substantially high packet transfer rate to persistent storage of the data repository in a sustained manner. Efficient filtering and querying of the metadata to retrieve the stored packets may be achieved, in part, by organizing the metadata as one or more metadata repositories. The processing technique uses the Berkeley Packet Filter (BPF) language as an interface of a BPF engine to search or index the stored packets in response to queries. The BPF engine processes BPF expressions used as precursors to the indexing arrangement to enable access to the repositories when searching and locating stored packets matching the expressions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09426071&OS=09426071&RS=09426071
owner: FireEye, Inc.
number: 09426071
owner_city: Milpitas
owner_country: US
publication_date: 20140819
---
The present application claims priority from Provisional Patent Application No. 61 868 767 entitled System Device and Method for Storing Network Flow Data and Metadata with an Efficient Processing Mechanism filed on Aug. 22 2013 the contents of which are incorporated herein by reference.

The present disclosure relates to the storage and retrieval of computer network packet traffic using summary information commonly referred to as network flow information. In this disclosure bidirectional flow i.e. commonly referred to as connection information is represented in a single flow record similar to RFC 5103.

A network flow is a collection e.g. sequence of packets transmitted over a computer network from a port on a source computer to a port on a destination computer utilizing a protocol. Conceptually network flow information is a summary of a communication between two computer endpoints. Many manufacturers include network monitoring and flow information export capabilities in their network switches and routers resulting in many accepted representation formats. Common to all formats are data fields identifying the endpoints of the communication and summary information for the packets included in the flow.

Exported network flow records may be collected and stored by a network flow collector program. Techniques for record storage are dependent on the requirements of the collector and the anticipated use of the data. Each collector is associated with a search and retrieval mechanism designed to take advantage of its storage facilities.

The Berkeley Packet Filter BPF mechanism was developed at Lawrence Berkeley Laboratory and is a known filtering mechanism used for processing packets. The mechanism includes a language and virtual machine used for creating simple programs that filter packets. The instruction set includes primitives for fetching comparing and performing arithmetic operations on data from the packet. A packet is filtered i.e. accepted or rejected based on the results of the program.

One of the first implementations to incorporate BPF is tcpdump a tool widely used for monitoring computer communication networks. Like BPF tcpdump was developed at Lawrence Berkeley Laboratory. The command line program implements a low level application programming interface API for sniffing packets from a network interface and for performing file I O operations.

The software source code for the packet capture interface and BPF is available as a standalone library commonly referred to as libpcap. The library is available to the public under the Berkeley System Distribution BSD license. Because of its portability flexibility and simple implementation libpcap is considered the de facto mechanism for packet capture and filtering.

Embodiments herein are directed to a processing technique configured to provide an improved indexing arrangement that enables efficient storage filtering and querying of metadata used to retrieve packets intercepted captured from a network and persistently stored in a data repository. A packet capture engine includes an interface configured to record the packets in packet capture PCAP formats from a network link at a substantially high packet transfer rate and write those packets to persistent storage of the data repository in a sustained manner. Efficient filtering and querying of the metadata to retrieve the stored packets may be achieved in part by organizing the metadata as one or more metadata repositories each having a size that is smaller than the size of the data repository storing the packets. The processing technique uses the Berkeley Packet Filter BPF language as an interface of a BPF engine to search or index the stored packets in response to queries. To that end the BPF engine processes BPF expressions used as precursors to the indexing arrangement to enable access to the repositories when searching and locating stored packets matching the expressions.

Illustratively the processing technique extends the capabilities of BPF and PCAP by i encapsulating network flow metadata within PCAP metadata records that are derived from the packets captured and stored in the data repository and ii using the BPF engine for filtering operations on the PCAP metadata records. In an embodiment the packet capture engine includes a decoder that decodes e.g. extracts network flow information network flow of each captured packet and applies a hash function to the network flow to calculate a hash value. The hash value along with a reference locating the associated captured packet stored in the data repository are stored in a metadata repository of the indexing arrangement. A flow metadata payload is appended to the PCAP metadata record wherein the payload includes BPF flow metadata embodied as fields and pointers to fields of the network flow of the captured packet as encapsulated in the PCAP record . The PCAP record and the hash value associated with the network flow of the PCAP record are stored in a different metadata repository of the indexing arrangement. In response to one or more BPF queries the BPF engine may filter the PCAP records using the BPF flow metadata and utilize the hash values in connection with the indexing arrangement to search and retrieve packets that match the queries.

Advantageously the processing technique described herein provides among other things a storage format and an improvement to a known filtering mechanism which extends a common query language for network flow and network packets. That is the technique defines a storage format for network flow records and improves upon the BPF mechanism for processing recorded records. In addition the extended BPF and PCAP capabilities provide for improved filtering of packets on a computer communications network and further provide for querying large data sets of archived packets and metadata associated with computer communications. Moreover the indexing arrangement of the technique enables persistent storage of captured packet traffic at substantially high transfer rates e.g. approximately 10 Gb sec full duplex sustained while enabling concurrent filtering and retrieval of previously stored packet traffic on the fly to reduce search and retrieval time.

In an embodiment the endpoints may illustratively include e.g. client server desktop computers laptop notebook computers process controllers medical devices data acquisition devices mobile devices such as smartphones and tablet computers and or any other intelligent electronic device having network connectivity that may be configured to implement a virtualization system. The nodes illustratively communicate by exchanging packets or messages i.e. network traffic according to a predefined set of protocols such as the Transmission Control Protocol Internet Protocol TCP IP however it should be noted that other protocols such as the HyperText Transfer Protocol HTTP may be advantageously used with the embodiments herein. In the case of private network the intermediate node may include a firewall or other network device configured to limit or block certain network traffic to protect the endpoints from unauthorized users.

An operating system portions of which are typically resident in memory and executed by the CPU functionally organizes the node by inter alia invoking operations in support of the software program code and application programs executing on the node. A suitable operating system may include the Linux operating system although the Unix operating system and Windows series of operating systems among others may also be used. The operating system illustratively implements a high level module such as a file system to logically organize the information as a hierarchical structure of named storage containers such as directories files and or volumes that hold the files. A suitable file system may include the XFS file system although other file systems capable of high I O operations per second IOPs and throughput such as EXT4 may be used. Illustratively the software program code may be implemented as user mode processes of the operating system . As used herein a process e.g. a user mode process is an instance of software program code e.g. an application program executing in the operating system that may be separated decomposed into a plurality of threads wherein each thread is a sequence of execution within the process.

It will be apparent to those skilled in the art that other types of processing elements and memory including various computer readable media may be used to store and execute program instructions pertaining to the embodiments described herein. Also while the embodiments herein are described in terms of software program code and application programs stored in memory alternative embodiments also include the code programs being embodied as modules consisting of hardware software firmware or combinations thereof.

Embodiments herein are directed to a processing technique configured to provide an improved indexing arrangement that enables efficient storage filtering and querying of metadata used to retrieve packets intercepted captured from a network and persistently stored in a data repository. The packet capture engine includes an interface configured to record the packets in packet capture PCAP formats from a network link e.g. of network at a substantially high packet transfer rate e.g. approximately full duplex 10 Gigabits Gb per second and write those packets through memory to persistent storage of the data repository e.g. secondary storage in a sustained manner. In other words the packet capture engine is configured to capture the packets at any packet transmission rate provided by the network link for a duration that yields an amount of captured packets that exceeds the memory capacity of the node such that the packets are written through to the persistent secondary storage without dropping the packets i.e. without packet loss due to write through not keeping up with the packet transmission rate and while maintaining capture of the packets up to line rate. Once persistently stored the packets may be retrieved using the PCAP interface. Efficient filtering and querying of the metadata to retrieve the stored packets may be achieved in part by organizing the metadata as one or more metadata repositories e.g. files each having a size metadata footprint that is smaller than the size of the data repository storing the packets. The processing technique uses the Berkeley Packet Filter BPF language as an interface of BPF engine to search or index the stored packets in response to queries i.e. BPF queries . To that end the BPF engine processes BPF expressions used as precursors i.e. inputs to the indexing arrangement to enable access to the repositories when searching and locating stored packets matching the expressions.

Illustratively the processing technique extends the capabilities of BPF and PCAP by i encapsulating network flow metadata within PCAP metadata records that are derived from the packets captured and stored on the data repository and ii using the BPF engine for filtering operations on the PCAP metadata records. In an embodiment the packet capture engine includes a decoder that decodes e.g. extracts network flow information network flow of each captured packet e.g. IP TCP and protocol fields and applies a hash function to the network flow to calculate a hash value. The hash value along with a reference locating the associated captured packet stored in the data repository are stored in a first metadata repository indexing metadata repository of the indexing arrangement. A flow metadata payload is appended to the PCAP record wherein the metadata payload includes BPF flow metadata embodied as fields and as pointers to fields of the network flow of the captured packet as encapsulated in the PCAP record . The PCAP record and the hash value associated with the network flow of the PCAP record are stored in a second metadata repository flow metadata repository of the indexing arrangement. In response to one or more BPF queries the BPF engine may filter the PCAP records using the BPF flow metadata and utilize the hash values in connection with the indexing arrangement to search and retrieve packets that match the queries.

The packet buffer is then passed to a process which processes each packet s headers to form a bi directional flow record i.e. a PCAP metadata record PCAP record which is then copied to the flow metadata repository e.g. a BPF record file on a second volume of the disks. According to the processing technique two different volumes are illustratively used to store the PCAP flow records and the captured packets so as to enable concurrent searching queries and retrieval of the PCAP records while copying writing packets . That is the PCAP file may be written to the first volume data repository while the BPF record file may be written to the second volume flow metadata repository . Such concurrent parallel processing enables searching and retrieving of the indexes including the hash values within a small file and copying of the packets to a large file at substantially the same time e.g. substantial overlap of processing to realize the approximate 10 Gb sec full duplex rate i.e. 20 Gb per second of the network link. Note that every bi directional flow metadata record is a fixed length so that search and retrieval operations may be controlled i.e. efficient striding .

Lastly field contains the flow metadata that describes additional details about the flow represented by the record . An aspect of the processing technique involves a definition of a PCAP file type for metadata that is compatible with the PCAP file format detailed in PCAP manpage available at www.tcpdump.org pcap.html and the BPF query interface. Metadata fields are accessible using the BPF language expressions and predefined BPF macros may be employed to simplify common operations on the flow metadata. Encapsulation of the flow metadata facilitates implementation of mechanisms that accelerate operations on large data sets of packets such as the indexing arrangement described further herein.

In an embodiment the process may also create indexes based on the hashes of the network flows and may obtain i.e. cross reference locations including offsets of the packets in the PCAP file on the first volume i.e. data repository as well as paths to the PCAP file . That is the indexes may include a path to the PCAP file and an offset within the file to locate the packet . Illustratively the process may index each packet by tagging it with the calculated hash a path and an offset. The process may copy load the information i.e. hash value along with path and offset as an entry into a different metadata repository index metadata repository e.g. an index file which contains other entries of indexes that point to reference captured packets including original payloads stored in the PCAP file as well as other metadata attributes such as packet direction. In an embodiment there may be a plurality of PCAP files wherein each file has an associated index file . Each PCAP file may be identified by a path formed from a stream and a time stamp relating to the time of capture e.g. in nanoseconds of a packet . Illustratively a naming convention for each PCAP packet file may be based on the time stamp e.g. a time group and the stream which is illustratively a channel used to write packets to the PCAP packet file . For example the processing technique may include four streams wherein each stream is represented by a directory e.g. streams and wherein each stream is mapped to a CPU e.g. a processor core to enable concurrent processing i.e. parallel writing and retrieval from the first volume i.e. data repository . The stream and time stamp thus cooperate to provide a full path name to the PCAP file containing the desired packet .

The processing technique also includes a query and retrieval stage having BPF engine configured to use the generated indexes to access one or more stored packets . Assume a user requests retrieval of all IP traffic originated from a particular IP source address connecting to particular port e.g. port 80 for HTTP traffic. For example the user may issue a BPF query having the following BPF expression host 10.0.0.1 and port 80 . The user may submit the query to the BPF engine which compiles the BPF expression to examine the PCAP records of the BPF record file including the flow metadata. is a tabular representation of exemplary flow metadata included in the PCAP record . Illustratively the flow metadata may include names and sizes of fields that may be included in field of . Exemplary flow metadata may be found in RFC 5102 available from the Internet Engineering Task Force IETF . As noted the flow metadata is located at a defined location within the PCAP record and each field of the record is of a defined size accordingly the location of each field within the PCAP record is known. Therefore the location and size of each flow metadata field may be expressed relative to the beginning of the Ethernet header.

According to the processing technique BPF syntax detailed in PCAP filter manpage available at www.tcpdump.org manpages pcap filter.7.html may be extended to include abbreviations for each flow metadata field stored in the PCAP record . That is the BPF syntax may be extended to include the flow metadata fields as keywords. Illustratively the names are abbreviations that may be used in the extended BPF syntax. Each abbreviation name is equivalent to the BPF proto offset ether offset name size name where offset name is the offset of field name relative to the beginning of the Ethernet header and size name is the number of bytes of data stored for field name as illustrated at . The technique also extends the BPF capabilities to perform relational operations on flow metadata types larger than four bytes e.g. see items in . Expressions of the form name relop expr may be translated into equivalent statements utilizing BPF binary operators as well as concatenation and alternation conjunctions and parentheses.

In order to remain backwards compatible with existing BPF syntax and key words a mapping between the extended BPF syntax and the BPF compiler may be performed. Such mapping illustratively involves replacement of the custom flow metadata keywords in an extended BPF expression or statement with a standard BPF compatible statement. For example to match all network traffic on port 80 that also had a calculated round trip time of greater than 300 seconds an enhanced BPF query of 

In an embodiment the BPF engine is configured to use the flow metadata when performing filtering operations against the headers in fields of the PCAP records . An aspect of the technique is the use of the BPF expressions to perform pre searching so other flow metadata payloads can include other BPF expressions depending on the BPF queries e.g. packets to be found. The flow metadata illustratively provides pointers i.e. flow metadata offsets within each record to enable searching to match the BPF expressions of the BPF queries. That is a BPF query may be applied to each PCAP record starting at the beginning of the record and extending through the field . If a match is not found the BPF engine continues processing other PCAP records of other captured packets. In response to a match the BPF engine may cooperate with a process to retrieve a calculated hash value relating to the flow from the BPF record file and may scan the index file to find entries that match the hash value. For each entry that matches the hash value a path and offset that reference a location of the packet in the PCAP file may be used to access retrieve the packet . According to the indexing arrangement this results in multiple e.g. two levels of indirection i from the BPF record file to the index file and ii from the index file to the PCAP file . Notably the multiple levels of indirection enable concurrent searching retrieval and copying of PCAP records index file entries and packets stored in their respective files to accommodate the sustained packet transfer rate e.g. approximately 20 Gb sec of the network link.

Illustratively upon finding all PCAP records i.e. in extended PCAP format that match the BPF expression and enhanced BPF query the hash values of the flows which were previously generated corresponding to the matching flow records are extracted and used to search entries of the index file . For every entry of the index file that matches a hash value the path to a PCAP file and an offset into the file are used to access the corresponding matching packet . As noted the path illustratively includes a stream number i.e. a directory and a time stamp e.g. in nanoseconds . In an embodiment the process uses the paths and offsets i.e. indexes of matching entries to precisely access i.e. retrieve matching packets from the appropriate PCAP packet file s and passes the matching packets to BPF engine . All matching packets are then collected e.g. in time stamp order and processed to ensure matching of the BPF expression. Note that hash collisions may yield packets not matching the BPF expression. In an embodiment for each match on a hash value a full verification is performed on the actual headers of the packets to ensure that the IP addresses ports and protocol type match the BPF expression. If so the packet may be marked matched . In addition when storing packets in the PCAP file the order of the packets is not changed. That is the packets may be ordered in time of capture using the time stamp . Notably the packets are not rearranged in sequential order because of the substantial time consumed to perform sequential ordering.

An alternative approach to the processing technique described herein may be to use a conventional relational database and interface such as Oracle or MySQL. However such an interface may not be fast enough to maintain the high insertion rates e.g. 8 30 M records second needed to accommodate the sustained bandwidth e.g. approximately 20 Gb sec of a full duplex 10 Gb network link. Yet another alternative approach may be to use a different query language interface e.g. JavaScript Object Notation JSON that is simple to use and understand. The results of searches of fields populated with values by the query language interface may then translate pivot to the indexing arrangement described herein based on the hash values of flows. That is an alternative query engine interface may be configured to cooperate with the indexing arrangement of the processing technique to provide the alternative approach.

While there have been shown and described illustrative embodiments of a processing technique configured to provide an improved indexing arrangement that enables efficient storage filtering and querying of metadata used to retrieve packets intercepted captured from a network and persistently stored in a data repository it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the embodiments herein. For example embodiments have been shown and described herein with relation to a user issuing a BPF query to the PCR node . However the embodiments in their broader sense are not so limited and may in fact also allow for use of the processing technique for infection tracing and remediation wherein a human network analyst may request network packets for analysis in response to an incident that translates to an exploit. For example a malware detection appliance coupled to network may issue an alert to the PCR node which may invoke the processing technique to rapidly retrieve all requested packets. As noted the multi stage indexing arrangement of the processing technique facilitates capture of packets and writing to disk while simultaneously serving queries retrieving from disk . The malware detection appliance may issue an alert in terms of a BPF expression or query and the PCR node may retrieve all matching packets and return them to the detection appliance which may perform an analysis on the packet traffic.

Advantageously the processing technique described herein provides among other things a storage format and an improvement to a known filtering mechanism which extends a common query language for network flow and network packets. That is the technique defines a storage format for network flow records and improves upon the BPF mechanism for processing recorded records. In addition the extended BPF and PCAP capabilities provide for improved filtering of packets on a computer communications network and further provide for querying large data sets of archived packets and metadata associated with computer communications. Moreover the indexing arrangement of the technique enables persistent storage of captured packet traffic at substantially high transfer rates e.g. approximately 10 Gb sec full duplex sustained approximately 20 Gb sec while enabling concurrent filtering and retrieval of previously stored packet traffic on the fly to reduce search and retrieval time from hours to seconds.

Furthermore queries using the BPF flow metadata may be used to generate reports such as e.g. a number of TCP connections generated by a user over a period of time. The information may be accessed using the flow metadata payload by e.g. walking down every PCAP record running an accumulator and providing the requested results. Queries of the flow metadata may also be used for network traffic recording and retrospective analysis e.g. in response to one or more requests to retrieve packets associated with a session. The results of the queries may be used to quickly i scan and locate all packets associated with a connection and ii fetch the packets from the precise locations in the PCAP file. Here the indexing arrangement enables rapid search and retrieval of packets based on the BPF queries. Notably the technique extends processing of BPF flow metadata appended to the PCAP record by configuring the BPF engine to examine the flow metadata offsets within each record as if it were processing a network packet.

The foregoing description has been directed to specific embodiments. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the components and or elements described herein can be implemented as software encoded on a tangible non transitory computer readable medium e.g. disks and or CDs having program instructions executing on a computer hardware firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the embodiments herein. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the embodiments herein.

