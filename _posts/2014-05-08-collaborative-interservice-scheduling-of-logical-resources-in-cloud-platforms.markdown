---

title: Collaborative inter-service scheduling of logical resources in cloud platforms
abstract: The subject disclosure relates to a method for scheduling logical resources in cloud platforms. A cloud platform system identifies resource candidates for hosting a logical resource of a cloud service. The system filters the resource candidates by running them through a filter chain, a collection of serially connected filters. The filter chain may contain one or more reference filters that reference other filter chains. When the resource candidates encounter one of the reference filters, the other filter chains can be triggered and processed. The system selects one or more resources for hosting the logical resource from the filtered resource candidates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09473365&OS=09473365&RS=09473365
owner: CISCO TECHNOLOGY, INC.
number: 09473365
owner_city: San Jose
owner_country: US
publication_date: 20140508
---
The subject technology relates to a method for scheduling logical resources in cloud platforms. In particular aspects of the technology provide systems and methods for utilizing a filter scheduler with multiple filter chains to enable joint service spanning scheduling among multiple infrastructure services.

Through virtual machine technology cloud computing is changing the landscape of network based services by offering its customers also known as tenants a means to use a service provider s virtualized computing assets such as virtual processors virtual storage and virtual network resources instead of having to purchase and own all of the necessary equipment outright. In particular Infrastructure as a Service IaaS cloud platforms may offer infrastructure services such as compute service s networking service s and storage service s to the tenants. They can provide logical resources that can be created on demand by cloud users via for instance a representational state transfer REST application programming interface API . Examples of such logical resources are virtual machine VM network router and block storage.

Under the cover the logical resources can be implemented and materialized by the IaaS platform using servers VMs virtual physical network devices and storage devices. Each infrastructure service may include a resource management function and a scheduler function whereby the logical resources can be mapped to the underlying physical resources that host them. To minimize cost the IaaS providers may want the resource management and scheduling functions to make as efficient use of the underlying resources as possible. The cloud application utilizing the logical resources may also have specific performance requirements.

However instantiating a logical resource may often require that the resource managers and the schedulers in multiple infrastructure services to work in concert. For example in order for a VM to serve as a logical router the VM may require information from both a network service and a compute service each equipped with its own scheduler. If these schedulers execute their tasks independently of each other in a non collaborative way the utilization of the services may be poor or performance requirements may not be fulfilled.

Traditionally one way to solve this problem is to use a common scheduler for multiple IaaS services. This solution however creates a tighter coupling among all of the involved IaaS services. Thus having a central scheduler may increase inter service control traffic and state sharing resulting in higher inter service dependencies. This may also complicate the evolution of the services as they are typically developed by separate development teams.

Another traditional method of resolving the problem is to use a hierarchy of schedulers. However this approach is not without its complications. In order to perform scheduling in a sufficiently efficient manner the scheduler that sits on top of the individual service schedulers may require fairly detailed service specific knowledge of all the subordinate schedulers and services. Thus the scheduler on top easily ends up merely performing a serialized invocation of the service specific schedulers. In other words the top level scheduler can be relegated to performing more of an orchestration task rather than a true joint service spanning scheduling.

In one embodiment a scheduler of a service can identify resource candidates for the service. Each of the resource candidates may be capable of hosting a logical resource of the service. The scheduler can then filter the resource candidates through a first filter chain which may consist of serially connected filters. One or more of the filters can be a reference filter that may reference and trigger a second filter chain. Next the scheduler can select from the filtered resource candidates a resource for hosting the logical resource.

The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology can be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a more thorough understanding of the subject technology. However it will be clear and apparent that the subject technology is not limited to the specific details set forth herein and may be practiced without these details. In some instances structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology.

In light of the problems identified above with regards to the inter service scheduling of logical resources what is needed is a configurable scheduling workflow that supports collaborative scheduling across multiple services preferably with a low degree of inter service coupling. The subject technology addresses the foregoing need by using a filter scheduler with multiple filter chains in each of the IaaS services that are involved in instantiating a logical resource. A filter scheduler may utilize a series of filters in the form of a filter chain. The filter scheduler may also perform weighing to determine the best candidate s for hosting the resource. The scheduler may send a list of resource candidates i.e. hosts through the filter chain. The filters may accept or reject each of the candidates based on their respective filtering criteria. The optional weighing step can calculate and assign weights to the candidates that have passed through the filters. The scheduler selects the resource candidate with the highest weight to host the requested logical resource.

Moreover the proposed method allows a filter chain in one IaaS service to contain a reference filter that can trigger the execution of another filter chain possibly belonging in a different IaaS service. This approach allows for flexible filtering patterns where scheduling information and control from multiple services can be interleaved. Thus joint service spanning scheduling can be performed with reasonable complexity and low inter service coupling.

A computer network is a geographically distributed collection of nodes interconnected by communication links and segments for transporting data between end nodes such as personal computers and workstations. Many types of networks are available with the types ranging from local area networks LANs to wide area networks WANs . LANs typically connect the nodes over dedicated private communications links located in the same general physical location such as a building or campus. WANs on the other hand typically connect geographically dispersed nodes over long distance communications links such as common carrier telephone lines optical lightpaths synchronous optical networks SONET or synchronous digital hierarchy SDH links.

The Internet is an example of a WAN that connects disparate networks throughout the world providing global communication between nodes on various networks. The nodes typically communicate over the network by exchanging discrete frames or packets of data according to predefined protocols such as the Transmission Control Protocol Internet Protocol TCP IP . In this context a protocol consists of a set of rules defining how the nodes interact with each other. Computer networks may be further interconnected by an intermediate network node such as a router to extend the effective size of each network.

Cloud computing can be generally defined as Internet based computing in which computing resources are dynamically provisioned and allocated to client user computers or other devices on demand from a collection of resources available via the network e.g. the cloud . Cloud computing resources for example can include any type of resource such as computing storage and network devices virtual machines VMs etc. For instance resources may include service devices firewalls deep packet inspectors traffic monitors etc. compute processing devices servers CPU s memory brute force processing capability storage devices e.g. network attached storages storage area network devices etc. and may be used for instantiation of Virtual Machines VM databases applications Apps etc.

Cloud computing resources may include a private cloud a public cloud and or a hybrid cloud. A hybrid cloud is a cloud infrastructure composed of two or more clouds that inter operate or federate through technology. In essence a hybrid cloud is an interaction between private and public clouds where a private cloud joins a public cloud and utilizes public cloud resources in a secure and scalable way.

Specifically devices A and B may include any device with processing and or storage capability such as personal computers mobile phones e.g. smartphones gaming systems portable personal computers e.g. laptops tablets etc. set top boxes televisions vehicles etc. and may communicate with the network internet or private networks to cloud . In addition one or more servers Server A and B network management servers NMSs control centers etc. may also be interconnected with or located within the network to cloud .

Cloud may be a public private and or hybrid cloud system. Cloud includes a plurality of resources such as firewalls virtual networks storage devices servers and virtual machines VMs . The cloud resource may be a combination of physical and virtual resources. The cloud resources are provisioned based on requests from one or more clients. Clients may be one or more devices for example device A and or B or one or more servers for example server A and or B.

Data packets e.g. traffic and or messages may be exchanged among the nodes devices of the computer network using predefined network communication protocols such as certain known wired protocols wireless protocols or other protocols where appropriate. In this context a protocol consists of a set of rules defining how the nodes interact with each other.

It will be apparent to those skilled in the art that other processor and memory types including various computer readable media may be used to store and execute program instructions pertaining to the techniques described herein. In addition while the description illustrates various processes it is expressly contemplated that various processes may be embodied as modules configured to operate in accordance with the techniques herein e.g. according to the functionality of a similar process . Further while the processes have been shown separately those skilled in the art will appreciate that processes may be routines or modules within other processes. For example processor can include one or more programmable processors e.g. microprocessors or microcontrollers or fixed logic processors. In the case of a programmable processor any associated memory e.g. memory may be any type of tangible processor readable memory e.g. random access read only etc. that is encoded with or stores instructions that can implement program modules e.g. a module having resource allocation process encoded thereon.

Processor can also include a fixed logic processing device such as an application specific integrated circuit ASIC or a digital signal processor that is configured with firmware comprised of instructions or logic that can cause the processor to perform the functions described herein. Thus program modules may be encoded in one or more tangible computer readable storage media for execution such as with fixed logic or programmable logic e.g. software computer instructions executed by a processor and any processor may be a programmable processor programmable digital logic e.g. field programmable gate array or an ASIC that comprises fixed digital logic or a combination thereof. In general any process logic may be embodied in a processor or computer readable medium that is encoded with instructions for execution by the processor that when executed by the processor are operable to cause the processor to perform the functions described herein.

IaaS cloud platform may consist of one or more IaaS services . . . collectively . Each of the IaaS services is capable of providing a service of one resource type or another. For example IaaS service may provide a virtual firewall service while IaaS service may provide a load balancing service. Each of the IaaS services in turn may be a collection of servers network devices and other resources.

Although platform is presented herein as an IaaS cloud platform the various embodiments are not limited in this regard. For example the various embodiments disclosed herein are also applicable to other cloud platforms such as platform as a service PaaS and software as a service SaaS .

Although shows four of the possible subcomponents that make up IaaS service those of skill in the art will understand that other components may also be part of IaaS service . Those of skill in the art will also understand that some of the subcomponents can be combined into a single component. For example one or more of resource manager filter scheduler context containers and resource pool can be combined into the same hardware and or software modules. The various components can also exist in a distributed fashion across different infrastructure services or even different cloud platforms. For example several different infrastructure services may have one central resource manager filter scheduler or context container that they may share. In another example resource pool can be shared among multiple infrastructure services that may be of differing service types. In such an embodiment the resource hosts in the shared resource pool can be provisioned to provide different services depending on which infrastructure service is using the resource pool.

Resource manager performs a resource management function. The resource management function along with a scheduler such as filter scheduler enables the logical resources to be mapped to the underlying physical resources that host them. Specifically resource manager can instantiate or destroy logical resources according to the needs of the clients by provisioning running and or modifying the host devices in resource pool . A scheduler such as filter scheduler shown in can select one or more host devices from resource pool to host one or more logical resources. Filter scheduler can also predict the needs of IaaS service and schedule and reserve hosts to be consumed in the future. Filter scheduler accomplishes these objectives by using one or more filters which can be organized into serially connected groups of filters called filter chains.

In order to instantiate a logical resource resource manager and filter scheduler may have to work in tandem with resource managers and schedulers of other infrastructure services. For example instantiating a virtual firewall may also require an instantiation of a new virtual router. In such an instance the scheduler for the firewall service may trigger the scheduler for the router so that the router can be fully or partially instantiated prior to the instantiation of the firewall.

Context container can contain context information necessary to instantiate virtual resources. Context information can be data metadata data structures databases settings preferences history data statuses pointers references indexes counters etc. The context information may be stored in volatile memory such as random access memory RAM or in non volatile memory such as a flash storage or magnetic storage device. The context container can be accessed by filter scheduler and associated with filters and or filter chains so that the scheduling function can preserve update modify duplicate and transfer context. Context container may contain multiple instances of context data so that filters and or filter chains may each have their own context.

Resource pool is a collection of physical or logical resources that can host logical resources. The resources that are not currently hosting a service may be placed in a suspended state and presented as resource candidates until they are selected by scheduler to host an instance of a service. The hosts inside resource pool can be servers virtual machines terminals network devices etc. New hosts can be added to resource pool or surplus hosts can be removed from resource pool dynamically by resource manager according to the current and future needs of IaaS service .

Each filter chain may consist of one or more filters A B C collectively . Filters and filter chains can be implemented as hardware or software modules. In some embodiments filters can be an algorithm with an accompanying data structure. Filters can be a traditional filter a reference filter or a hybrid filter that is a mixture of a traditional filter and a reference filter. Traditional filters can accept or reject a resource candidate in resource pool as a suitable host for a service. In other words filters can be a set of instructions or an algorithm that determines whether the candidates meet predetermined conditions requirements and or thresholds. For example traditional filters can accept or reject a candidate resource using various criteria such as computing capabilities resource availability utilization rate bandwidth resources usage history failure rate available features reservation schedule dependency storage capacity resource pool availability client specifications etc. Each filter can be further customized to meet the needs of the clients. For example a compute capability filter can be set up to screen out hosts whose computing capabilities are below a user specified threshold.

On the other hand one or more of filters can be a reference filter that makes a reference to another filter scheduler filter chain or filter. Thus with a reference filter execution of filters can jump from one filter scheduler to another filter scheduler from one filter chain to another filter chain and or from one filter to another filter. When a filter scheduler triggers another filter scheduler by means of a reference filter the original filter scheduler may be suspended until control returns from the newly triggered scheduler.

Filter B which is the next filter in line in this example filter chain is then applied to the remaining hosts in candidate set B. Filter B may be of the same or different type of filter than filter A. For instance filter A may be a compute capacity filter while filter B is an availability filter. Filter B may filter out additional hosts e.g. Host from candidate set B and output candidate set C consisting of host candidates that managed to pass through filter B. Optionally the surviving candidates in candidate set C can be weighted once more and reordered according to the updated suitability scores. In some embodiments weights can be assigned only once at the end of the filter chain rather than each time the candidates pass through a filter. Once the host candidates have passed through all the filters in the filter chain filter scheduler can select one or more hosts to be used to instantiate a logical resource. The selection can be based on the weighted scores given to the candidates. Alternatively the selection can be made randomly or semi randomly.

Scheduler A may start with entry point filter chain B and run the host candidates through the filters in filter chain B. The candidates can pass through the entirety of the filters one candidate at a time or they can also pass through the filters as a group one filter at a time. Either way when a resource candidate reaches reference filter A which references another filter chain C belonging in another infrastructure service filter scheduler A can suspend the execution of filter chain B before triggering filter scheduler B and or filter chain C. Filter scheduler B can continue the filtering process by invoking the referenced filter in filter chain C. In this example filtering chain C includes a reference filter B which references the second filter in filter chain D of IaaS service .

The host candidate may successfully pass through some of the traditional filters in filter chain C before encountering reference filter B at which point control is shifted to yet another filter chain D. The execution of filter chain C may be suspended until control returns from filter chain D. If the resource candidate successfully passes through all the filters in filter chain D filter scheduler B resumes execution of C where it left off earlier. After processing the remaining filters in B control finally returns to filter chain B until the resource candidate encounters yet another reference filter C which references filter chain A of IaaS service . Filter scheduler A identifies the appropriate filter index and begins execution of the filters in filter chain A. Once control returns to filter chain B the remaining filters are processed and any resource candidates that managed to successfully pass through all of the filters in the filter chain are presented as acceptable candidates from which filter scheduler A can finally select one or more hosts for the logical resource.

Optionally any resource candidates that pass through one or more filters can be weighted and assigned scores that indicate suitability for hosting a logical resource. The weighting can be done in between filters or at the end of the filter chain. The criteria that are used for weighting can be similar to those used by the filters. Different weighting criteria can have varying degrees of multipliers so that each criterion can be prioritized. In other words a higher value multiplier can be used to assign scores for a higher priority criterion.

Filter schedulers may also use context containers to preserve context when switching from one filter chain to another. The context containers can contain context information needed to schedule a resource. Various filters and filter chains may add new information to the context containers modify the information in the context containers or delete information from the context containers. Thus a context container in effect can function as a communication mechanism between filters and or filter chains. As an example entry point filter chain B can be associated with context container CC. Context container CC for instance may contain information about the resource candidate set that is passing through filter chain B.

Moreover when handing control over to filter chain C however filter scheduler A can create a duplicate context container CC based on CC and hand it over to filter scheduler B or filter chain C. Filter scheduler A can also update duplicate context container CC with reference information so that scheduler B can properly return control back to scheduler A. When control does return to scheduler A some of the information contained in CC that is specific to scheduler B can be adapted and copied to CC. By the same token when filter chain C triggers filter chain D e.g. by way of reference filter B scheduler B can spawn yet another child context container CC based on CC . Duplicate context container CC can contain necessary information to process the appropriate set of host candidates through filter chain D and return control back to filter chain C. Filter chain D may modify some data contained in CC over the course of its filtering process and some of that data can be adapted and copied back to the parent context container CC . Similarly still yet another duplicate context container CC can be generated for filter chain A.

Having disclosed some basic system components and concepts the disclosure now turns to some exemplary method embodiments shown in . For the sake of clarity the methods are discussed in terms of an example system as shown in configured to practice the methods. It is understood that the steps outlined herein are provided for the purpose of illustrating certain embodiments of the subject technology but that other combinations thereof including combinations that exclude add or modify certain steps may be used.

The creator of the chains or the IaaS platform may need to ensure that there are no infinite loops in the filter chains. For example if one filter chain contains a reference filter that references another filter chain and the second filter chain contains a reference filter that references the original filter chain it is possible that execution of one of the filter chains would result in a never ending cycle switching back and forth between the two filter chains.

System can then trigger a scheduler . In other words invocation of the scheduler may be triggered as part of creating an X logical resource. System can then identify an entry point filter chain among the filter chains . For example the entry point chain CX for X may be determined by the IaaS platform. The determination of the entry point chain can be accomplished by performing a lookup in a hash table.

System may create a context container that can hold metadata . For example a context container CC can be created so that it can hold context information for instance X needed during scheduling and application of filters. This can include information about other logical resource instances both currently existing and not yet instantiated. Filters can add information to CC. The context container can thereby effectively act as a communication mechanism between different filters in the chains. System may then collect and store in the context container information about infrastructure resource candidates that can potentially host the logical resource . For example the information about infrastructure resource candidates that can possibly host X can be collected and stored as a set RC in CC.

In system may go through each resource candidate in the context container by determining whether there are any resource candidates left in the context container . If there are one or more resource candidates to evaluate in the container then system may take one of the resource candidates and run it through the filters in the filter chain. For example system can identify a resource candidate R in CC RC. Execution of the filters can be accomplished by determining whether there are any filters left to process in the filter chain and taking a filter in the filter chain . For example system may start out with the entry filter chain CX. Then system may determine whether the current filter is a traditional filter or a reference filter . If the filter turns out to be a traditional filter then system determines whether the resource candidate satisfies that filter . If the resource candidate satisfies the filter then system proceeds to the next filter in the filter chain and processes the next filter . However if the resource candidate fails to satisfy the traditional filter then system can mark and remove the resource candidate from the context container . For example resource candidate R may be marked and removed from CC RC. Since the resource candidate has already failed one of the filters in the filter chain there is no need to process the remaining filters in the chain in this case. Thus system may continue to see if there are any other resource candidates to evaluate and pick another resource candidate to run through the filter chain s .

If on the other hand the filter being executed is a reference filter then system can create a copy of the context container . For example a copy CC of CC can be created. When doing so some information in CC can be removed or modified in CC to suit the need of the filter chain being triggered. Additionally the new resource candidate set for CC may be set to consist solely of the current resource candidate R being evaluated. In other words CC RC may be set to be equal to R. Next system may update information for the copied context container . Thus for example CC can be updated with necessary information to help the scheduler in another service properly return control to the current scheduler. Additionally Fcan add filter specific data to CC and or CC . Then system can hand over control to the referenced filter chain and wait until gaining back control . For example control can be handed over to Ref S S CX l and CC object or its reference pointer can be sent along to the referenced scheduler or filter chain. In some embodiments control can be handed over to other scheduler s by way of message queue based remote procedure call RPC . While filter chain CXis being executed by S S the current filter chain F can be suspended. When control finally returns the current filter chain or the scheduler may also receive context container CC which is a modified version of C by S Sand any other services to remove any service specific and thus irrelevant to the original scheduler data from CC . System may update the context container with information from the copied context container . For example Fcan adapt and copy filter specific data in particular the filtered resource candidate set RC from CC to CC. System then continues the filtering process with any remaining filters .

Once the filters in the given filter chain is exhausted system determines whether the resource candidate is marked . In other words it is determined whether the resource candidate successfully passed through all of the filters in the filter chain s . If the resource candidate is marked i.e. failed one of the filters then system moves on to process any other remaining resource candidates in the context container . If on the other hand the resource candidate is not marked then system can optionally assign a weight to the validated resource candidate. The weight can be a suitability score that indicates how suitable or desirable the particular resource candidate is for hosting the logical resource. Thus if a flag condition indicates that a weight is to be calculated system may calculate the weight for the resource candidate . For example the weight can be calculated with a weight function e.g. w R weight function R . Alternatively system may assign a uniform weight to the resource candidate . For example system can assign the same score to every resource candidate e.g. w R 1 . Once the calculated weight or uniform weight is assigned to the resource candidate system may move on to process other resources candidates left in the context container . In some embodiments the weighting steps can be performed after each filter instead of being performed only once at the end of the entire filter chain.

When all the resource candidates are processed and the candidate set is exhausted in the context container system can finally select a host . In some embodiments system can select multiple hosts for multiple logical resources. The selection of the host s can be based on the weights that are assigned to the candidate resources. For example the resource candidate with the highest suitability score can be selected as the host. If there are more than one candidate with the same or similar score then the host may be selected randomly.

System which can be a referenced filter scheduler may gain control handed over from the original scheduler and fetch a referenced filter chain . For example the referenced scheduler can retrieve information about filter chain CX which was referenced in the context container. System can then update the copied context container with service specific data . For example system can update context container CC which is a copy of the original context container CC with data that are specific to the referenced infrastructure service. Next system may determine whether there are any resource candidates left in the copied context container . For example system can peek into CC RC and see if there are any resources such as resource candidate R left in the context container. If system is processing one resource candidate at a time through the entire filter chain then there may be only one resource candidate in the copied context container. Alternatively if more than one resource candidates are being filtered then there could be more than one resource candidates in the copied context container.

If there is at least one resource candidate to process in the copied context container then System may take a resource candidate and run the resource candidate through the filters in the filter chain by determining whether there are filters left in the filter chain and taking one of the filters . For example system may start from the filter with index as specified in the context container. If system determines that the filter is a reference filter then it can perform a reference filter subroutine that is similar to steps in . In particular via one or more reference filters the referenced filter chain may trigger yet other filter chains inside or outside the infrastructure service to create multi layered filter chains.

If the filter is a traditional filter on the other hand then system may determine whether the resource candidate satisfies the filter and mark and remove the resource candidate from the context container if the candidate fails the filter. Once all the filters have been processed and there is no other filters left to process in the filter chain system may assign weights to the resource candidate s according to the steps similar to steps of . Throughout the filtering process of steps system may update and or modify the copied context container CC or generate a new context container CC based on other context containers. Once all the resources have been filtered through the filter chain system may return control to the original filter scheduler that triggered the referenced filter scheduler.

It should be understood that the steps shown above are merely examples for illustration and certain steps may be included or excluded as desired. Further while a particular order of the steps is shown this ordering is merely illustrative and any suitable arrangement of the steps may be utilized without departing from the scope of the embodiments herein.

The techniques described herein therefore provide for improving user experience simplifying application service design using cloud services and more predictably establishing a virtual resource instantiation time.

While there have been shown and described illustrative embodiments that provide for scheduling a logical resource it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the embodiments herein. For example the embodiments have been shown and described herein with relation to cloud networks. However the embodiments in their broader sense are not as limited and in fact may be used with other types of shared networks. Moreover even though some of the embodiments have been shown and described herein with relation to infrastructure services resources may be scheduled according to the various methods described herein in other types of services such as platform services and software services.

The foregoing description has been directed to specific embodiments. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the components and or elements described herein can be implemented as software being stored on a tangible non transitory computer readable medium e.g. disks CDs RAM EEPROM etc. having program instructions executing on a computer hardware firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the embodiments herein. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the embodiments herein.

It is understood that any specific order or hierarchy of steps in the processes disclosed is an illustration of exemplary approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps in the processes may be rearranged or that only a portion of the illustrated steps be performed. Some of the steps may be performed simultaneously. For example in certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects. Thus the claims are not intended to be limited to the aspects shown herein but are to be accorded the full scope consistent with the language claims wherein reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. 

A phrase such as an aspect does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations or one or more configurations. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as a configuration does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations or one or more configurations. A phrase such as a configuration may refer to one or more configurations and vice versa.

The word exemplary is used herein to mean serving as an example or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

