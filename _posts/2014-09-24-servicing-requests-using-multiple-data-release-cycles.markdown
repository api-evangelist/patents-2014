---

title: Servicing requests using multiple data release cycles
abstract: A system and method for serving requests using multiple release cycles is disclosed. The data release application includes a controller, a configuration data engine, a matching engine and a rendering engine. The controller receives a request from a client. The configuration data engine determines a set of criteria and a collection of release datasets corresponding to configuration data. The matching engine matches the request with the set of criteria and determines a combination of release cycle and release stage for servicing the request. The rendering engine retrieves a release dataset from the collection of release datasets that corresponds to the combination of release cycle and release stage and generates a response based on the release dataset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09521087&OS=09521087&RS=09521087
owner: Google Inc.
number: 09521087
owner_city: Mountain View
owner_country: US
publication_date: 20140924
---
The present application claims priority under 35 U.S.C. 119 of U.S. Provisional Patent Application No. 61 910 252 filed Nov. 29 2013 and entitled Servicing Requests Using Multiple Data Release Cycles which is incorporated by reference in its entirety.

Pushing updates related to data files including HyperText Markup Language HTML templates Cascading Style Sheet CSS templates JavaScript content etc. used by service front end and or back end for rendering user requests can become complicated. This is particularly true when the updates are pushed out on different schedules and made available during different stages of development as part of service deployment. For example data files used in servicing user requests may receive updates on an hourly daily weekly or monthly cycle and the updates may be made available or staged for test beta or production stage of development. A problem with the current approach is that servicing user requests at the service front end and or back end fails to cover a matrix of release cycles and stages. It is not readily apparent which service front end and or back end is loading what kind of data release files for servicing user requests which negatively impacts on providing a seamless user experience.

According to one innovative aspect of the subject matter described in this disclosure a controller receives a request from a client a configuration data engine determines a set of criteria and a collection of release datasets a matching engine matches the request from the client with the set of criteria and determines a combination of release cycle and release stage based on matching the request with the set of criteria and a rendering engine retrieves a release dataset from the collection of release datasets that corresponds to the first combination of release cycle and release stage and generates a response for the request based on the release dataset.

In general another innovative aspect of the subject matter described in this disclosure may be implemented in methods that include receiving a request from a client determining a set of criteria determining a collection of release datasets matching the request from the client with the set of criteria determining a combination of release cycle and release stage based on matching the request with the set of criteria retrieving a release dataset from the collection of release datasets that corresponds to the first combination of release cycle and release stage and generating a response for the request based on the release dataset. Other aspects include corresponding methods systems apparatus and computer program products.

These and other implementations may each optionally include one or more of the following features. For instance the operations further include receiving an update for a base dataset including the set of criteria and for one or more release datasets in the collection of release datasets determining whether all updated copies associated with the base dataset and the collection of release datasets are retrieved successfully and responsive to determining that all updated copies are retrieved successfully replacing the base dataset and the collection of release datasets with the updated copies for servicing the request. For instance the operations further include responsive to determining that not all updated copies are retrieved successfully discarding the updated copies associated with the base dataset and the collection of release datasets and retrieving the base dataset and the collection of datasets before the update for servicing the request. For instance the determining includes determining the combination of release cycle and release stage from debugging parameters identified in the request and the operations further include determining whether a first server has the combination responsive to determining that the first server does not have the combination forwarding the request from the first server to a second server which is capable of generating a response using the combination of release cycle and release stage identified by the debugging parameters in the request wherein retrieving the release dataset and generating the response for the request occurs at the second server and transmitting the response from the second server to the first server.

The features further include the client being a search client the collection of release datasets corresponding to configuration data used for generating the response for the request the set of criteria including criteria for determining an applicable release cycle and release stage corresponding to the request the release cycle being an hourly release cycle the release stage being a production release stage and the one or more debugging parameters forwarding the request from a production server instance to a test server instance to generate the response for the request.

The specification describes a data release application that services requests using multiple data release cycles which advantageously increases the service capacity and improves resource utilization. In addition the client does not need to be specially configured to use a particular release as any release cycle and stage is readily available in any executing service process. Lastly the use of debugging parameters leads to accelerated review of reported bugs and stabilizing the software implementing the service by developers. This increases the development velocity for both the front end and back end service times as new features and bug fixes can be verified faster while it becomes easier to triage a bug and narrow the range of code changes that may have caused it by switching between different release cycles and stages through debug parameters.

The specification discloses a system and method for using multiple data release cycles to serve data for a request. The data release application receives a request from a client device. For example the request can be a query to retrieve search results on a web search service. The data release application retrieves a current base dataset and a current collection of release datasets. For example the current dataset may include a set of criteria dictating how a request could be served and the current collection of release datasets may correspond to configuration data HyperText Markup Language HTML templates JavaScript snippets etc. used to serve the request. Each dataset in the collection corresponds to a combination of release cycle and release stage. For example weekly cycle production stage hourly cycle beta stage daily cycle test stage etc. In some instances the data release application matches the request with the set of criteria to determine an applicable combination of release cycle and release stage for serving the request. For example the data release application determines that a request querying a social network service from a client device matches a combination of a daily release cycle and a product release stage as per the set of criteria. In some instances the data release application retrieves a release dataset from the collection of release datasets that corresponds to the combination. The data release application generates a response for the request based on the retrieved release dataset. For example the data release application retrieves a web page including search results matching the query on the web search service based on the appropriate release dataset.

In some instances the data release application receives an update to one or more release datasets in the collection of datasets related to the configuration data. The data release application updates the release datasets atomically i.e. by requiring all updated release datasets to be loaded and retrieved successfully before serving requests. In some instances the data release application exposes the collection that was last successfully loaded for serving requests while there is an in flight update to the one or more release datasets in the collection. In some instances the data release application identifies debugging parameters within a request originating from a client. The debugging parameters can override both the release cycle and release stage that is standard for serving the request as per the set of criteria. In some instances the debugging parameters activate request forwarding from one instance of the server to another. For example the request matches a weekly cycle production stage combination. The debugging parameters within the request indicate a preference for hourly cycle to be used for serving the request. The data release application sends the request to a first instance of the server that can load weekly release data. The first instance of the server for e.g. production server then forwards the request to a second instance of the server for e.g. test server that loads hourly release data in addition to weekly and daily release data. The second instance of the server serves the request using the hourly release data and the first instance of the server relays the response from the second instance of the server back to the client. An advantage of request forwarding can be that all server instances i.e. test beta or production can use data from multiple release cycles i.e. hourly daily or weekly for serving requests regardless of a specific release dataset configured for the client originating the request.

If at least one updated copy of dataset fails to be retrieved successfully the configuration data engine discards all datasets that were updated or pending the update. The configuration data engine retrieves the initial collection of datasets and proceeds to step . For example if one dataset relating to the weekly release cycle and alpha test release stage fails to be retrieved successfully the configuration data engine discards all other datasets say datasets relating to the daily release cycle and the beta release stage datasets relating to hourly release cycle and test release stage datasets relating to weekly release cycle and production release stage and so on.

The matching engine matches the request with the set of criteria in the base dataset and determines a combination of release cycle and release stage that is applicable for servicing the request based on matching the request with the set of criteria. For example the matching engine identifies that the request is from an internal user i.e. software developer within the entity controlling the server querying a web mapping service. The matching engine determines that the request matches a combination of an hourly release cycle and an alpha test release stage as per the set of criteria included in the base dataset. The rendering engine retrieves a release dataset from the collection of release datasets that corresponds to the combination of release cycle and release stage. For example the rendering engine retrieves a release dataset corresponding to the combination of the hourly release cycle alpha release stage. The rendering engine generates a response for the request based on the release dataset. For example the rendering engine retrieves a web page of the determined map route matching the request on the web mapping service. The web page can be rendered based on the configuration data in the release dataset corresponding to the combination of hourly release cycle and test release stage.

The matching engine routes the request to a first server instance based on matching the request with a set of criteria in the base dataset. For example the request may match a production release stage weekly release cycle and the first server instance may be a production server instance. The matching engine then determines a combination of release cycle and release stage identified by debugging parameters within the request. The matching engine determines whether the first server instance has the combination. The debugging parameters can override both the release cycle and release stage that can be initially applicable for servicing the request. In some instances the request can be an internal request. For example the debugging parameters in the internal request may specify using hourly release cycle and alpha test release stage.

If the first server instance does not have the combination the matching engine forwards the request to a second server instance which generates response using the combination of release cycle and release stage identified by the debugging parameters within the request. For example the production server instance cannot service requests using an hourly release cycle but the test server i.e. second server instance may be capable of servicing those requests. As a result the matching engine transmits the request from the production server instance to the test server instance. The rendering engine retrieves a release dataset from a collection of release datasets that corresponds to the combination of release cycle and release stage. The rendering engine generates a response for the request based on the release dataset and forwards the response from the second server instance to the first server instance. The rendering engine sends the response from the first server instance to the client. For example the test server instance generates a response using hourly release cycle and relays the response to the production server instance.

If the first server instance does have the combination the rendering engine retrieves a release dataset from a collection of release datasets that corresponds to the combination of release cycle and release stage. The rendering engine generates a response for the request based on the release dataset and proceeds to step . For example the rendering engine retrieves a web page including an album of photographs matching the request on the social network service. The web page can be rendered based on the configuration data in the release dataset corresponding to the combination of hourly release cycle and test release stage.

The network may be a conventional type network wired or wireless and may have any number of configurations for example a star configuration token ring configuration or other configurations. Furthermore the network may comprise a local area network LAN a wide area network WAN e.g. the Internet and or any other interconnected data path across which multiple devices may communicate. In some instances the network may be a peer to peer network. The network may also be coupled to or includes portions of a telecommunications network for sending data in a variety of different communication protocols. In some other instances the network includes Bluetooth communication networks or a cellular communications network for sending and receiving data for example via SMS MMS hypertext transfer protocol HTTP direct data connection WAP e mail etc. While only one network is illustrated any number of networks may be coupled to the above mentioned entities.

The client devices in are used by way of example. Although only two client devices are illustrated the technology applies to a system architecture having one or more client devices . The users interact with the client devices via signal lines respectively. The client devices are connected to the network via signal lines respectively. The client device can be any computing device that includes a memory and a processor. For example the client device can be a laptop computer a desktop computer a tablet computer a mobile telephone a personal digital assistant a mobile email device a portable game player a portable music player a television with one or more processors embedded therein or coupled thereto or any other electronic device capable of accessing the network etc.

In some instances the client device includes a browser . The browser can be code and routines stored in the memory and executed by the processor of the client device . The browser includes any browser application that can retrieve pages hosted by the server or servers for example the servers hosting electronic mail service search service mapping service video sharing service etc. and can present the pages on a display not shown on the client device . In some other instances the browser retrieves and presents pages hosted by the client device . The term page includes documents or information resource that comprises textual elements non textual elements for example static images animated images audio video etc. interactive elements for example games buttons hyperlinks etc. scripts for example JavaScript code implementing Ajax techniques etc. metadata etc. In some instances the page can be a web page in a type of file format for example HTML HTML5 XHTML XML etc. .

In some instances a data release application may be operable on the server which is coupled to the network via signal line . The server can be a hardware server or servers that include a processor a memory and network communication capabilities. The server sends and receives data to and from one or more of the client devices and or other servers via the network . In some instances the server can be an implementation making use of Representational State Transfer REST principles and supporting data representation in JavaScript Object Notation JSON format. In other instances the server can include multiple instances and each instance can include its own directory structure configuration and deployed applications. For example a test instance on the server can be for internal quality assurance and trouble shooting and a production instance on the server can be for generating a response to external requests.

In some instances the server also includes an online service application not pictured that can be part of the data release application or a standalone application. The online service application includes software including routines that when executed by a processor not pictured generates an online service that is hosted by the server . The online service application can be stored on a non transitory memory associated with the server . The online service application can be dedicated to generating and providing content for querying users. In some instances the online service application verifies that users requesting access to data stored in the storage device not shown are authorized to access the data they are requesting through the online service. For example user authentication by matching a username and password. Once a user is authenticated the user can access the data and or share the data with other users.

In one example the online service hosted by the server can be a video sharing online service that plays a video responsive to receiving a user request from the client device . In another example the online service can be a search service that retrieves search results in response to receiving a user query including search terms from the client device . In a third example the online service can be an image hosting service that returns one or more images in response to receiving an application programming interface API call. Other examples of online services that provide access to content can include electronic messaging social networks micro blogs calendars maps weather service current news financial news airline reservations geo location services cloud storage services online information database services etc.

Furthermore it should be understood that the server may be representative of multiple servers coupled to the network each having its own processor memory and network communication capabilities. For example a first server may be more directed to social networking a second server may be more directed to or centered on a search service a third may be more directed to an electronic messaging service a fourth is directed to mapping and or map based services and others are of general interest or a specific focus. In some instances the data that is accessed by users may be distributed across multiple servers . For example a search query from a user on a search service can retrieve search results that match the query from the social network of the user. In some other instances the servers can be at least controlled by the same entity.

In some instances the browser accesses the online service using hypertext transfer protocol HTTP requests and retrieves content for one or more web pages generated from the online services on the servers .

The data release application can be software including routines. In some instances the data release application can be implemented using hardware including a field programmable gate array FPGA or an application specific integrated circuit ASIC . In other instances the data release application can be implemented using a combination of hardware and software.

In some instances the data release application receives a request from a client. The data release application determines a set of criteria and a collection of release datasets corresponding to configuration data. The data release application matches the request with the set of criteria and determines a combination of release cycle and release stage. The data release application retrieves a release dataset from the collection of release datasets that corresponds to the combination of release cycle and release stage and generates a response for the request based on the release dataset. The data release application is described in further detail below with reference to .

Referring now to an example of the data release application is shown in more detail. is a block diagram of a server that includes a processor a memory a communication unit and a storage device according to some implementations. The components of the server are communicatively coupled by a bus .

The processor includes an arithmetic logic unit a microprocessor a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device. The processor is coupled to the bus via signal line for communication with the other components. Processor may process data signals and may comprise various computing architectures including a complex instruction set computer CISC architecture a reduced instruction set computer RISC architecture or an architecture implementing a combination of instruction sets. Although only a single processor is shown in multiple processors may be included. The processing capability may be limited to supporting the display of images and the capture and transmission of images. The processing capability might be enough to perform more complex tasks including various types of feature extraction and sampling. Other processors operating systems sensors displays and physical configurations are possible.

The memory stores instructions and or data that may be executed by processor . The memory is coupled to the bus via signal line for communication with the other components. The instructions and or data may include code for performing any and or all of the techniques described herein. The memory may be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory or some other memory device. In some instances the memory also includes a non volatile memory or similar permanent storage device and media for example a disk drive a CD ROM device a DVD ROM device a DVD RAM device a DVD RW device a flash memory device or some other mass storage device for storing information on a more permanent basis.

The communication unit transmits and receives data to and from at least one of the client device and other servers where the data release application is stored. The communication unit is coupled to the bus via signal line . In some instances the communication unit includes a port for direct physical connection to the network or to another communication channel. For example the communication unit includes a USB SD RJ 45 or similar port for wired communication with the client device . In some other instances the communication unit includes a wireless transceiver for exchanging data with the client device or any other communication channel using one or more wireless communication methods for example IEEE 802.11 IEEE 802.16 BLUETOOTH or another suitable wireless communication method.

In some instances the communication unit includes a cellular communications transceiver for sending and receiving data over a cellular communications network for example via short messaging service SMS multimedia messaging service MMS hypertext transfer protocol HTTP direct data connection WAP e mail or another suitable type of electronic communication. In some other instances the communication unit includes a wired port and a wireless transceiver. The communication unit also provides other conventional connections to the network for distribution of files and or media objects using standard network protocols for example TCP IP HTTP HTTPS and SMTP.

The storage device can be a non transitory memory that stores data used by the data release application . In some instances the data is stored temporarily for example a cache. The storage device may be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory or some other memory device. In some instances the storage device also includes a non volatile memory or similar permanent storage device and media for example a hard disk drive a floppy disk drive a CD ROM device a DVD ROM device a DVD RAM device a DVD RW device a flash memory device or some other mass storage device for storing information on a more permanent basis. In the illustrated implementation the storage device is communicatively coupled by the bus for communication with the other components of the server via signal line . Although only one storage device is shown in multiple storage devices may be included. In some other instances the storage device may not be included in the server and can be communicatively coupled to the server via the network .

In some instances the storage device stores the request associated with a client. For example the request can be a query for retrieving results on a web search service. In some instances the storage device stores the base dataset and the one or more release datasets corresponding to the configuration data. In some other instances the storage device stores updated copies of datasets both base and release datasets . In some instances the storage device stores a combination of release cycle and release stage determined for the request by indexing against the request. In some other instances the storage device stores an overriding combination of release cycle and release stage determined for the request based on identified debugging parameters in the request. The data stored in the storage device is described below in more detail. In some instances the storage device may store other data for providing the functionality described herein.

In some instances the data release application includes a controller a configuration data engine a matching engine and a rendering engine .

The controller can be software including routines for receiving data via the communication unit routing the data to the appropriate engine or unit and transmitting responses from the engine or unit to the communication unit for transmission to the client device or the servers . In some instances the controller can be a set of instructions executable by the processor to provide the functionality described below for managing data. In some other instances the controller can be stored in the memory of the server and can be accessible and executable by the processor . In either of the instances the controller may be adapted for cooperation and communication with the processor and other components of the server via signal line .

In some instances the controller identifies the type of data being received and transmits the data to the appropriate unit or engine of the data release application . For example the controller receives information from the server for rendering a user interface of an online service hosted by the server and transmits the information to the rendering engine . In some other instances the controller receives user inputs and user actions submitted by the user from the client device . The controller sends the user actions and the user inputs to the appropriate engine or unit of the data release application . For example the controller receives a request from a user and forwards the request to the matching engine . The request can be a query for retrieving results on a web search service a query for calculating a direction and distance to a destination on a web mapping service a query to retrieve an electronic mail on an electronic mail service a query to retrieve user generated content on a social networking website etc. In some instances the controller stores the request from the user in the storage device .

In some instances the controller receives information from other components of the data release application and transmits the information to the appropriate component in the system via the communication unit . For example the controller receives a partial response generated for a user request by the rendering engine . The controller transmits the partial response to another connecting server that is part of the system to generate a more complete response to the user request.

In some instances the controller receives data from components of the data release application and stores the data in the storage device . For example the controller receives a base dataset and one or more release datasets corresponding to configuration data from the configuration data engine and stores them in the storage device . In some other instances the controller retrieves data from the storage device and sends the data to other components of the data release application . For example the controller retrieves one or more release datasets from the storage device and transmits them to the rendering engine for generating responses for queries.

The configuration data engine can be software including routines for managing and updating datasets corresponding to configuration data used in generating a response for requests. In some instances the configuration data engine can be a set of instructions executable by the processor to provide the functionality described below for managing and updating datasets. In some other instances the configuration data engine can be stored in the memory of the server and can be accessible and executable by the processor . In either of the instances the configuration data engine can be adapted for cooperation and communication with the processor the matching engine the rendering engine and other components of the data release application via signal line .

In some instances the configuration data engine receives a collection of datasets on each data release related to configuration data and caches them. The collection of datasets related to configuration data for servicing requests can be released by an entity controlling the server and are herein referred to as release datasets. For example the release datasets can be output of established release mechanisms that use data generated by software developers within the entity as input. The configuration data can include data used for generating a response to requests from users of one or more client devices . For example the configuration data can be HyperText Markup Language HTML templates cascading style sheet CSS to HTML templates JavaScript snippets JavaScript etc. Each dataset in the collection can correspond to a particular combination of release cycle and release stage. A release cycle defines a length in time between subsequent releases of updates fixes and or enhancements to the dataset of configuration data. For example the release cycle can be a weekly release cycle where a data release is every week a daily release cycle where a data release is every day and an hourly release cycle where a data release is every hour. A release stage defines a rollout in stages of the release of updates fixes and or enhancements to the dataset of configuration data for user consumption. For example the release stage can be an alpha test stage where the dataset is available only to developers and quality testers for use within the entity a beta stage where the dataset is exposed only to employees within the entity or released to a group of individuals by invitation for testing and reporting bugs and a production stage where the dataset is widely available for external users or customers. In another example the release stage can be a canary stage where a small number of end users receive an opportunity to try the new dataset used by a service front end and or back end and the end users are unaware that the service front end and or back end is being tested on servicing user requests based on the new dataset. In yet another example the release stage can be a production stage where the new dataset used by the service front end and or back end is released to the public at large. In some instances the configuration data engine stores the collection of release datasets in the storage device .

In some instances the configuration data engine receives a set of criteria corresponding to the configuration data from an administrator of the server . The configuration data engine stores the set of criteria in a base dataset in the storage device . The set of criteria dictate a manner in which requests from users of the one or more client devices may be serviced. For example the requests originating from users querying a social network service may be serviced using a weekly release cycle and an alpha test release stage as default. In a second example the requests originating from users querying a web search service may be serviced using a daily release cycle and an alpha test release stage as default. In a third example the requests originating from users employed with the entity may be serviced using the beta stage and a release cycle weekly daily or hourly depending on the online service social search electronic mail etc. the request is being directed toward. In a fourth example the requests originating from external users i.e. customers or public at large may be serviced using the production stage and a release cycle depending on the online service the request is being directed toward.

In some instances the configuration data engine receives an update to one or more release datasets in the collection of datasets relating to the configuration data from the administrator of the server . The update to the one or more release datasets may follow the schedules of the associated release cycles for e.g. weekly daily or hourly in the one or more release datasets. In some other instances the configuration data engine also receives an update to the base dataset. The update to the base dataset may be rare for e.g. six months one year etc. .

To avoid data skew during rendering content for user requests the base and release datasets are atomically updated. Using atomic updating on the multiple datasets i.e. by requiring all updated datasets to be loaded successfully before any of them can be used for serving requests reduces the risk of problems associated with providing the content.

In some instances the configuration data engine receives a copy of the updated datasets base and release datasets and also retains the initial collection of release datasets including the base dataset in the storage device . In some other instances the configuration data engine replaces the initial collection of release datasets including the base dataset with the updated copies of the datasets in the storage device . In some instances the configuration data engine determines whether all the updated datasets are retrieved successfully from the storage device . The configuration data engine attempts to load the updated datasets for example creating an internal representation of the updated datasets and performs sanity checks on them. If all the updated copies of the datasets are retrieved and loaded successfully the configuration data engine atomically replaces the initial collection of release datasets retained previously with the updated datasets to create an up to date collection of release datasets in the storage device . The updated datasets are transmitted to the rendering engine . If at least one updated dataset fails to be retrieved successfully the configuration data engine discards all other datasets that were updated or pending to be updated based on their respective release cycle. The configuration data engine retrieves the initial collection of release datasets including the base dataset retained previously before the update. For example if one dataset relating to the weekly release cycle and alpha test release stage fails to be retrieved successfully the configuration data engine discards all other datasets for example datasets relating to the daily release cycle and beta release stage datasets relating to the hourly release cycle and test release stage datasets relating to weekly release cycle and production release stage and so on. For requests served while there is an in flight update the configuration data engine exposes the collection that was last successfully loaded to the rendering engine before starting the new update to the collection.

The matching engine can be software including routines for matching the requests to a release stage and release cycle for servicing the requests. In some instances the matching engine can be a set of instructions executable by the processor to provide the functionality described below for matching the requests. In some other instances the matching engine can be stored in the memory of the server and can be accessible and executable by the processor . In either of the instances the matching engine can be adapted for cooperation and communication with the processor the configuration data engine the rendering engine and other components of the data release application via signal line .

In some instances the matching engine receives the request transmitted by the controller . The matching engine matches the request with the set of criteria in the base dataset retrieved from the storage device . The matching engine determines a combination of release cycle and release stage relating to the configuration data that is applicable for servicing the request. In some instances the matching engine identifies a property identifier from the request and maps the property identifier to a release cycle. The property identifier refers to the particular service being provided for example search social maps etc. If the property identifier refers to a search service for example then the matching engine maps the request to a weekly release. If the property identifier refers to a social service for example then the matching engine maps the request to a daily release.

In some instances the matching engine determines an internet protocol IP address originating the request and maps the internet protocol address to a specific release stage. For example the matching engine identifies that a request is from a user querying a social network service from an external IP address i.e. public . The matching engine determines that the request matches a combination of a daily release cycle and a production release stage as per the set of criteria included in the base dataset. In another example the matching engine identifies that a request is from a user within the entity querying a web search service from an internal IP address i.e. employee . The matching engine determines that the request matches a combination of a weekly release cycle and an alpha test release stage as per the set of criteria included in the base dataset. In some other instances the release cycle and release stage may be decided on more complicated criteria or may be based on experimental definitions. For example weekly release cycle can be overridden to daily release cycle for 10 of the users using the search service in the United States. In another example production release stage can be overridden to beta or canary release stage for requests originating from internal IP addresses within the entity. In some instances the matching engine transmits the combination of release cycle and release stage determined for the request to the rendering engine . In some other instances the matching engine stores the combination of release cycle and release stage determined for the request in the storage device indexed against the request.

In some instances the matching engine identifies debugging parameters included in the request transmitted by the controller . The debugging parameters override at least one of the release cycle and release stage that was initially applicable for servicing the request. In some instances the request can be an internal request. For example the request can be originating from an internal IP address within the entity querying a web search service. The request originating from the internal IP address matches a weekly release cycle and a production release stage combination that is normally applicable for servicing the request. The debugging parameters within the request however require using an hourly release data instead of the weekly release data for serving the request. The matching engine first sends the request to a first instance of the server for example a production server that loads weekly release data. The production server cannot load hourly release data because they may not be stable enough for serving requests. The matching engine forwards the request from the production server to a second instance of the server for example a test server that is not exposed to production stage traffic and that may also load hourly release cycle in addition to weekly and daily release cycles. The test server serves the request and the production server relays the response from the test server back to the internal client that originated the request. This way even production sever can indirectly serve hourly release data. The debugging parameters within the request activate the request forwarding from one server instance to another server instance. Another example could include the debugging parameters forcing hourly release cycle test release stage and the matching engine forwarding the request from a test server that can load weekly release cycle to another test server that can load hourly release cycle. An obvious advantage of this request forwarding could be that all server instances i.e. alpha beta or production can use data from multiple release cycles i.e. hourly daily or weekly and can service requests regardless of a specific release dataset configured for the client device originating the requests.

In some instances the matching engine matches the debugging parameters identified within the request from a client device with a different combination of release cycle and release stage for testing and verification irrespective of whether the client device is expected to use a specific combination of release cycle and release stage. For example the matching engine determines that the request originating from the internal user within the entity includes debugging parameters that specify using an hourly release cycle and an alpha test release stage. The matching engine sends the request which would have normally been served using a production release stage and a weekly release cycle to a different instance of the server for example a test server that uses an alpha test release stage and an hourly release cycle. A response is generated by the test server and sent back to the client that originated the request. An advantage of overriding both the release stage and release cycle through the debugging parameters can be accelerated review of reported bugs by switching between different release cycles and or release stages and stabilizing the software implementing the online service hosted by the server .

In some instances the matching engine transmits the overriding combination of release cycle and release stage determined for the request to the rendering engine as the new applicable combination of release cycle and release stage. In some other instances the matching engine stores the new applicable combination of release cycle and release stage determined for the request in the storage device indexed against the request.

The rendering engine can be software including routines for generating a response for the request that includes graphical data. In some instances the rendering engine can be a set of instructions executable by the processor to provide the functionality described below for generating a response for the request. In some other instances the rendering engine can be stored in the memory of the server and can be accessible and executable by the processor . In either of the instances the rendering engine can be adapted for cooperation and communication with the processor the configuration data engine the matching engine and other components of the data release application via signal line .

In some instances the rendering engine receives the request transmitted by the controller . The rendering engine retrieves an up to date collection of release datasets including the base dataset relating to the configuration data from the storage device before servicing the request. For example the rendering engine retrieves a copy of the updated datasets including the base and the one or more release datasets. The rendering engine generates visual components on served web pages in response to the request using HTML JS and CSS that is returned to the client device based on the release datasets.

In some instances the rendering engine receives a combination of release cycle and release stage determined applicable for servicing the request from the matching engine . In some other instances the rendering engine receives an overriding combination of release cycle and release stage determined based on the debugging parameters included in the request from the matching engine . The rendering engine retrieves a release dataset from the collection of release datasets that corresponds to the combination of release cycle and release stage. For example the rendering engine retrieves a release dataset catering to a daily release cycle production release stage corresponding to the combination of daily release cycle and production release stage determined applicable for serving a request. In some instances the rendering engine generates a response for the request based on the release dataset retrieved. For example the rendering engine retrieves web pages of results matching a query on a web search service. The web pages including the results can be rendered based on the configuration data in the release dataset. In another example the rendering engine retrieves a map indicating a calculated distance to a destination matching a query on a web mapping service. The web page including the map can be rendered based on the configuration data in the release dataset.

In some instances the rendering engine generates graphical data to present a user interface to a server administrator to receive inputs relating to selecting release datasets assigned for one or more service front ends and or back ends. In some other instances the rendering engine generates graphical data for retrieved content based at least in part on instructions from the online service hosted by the server . For example the rendering engine generates graphical data for displaying electronic mail search results weather forecasts location history maps etc. The rendering engine sends the graphical data to an application e.g. a browser in the client device via the communication unit causing the application to display the data in a user interface. In some instances the rendering engine receives instructions from the matching engine to generate graphical data indicating types of release datasets that fail to retrieve properly for a server administrator to review.

Reference in the specification to some instances or an instance means that a particular feature structure or characteristic described in connection with the instance is included in at least some instances of the description. The appearances of the phrase in some instances in various places in the specification are not necessarily all referring to the same instance.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms for example processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present implementation of the specification also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium for example but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards flash memories including USB keys with non volatile memory or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The specification can take the form of an entirely hardware instance an entirely software instance or an instance containing both hardware and software elements. In a preferred implementation the specification is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the description can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

Finally the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the specification is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the specification as described herein.

The foregoing description of the instances of the specification has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the specification to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the disclosure be limited not by this detailed description but rather by the claims of this application. It should be understood that the specification may be implemented in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the specification or its features may have different names divisions and or formats. Furthermore the modules routines features attributes methodologies and other aspects of the disclosure can be implemented as software hardware firmware or any combination of the three. Also wherever a component an example of which is a module of the specification is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future. Additionally the disclosure is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure is intended to be illustrative but not limiting of the scope of the specification which is set forth in the following claims.

