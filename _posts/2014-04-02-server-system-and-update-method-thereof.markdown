---

title: Server system and update method thereof
abstract: A server system and an updating method of firmware are provided, and the updating method includes: acquiring a configuration file which includes firmware packet data which corresponds to a node in the server system; sending a notification signal to a web server of the node described in the configuration file; acquiring a version annotation and update package data in the configuration file according to the notification signal; storing the version annotation and the update package data to obtain file paths of the version annotation and the update package data; and selectively installing the update package data to the node according to internet protocol addresses of the file paths and the node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195451&OS=09195451&RS=09195451
owner: INVENTEC CORPORATION
number: 09195451
owner_city: Taipei
owner_country: TW
publication_date: 20140402
---
This non provisional application claims priority under 35 U.S.C. 119 a on Patent Application No s . 201310610617.0 filed in China on Nov. 26 2013 the entire contents of which are hereby incorporated by reference.

The disclosure relates to a server system and an updating method of firmware and more particularly to a server system and an updating method of firmware capable of automatically updating firmware of servers.

Because Internet allows computers to connect to each other a computer can exchange or assess data with another through a network. For example client ends can communicate with servers in a server system through a network.

Generally a server system has many nodes each of which can simultaneously operate multiple virtual machines so as to provide users with various independent work environments. Each node can be determined as an independent computer which has memories storage an operating capability and a networking function and thus operate its own OS. These nodes can communicate with and transmit data to each other through network equipment. After the server system is disposed with these nodes these nodes have to be set and arranged. That is each node has to be installed with its OS software package data and firmware packet data. Thereby the server system can operate and provide users with services.

However if a manufacturer provides a new version of a configuration file which has firmware packet data corresponding to one hardware in one node in the server system the server system will not automatically update the version of the firmware packet data of the node because can not automatically notify the nodes in the server system that this new version of the firmware packet data has been provided.

According to an embodiment of the disclosure an updating method of firmware adapted to a server system e.g. a container data center includes steps of acquiring a configuration file comprising firmware packet data corresponding to a node in the server system sending a notification signal to a web server of the node described in the configuration file acquiring a version annotation or called release note and an update package data in the configuration file according to the notification signal storing the version annotation and the update package data so as to obtain a file path of the version annotation and of the update package data and selectively installing the update package data in the node according to internet protocol address of the file path and the node.

In an embodiment of the updating method after the version annotation and the update package data are stored the aforementioned updating method further comprises acquiring identification information in the version annotation according to the internet protocol address of the file path and the node and the identification information at least comprising one of a firmware version and a product name.

In an embodiment of the updating method before the node is installed with the update package data according to the internet protocol address of the file path and the node the aforementioned updating method further comprises determining whether the configuration file is a newer version according to actual identification information of the identification information and the node and installing the update package data into the node when the configuration file is the newer version.

In an embodiment of the updating method after the configuration file is determined as the newer version the aforementioned updating method further comprises calculating and obtaining an update priority value corresponding to one piece of firmware of the node according to parameters of the node which comprise a severity of the update package data of the firmware of the node a quantity of firmware required to be updated in the node time and a network bandwidth for updating firmware and a pool load of the node recording the node into an update hash table determining whether update priority values of all of nodes recorded in the update hash table are larger than an update threshold sequentially recording and sorting the nodes whose the update priority values larger than the update threshold into an update queue table and installing the update package data into the nodes according to an order of the nodes in the update queue table.

In an embodiment of the updating method before whether the update priority values of all of the nodes in the update hash table are larger than the update threshold is determined the aforementioned updating method further comprises periodically adding a preset value to the update priority values of all of the nodes in the update hash table.

According to an embodiment of the disclosure a server system includes at least one node a load module for acquiring a configuration file which comprises firmware packet data which corresponds to one of the at least one node and sending a notification signal when acquiring the configuration file a first resident module for communicating with the load module and acquiring update package data and a version annotation from the configuration file according to the notification signal a first database for communicating with the first resident module and storing the version annotation and the update package data to obtain a file path of the version annotation and the update package data in the first database and a second resident module for communicating with the first resident module the first database and the at least one node and selectively installing the update package data into the node according to an internet protocol address of the file path and of one of the at least one node.

In an embodiment of the server system the aforementioned server system further includes a second database for communicating with the second resident module and storing identification information in the version annotation. The identification information is obtained according to the internet protocol address of the file path and of the node and at least comprises one of a firmware version and a product name.

In an embodiment of the server system the aforementioned second resident module further determines whether the configuration file is a newer version according to actual identification information of the identification information and the node in the second database and when the configuration file is the newer version installs the update package data into the node.

In an embodiment of the server system when the configuration file is the newer version the aforementioned second resident module according to parameters of the node further calculates and obtains an update priority value corresponds to one piece of firmware of the node records the node into an update hash table determines whether the update priority values of all of the nodes recorded in the update hash table are larger than an update threshold sequentially records and sorts the nodes whose update priority values larger than the update threshold in an update queue table and installs the update package data in the nodes according to an order of the nodes recorded in the update queue table. The parameters include a severity of the update package data of all pieces of the firmware of the node a quantity of the firmware of the node required to be updated time and a network bandwidth of updating the firmware and a pool load of the node.

In an embodiment of the server system before determining whether the update priority values of all of the nodes recorded in the update hash table are larger than the update threshold the aforementioned second resident module further periodically adds a preset value to the update priority values of all of the nodes recorded the update hash table.

In the following detailed description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the disclosed embodiments. It will be apparent however that one or more embodiments may be practiced without these specific details. In other instances well known structures and devices are schematically shown in order to simplify the drawing.

The load module acquires a configuration file i.e. an allocate file and when acquiring the configuration file sends a notification signal to a web server in the first resident module . The configuration file includes firmware packet data corresponding to the node n. In particular embodiment the load module can be a command line interface CLI tool i.e. a command line tool and the extension i.e. a filename extension and a name suffix can be .json or .yaml. The load module can also send an update notification to a mailbox of an email address through a simple mail transfer protocol SMTP server according to the configuration file and the SMTP server and the email address are associated with the node n whose firmware is required to be updated.

Generally the configuration file includes firmware type information firmware version information a product name an internet protocol IP address of the SMTP server email addresses uniform resource locators URLs of version annotations release notes URLs of update package data release package data a copy protocol an URL of an web server and an authentication. For example the product name can be a universally unique identifier UUID or a combination of a manufacturers name and a product name. For example the type of firmware can be a basic input output system BIOS type a baseboard management controller BMC type a redundant array of independent disks RAID type a hypertext transfer protocol HTTP type a file transfer protocol FTP type or a secure shell SSH protocol type. For example the filename extension of the version annotation can be .json and the filename extension of the update package data can be .zip. 

Moreover the notification signal includes a copy protocol an identifier a URL of version annotation and a URL of update package data. The identifier and the copy protocol can be used for acquiring the version annotation according to the URL of version annotation and acquiring the update package data according to the URL of update package data.

The first resident module acquires version annotation and update package data from the configuration file according to the notification signal. Specifically the first resident module acquires the version annotation and the update package data in the configuration file according to the copy protocol identifier URL of version annotation and URL of update package data in the notification signal. In a particular embodiment the first resident module includes an operations OPS web server with a RESTful Web service and the demons for acquiring the notification signal and the demons can provide API through a TCP socket method or an UDP socket method. Generally the update package data includes a firmware image a firmware update program and an update script file for the firmware updating.

The first database stores the version annotation and the update package data acquired by the first resident module and obtains a file path of the version annotation and of the update package data in the first database . The second database stores the identification information of the version annotation and the identification information is obtained according to the file path and the IP address of the node n. In a particular embodiment the identification information at least includes one of the firmware version and the product name in the configuration file. In a particular embodiment the product name of each of physical machines in the node n can be represented by a 16 bytes universally unique identifier UUID or by a combination of its product name and manufacturer name so that these product names of physical machines can be unique.

Moreover the identification information further includes the update attribute of the node n and the update attribute is used for specifying the node n to be update its firmware by using a live CD i.e. a live disk or an operating system OS and specifying whether the node n should be rebooted after the firmware of the node n is updated. For example the node n has to be rebooted after the firmware of the BIOS or RAID of the node n is updated but does not need to be rebooted after the firmware of the BMC is updated. Furthermore the update attribute can specify the severity of the update package data.

The live CD is a complete bootable computer installation including an OS which runs in a computer s memory rather than loading from a hard disk drive. More particularly whenever the node n boots by using the live CD an ISO stored in the live CD will be decompressed and stored in a random access memory RAM in the node n so as to establish an executable environment in the RAM. After being rebooted the node n then returns to its original OS.

The second resident module selectively installs the update package data in the node n according to the internet protocol addresses of the file path and the node n. Specifically the second resident module determines whether the configuration file is a newer version according to the actual identification information of the identification information and the node n in the second database . When the configuration file is a newer version the second resident module installs the update package data in the node n at suitable timing and the suitable timing can be defined according to particular requirements. In a particular embodiment in order to protect the original setting of the firmware to be changed when the node n performs the update script file in the update package data to update its firmware the configuration data area of a flash ROM storing the original setting data of the firmware will not be updated or formatted. In other words the original setting data of the firmware of the node n will be maintained in the configuration data area of the flash ROM.

In an embodiment the second resident module further determines whether the node n in the server system is sensed at first time. When the node n is sensed at first time the second resident module will store information e.g. the firmware versions of the physical machines and the product name in the node n about the node n into the second database .

Therefore when determining that the configuration file is a newer version second resident module can further acquire multiple parameters of the node n according to the identification information stored in the second database and then calculate and obtain an update priority value according to the parameters. The update priority value corresponds to the firmware of one physical machine in the node n. The parameters include for example a severity of the update package data of all pieces of the firmware of the node n a quantity of the firmware required to be updated in the node n the time and network bandwidth for updating the firmware and a pool load of the node n.

In an embodiment the higher the severity of the update package data is the larger the update priority value is. For example while the severity is the highest the update priority value is 90 while the severity is middle the update priority value is 60 and while the severity is minimum the update priority value is 0. In an embodiment the larger the quantity of the firmware required to be updated is the larger the update priority value is. For example whenever the firmware of one physical machine is updated the update priority value will be added with 10. In an embodiment the longer the time for updating the firmware is the less the update priority value is. For example while the time for updating the firmware is very long the update priority value is 0. In an embodiment the wider the bandwidth for updating the firmware is the less the update priority value is. For example while the bandwidth for updating the firmware arrives at its maximum the update priority value is 0. In an embodiment the larger the pool load of the node n is the less the update priority value is. For example while the pool load of the node n arrives at its maximum the update priority value is 0. Assume that there are only two pieces of firmware required to be updated in the node n the severity of the configuration file corresponding to the two pieces of firmware is maximum and the time network bandwidth and pool load for updating the firmware arrive at their maximum. The update priority value herein is the sum of 20 and 90.

Then the second resident module records the node n into an update hash table determines whether the update priority values of all of nodes recorded in the update hash table are larger than an update threshold and sorts and records the nodes whose update priority value larger than the update threshold into an update queue table. For example if the update priority value of the node n is the sum of 20 and 90 and the update threshold is 90 this node n will be recorded into the update queue table. Thereby the second resident module can install the update package data into the nodes according an order of the nodes recorded in the update queue table. In an embodiment the nodes are installed with the update package data one by one or a batch by a batch.

On the other hand before determining whether the update priority values of all of the nodes recorded in the update hash table are larger than the update threshold the second resident module can periodically adds a preset value to the update priority values of all of the nodes recorded in the update hash table. For example the second resident module adds 1 to the update priority values of all of the nodes recorded in the update hash table once every 30 minutes. Therefore the nodes recorded in the update hash table can be protected from missing the installing of the update package data because the update priority value is too small.

In an embodiment when attempting to install the update package data into one physical machine in the node n the second resident module can determine whether to perform the updating procedure on this physical machine by using the live CD according to the update attribute of the identification information.

In one hand if the second resident module determines that this physical machine has to be updated by using the live CD the second resident module will remove a virtual machine corresponding to this physical machine command the cloud not to use this physical machine set this physical machine to be a preboot execution environment PXE for the live CD and reboot this physical machine. Thus the update package data can be installed or copied to this physical machine. Then this physical machine decompresses the update package data to obtain an update script file and performs the update script file to update the firmware of this physical machine. After the firmware of this physical machine is updated the second resident module sets this physical machine to be a PXE for a local HDD and notifies the cloud that this physical machine is available after rebooting this physical machine.

In the other hand if the second resident module determines that this physical machine has to be updated by using the OS the second resident module will directly install or copy the update package data to this physical machine. Then this physical machine decompresses the update package data in the OS to obtain an update script file and performs the update script file to update the firmware of this physical machine. After the firmware of this physical machine is updated the node n determines whether to reboot this physical machine according to the type of this physical machine. For example if this physical machine is a RAID the RAID has to be rebooted and if this physical machine is a BMC the BMC does not need to be rebooted.

As shown in step S the load module acquires the configuration file which includes the firmware packet data corresponding to the node n. As shown in step S the load module sends a notification signal to a web server of the node n described in the configuration file. As shown in step S the first resident module acquires the version annotation and the update package data from the configuration file according to the notification signal. As shown in step S the first database stores the version annotation and the update package data acquired by the first resident module to obtain a file path of the version annotation and of the update package data in the first database . As shown in step S the second resident module selectively installs the update package data to the node n according to the file paths in the first database and the IP address of the node n.

As shown in step S the second resident module acquires the identification information in the version annotation according to the file path and the IP address of the node n obtained in step S after the first database stores the version annotation and the update package data S . This identification information at least includes one of a firmware version and a product name. As shown in step S the second resident module determines whether the configuration file is a newer version i.e. the firmware version of the node n is newer than the firmware version in the configuration file according to the actual identification information of the identification information and the node n. If the configuration file is not a newer version the updating method returns to step S. If the configuration file is a newer version the second resident module installs the update package data to the node n as shown in step S.

As shown in step S the second resident module records the node n into an update hash table. As shown in step S the second resident module determines whether the update priority values of all of nodes recorded in the update hash table are larger than an update threshold and the nodes whose update priority values are larger than the update threshold are sorted and recorded into an update queue table. As shown in step S the second resident module installs the package data in the nodes according to an order of the nodes recorded in the update queue table.

In view of the above description the disclosure providing a server system and an updating method of firmware can automatically notify the servers nodes in the server system when a certain version of a configuration file of one node is released and can determine whether the version of the configuration file is newer than a current version of the node according to the version annotation and the update package data in the configuration file so as to selectively install the update package data to the node. Moreover the disclosure can also sort an order of the nodes in the update queue table to be updated according to the update priority values of the nodes and the update priority value can dynamically be adjusted. Therefore the disclosure can be applicative to a cloud OS based on OpenStack and crowbar so as to increase its practicality.

