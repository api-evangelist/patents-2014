---

title: Remote contextual access to operating system desktops
abstract: Methods, systems, and techniques for remote contextual access to an operating system desktop are provided. Example embodiments provide a desktop state agent the harvests information from a user's desktop regarding state of various objects such as open documents, recent documents, links, shared links, bookmarks, upcoming events, and/or recent emails. The harvested information is translated to html or other web browser recognized language where possible and uploaded to be accessible to a web server configured to respond to requests for desktop state using a web address. In one embodiment, the RCAS allows access to a user's desktop transparentlyâ€”without the user needing to take explicit action. Further, a remote mobile device can render the desktop data without using a session or connection to the user's desktop machine and without use of a remote desktop protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09363305&OS=09363305&RS=09363305
owner: VMware, Inc.
number: 09363305
owner_city: Palo Alto
owner_country: US
publication_date: 20140130
---
The present disclosure relates to methods techniques and systems for providing access to an operating system desktop executing remotely and in particular to methods techniques and systems for providing access from a mobile device to contextual information harvested from a running Windows operating system desktop.

In many scenarios mobile device platforms pose problems for presenting comprehensive and powerful user interfaces due to factors such as smaller display real estate less powerful processing power intermittent access to networks and the like. Today s workforce often needs to access files documents and various information regardless of where the worker is currently located. For example a company employee may work some of the time on a laptop or desktop computer system in the office travel home while still accessing email from for example a tablet or smartphone and then want to resume work when she arrives home using for example a different mobile or wired device.

Different solutions have been suggested to address such problems. For example special user interfaces have been developed with particularized applications that are meant to run more smoothly on mobile potentially smaller footprint devices. These interfaces which are native to the mobile device may run efficiently but they do not guarantee access to all of the types of data that the employee may need.

As another example centrally managed desktops and software infrastructure along with virtualization have proliferated as a mechanism for enabling people of large and small organizations to be guaranteed access to their data from anywhere. Further dedicated stateful sessions that use remote desktop protocols such as Remote Desktop Protocol RDP Virtual Network Computing VNC or PCoIP PC over IP enable workers to essentially log in to their desktops remotely. Use of these protocols to access a physical desktop as opposed to a virtual desktop require the computer hosting the desktop to remain powered on.

Similar virtualization protocols have also been employed to access users virtual desktops. A virtual desktop is a virtual computing system hosted typically by a virtualization infrastructure provided by a datacenter that operates as a desktop or workstation computer that an end user can interact with using the remote desktop protocol and client software and or hardware. The client software and or hardware transmits user input such as keyboard or mouse input to the remote system to be processed there and receives display and other data such as sound for presentation to the user. One problem with the use of remote desktop protocol and session access to a user s virtual desktop on a mobile device is that the interface is often too cumbersome for the small real estate supported by a mobile device and or the latency for obtaining data is in some situations too much to be tolerable. Moreover users in the office would likely prefer to use their desktops in native mode that is without needing to be virtualized if nothing else to achieve speed advantages.

To address some of these problems applications such as Dropbox have been developed to provide anywhere access cloud storage to effectively transport files in a web accessible folder. All such files must be explicitly placed in a Dropbox folder by the user in order to be made available to another device or at another time. An advantage to such solutions is that it allows a mobile device to use cloud storage as opposed to local storage on the device for interchange of files between devices.

Other enhancements to this basic notion of web based or cloud storage have been developed. One such enhancement is offered by VMware s Mirage product. VMware Mirage provides a File Portal to a user s desktop computing environment. are illustrative screen displays from a VMware Mirage File Portal. A web browser can be used on any remote client device for example a mobile device to access a list of the directories and their contents that are present on the user s desktop computer for example in her office as long as the user s computer is centrally managed. The user s Window s desktop directory is shown as a folder within the file system present on the user s device. shows a view of the user s desktop directory which contains a listing of all of the files and subdirectories contained on the user s computer. Thus the VMware Mirage File Portal provides an extended view of the file system on the user s computer rather than the single directory visible using Dropbox.

Solutions that have gone beyond the use of a remote desktop protocol however do nothing to help a user maintain context from using one device to the next.

Embodiments described herein provide enhanced computer and network based methods systems and techniques for providing contextual access to a MICROSOFT WINDOWS or other operating system desktop user interface executing remotely without the overhead or use of stateful connections that use remote desktop protocols to maintain state information about the desktop to which the user is connected. Example embodiments provide a Remote Contextual Access System RCAS which enables users to view what they are presently doing on a desktop of their physical computing machines from remote devices such as mobile phones laptops or tablets without the overhead of establishing a remote session or connection e.g. without use of a remoting protocol to connect to the machine running the desktop and without the need to represent the high resolution of a desktop on a lower resolution device such as a mobile device. In addition the RCAS enables users to use facilities available on the mobile device such as a touch user interface with versions of a desktop not designed to take advantage of or understand those facilities. Here use of the word desktop refers to a user interface UI associated with an operating system running on the user s physical computer. Today s desktop UIs are typically graphical UIs or GUI s . Throughout example embodiments of a RCAS will be described with reference to a MICROSOFT WINDOWS operating system desktop and may be referred to simply as the desktop or WINDOWS desktop. One could modify the techniques provided here to work with desktops of other graphical user interfaces and other operating systems providing tools exist or could be developed to translate state information as described further herein to a format immediately accessible to an off the shelf web browser e.g. HTML . For the purpose of simplification the machine the user is using to execute the desktop she wishes to proliferate to mobile devices is referred to herein simply as the user s desktop machine although there may be more than one such desktop in use.

The RCAS provides a process by which continual or periodic snapshots of state information of a user s desktop are stored in a central server by an agent running on the user s desktop machine. The purpose being to resurrect the context of the items being presented or used on the user s desktop on a remote mobile device without requiring any kind of direct connection or session e.g. without use of a remoting protocol to connect from the remote mobile device to the user s desktop machine simply using a native browser available via a web connection on the remote mobile device.

A remote mobile device may include any type of device capable of operating in a wire free environment including for example a cell phone a smart phone a tablet a laptop and the like. A native browser refers to a web browser capable of rendering html and may also be referred to as a standard browser or an off the shelf browser.

To provide this remote contextual capability an agent e.g. program code logic task thread etc. running on the user s desktop machine uploads e.g. harvests determines captures etc. state information regarding the state of the user s desktop executing of the desktop machine to a central server. This information may be uploaded on a predetermined basis continually periodically frequently at intervals or by any measure that may be specifiable or configurable. The agent uses tools to translate some of the captured information to a format native to a web browser e.g. html so that a receiving browser can render the user s desktop without further processing. In some embodiments the operating system and various application tools provide translation tools to capture and translate objects on the user s desktop for later web accessible mobile access. In other embodiments the translation of the content may be performed on the central server after it has been uploaded by the agent.

In addition in other embodiments the agent uses tools to translate the information to any format capable of being displayed by a receiving application running on a mobile device. For example mobile devices running an iOS or Android operating system may support native applications that can similarly display remote context as described herein.

In one embodiment the types of context that are harvested captured mined determined and the like include open documents such as MICROSOFT OFFICE word processing documents spreadsheets presentations and the like links links and documents shared from other users recent and currently active documents web browser history and bookmarks calendared events contacts email and the like. In essence any object that is translatable into html using Microsoft Office API Mail API MAPI or other APIs may be captured.

As currently rendered the desktop tab contains a list of all of the open documents on the user s desktop running on the user s desktop machine e.g. machine in . List contains a list of all of these open documents as links . When the user selects one of these links in list a new desktop tab is opened with the content of that document. For example if a user selects the state machine.xls link from list then the UI presented in is displayed. Note as well that the desktop tab whose contents are being featured is emphasized in some form for example here a highlight on the background of tab .

In the desktop tab for viewing the contents of spreadsheet called State Machine.xls is displayed as a currently selected tab the background of the tab is highlighted . Of note the background of the open documents tab has ceased to be emphasized as it is no longer the currently selected tab.

Other user interfaces for rendering the html state of the current documents links and bookmarks on the user s desktop would be appropriate.

Although the techniques of RCAS are generally applicable to any type of desktop or browser the phrase standard browser is used generally to imply any type of web browser that is not explicitly modified to understand any intricacies of the user s desktop it is only programmed to render html or other format language . In addition as mentioned the techniques of RCAS are also applicable to other applications native to a mobile device that are not modified to understand any intricacies of the user s desktop only programmed to render html or other format language utilized by the RCAS to make a user s desktop accessible on the mobile device. Also although certain terms are used primarily herein other terms could be used interchangeably to yield equivalent embodiments and examples. In addition terms may have alternate spellings which may or may not be explicitly mentioned and all such variations of terms are intended to be included.

Example embodiments described herein provide applications tools data structures and other support to implement a Remote Contextual Access System to be used for providing remote mobile access to a user s Windows operating system desktop without using a remoting protocol such as RDP or PCoIP. Other embodiments of the described techniques may be used for other purposes. In the following description numerous specific details are set forth such as data formats and code sequences etc. in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein or with other specific details such as changes with respect to the ordering of the logic different logic etc. Thus the scope of the techniques and or functions described are not limited by the particular order selection or decomposition of aspects described with reference to any particular routine module component and the like

In block when the triggering event occurs the desktop state agent logic proceeds to harvest and record different types of information. Specifically in block the logic records recently used documents and converts each to html. In block the logic records currently open documents and converts each to html again in some embodiments the translation may be performed at the central server end . In block for each known browser available on the user s desktop machine the logic records the browser history and bookmarks. In block the logic records shared links and documents received from other users. In block the logic collects copies of recent email messages and upcoming events from a user s calendar and converts each to html. Other types of desktop information may also be harvested such as saved passwords e.g. for websites content of open desktop windows printer configurations files from network shares in addition to those local to the desktop contacts and the like. Other information such as any desktop resource that is part of a user s desktop even if not explicitly mentioned here may also be harvested. In one example RCAS these tasks are performed using Microsoft s MAPI or Microsoft Office API and or tools.

After all of the harvesting and translating to html is done the logic uploads the translated data and the harvested data not yet translated to a central server such as server of .

Specifically in block the logic determines whether it has received an event to process and if so continues in block otherwise waits for an event. In block the logic determines whether a request for a desktop portal page has been received for example from a mobile device and if so continues in block otherwise continues in block . In block the logic forwards an html page with UI and links to documents in html format with the logic to control the UI being rendered e.g. the desktop tab interface shown in .

In block the logic determines whether it has received a request for a particular document or link and if so continues in block otherwise continues in block . In block the logic forwards the html equivalent translated version of the requested document event or link etc. for rendering by the client.

In block the logic determines whether there is some other type of server event to process and if so continues in block to process the other event otherwise returns to the beginning of the logic in block to wait until the next event occurs.

Different logic can be equivalently implemented to produce a RCAS that operates in the manners described herein.

The computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover the various blocks of the Remote Contextual Access System may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown computer system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. keyboard mouse CRT or LCD display etc. other computer readable media and one or more network connections . The RCAS is shown residing in memory . In other embodiments some portion of the contents some of or all of the components of the RCAS may be stored on and or transmitted over the other computer readable media . The components of the Remote Contextual Access System preferably execute on one or more CPUs and manage the generation and use of desktop state information as described herein. Other code or programs and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . Of note one or more of the components in Figure Y may not be present in any specific implementation. For example some embodiments embedded in other software may not provide means for user input or display.

In a typical embodiment the RCAS includes one or more browser recordation logic one or more application recordation logic e.g. MICROSOFT OFFICE recordation logic email recordation logic and HTML conversion logic . In at least some embodiments the some of the components are provided external to the RCAS and are available potentially over one or more networks . Other and or different modules may be implemented. In addition the RCAS may interact via a network with application or client code that uses information or translations computed by the RCAS one or more client computing systems and or one or more third party information provide systems . Also of note the desktop state data repository is typically stored on the central server hence shown in dashed lines but may be provided external to the client side RCAS as well for example in a knowledge base accessible over one or more networks . The data repository may also store temporary state information locally before it is translated or uploaded to the server.

In an example embodiment components modules of the RCAS are implemented using standard programming techniques. For example the RCAS may be implemented as a native executable running on the CPU along with one or more static or dynamic libraries. In other embodiments the RCAS may be implemented as instructions processed by a virtual machine. A range of programming languages known in the art may be employed for implementing such example embodiments including representative implementations of various programming language paradigms including but not limited to object oriented functional procedural scripting and declarative.

The embodiments described above may also use well known or proprietary synchronous or asynchronous client server computing techniques. Also the various components may be implemented using more monolithic programming techniques for example as an executable running on a single CPU computer system or alternatively decomposed using a variety of structuring techniques known in the art including but not limited to multiprogramming multithreading client server or peer to peer running on one or more computer systems each having one or more CPUs. Some embodiments may execute concurrently and asynchronously and communicate using message passing techniques. Equivalent synchronous embodiments are also supported.

In addition programming interfaces to the data stored as part of the RCAS e.g. in the data repositories can be available by standard mechanisms such as through C C C and Java APIs libraries for accessing files databases or other data repositories through scripting languages such as XML or through Web servers FTP servers or other types of servers providing access to stored data. The data repository may be implemented as one or more database systems file systems or any other technique for storing such information or any combination of the above including implementations using distributed computing techniques.

Also the example RCAS may be implemented in a distributed environment comprising multiple even heterogeneous computer systems and networks. Different configurations and locations of programs and data are contemplated for use with techniques of described herein. Also one or more of the modules may themselves be distributed pooled or otherwise grouped such as for load balancing reliability or security reasons. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP IP sockets RPC RMI HTTP Web Services XML RPC JAX RPC SOAP etc. and the like. Other variations are possible. Also other functionality could be provided by each component module or existing functionality could be distributed amongst the components modules in different ways yet still achieve the functions of an RCAS.

Furthermore in some embodiments some or all of the components of the RCAS may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs and the like. Some or all of the system components and or data structures may also be stored as contents e.g. as executable or other machine readable software instructions or structured data on a computer readable medium e.g. a hard disk memory network other computer readable medium or other portable media article to be read by an appropriate drive or via an appropriate connection such as a DVD or flash memory device to enable the computer readable medium to execute or otherwise use or provide the contents to perform at least some of the described techniques. Some or all of the components and or data structures may be stored on tangible non transitory storage mediums. Some or all of the system components and data structures may also be stored as data signals e.g. by being encoded as part of a carrier wave or included as part of an analog or digital propagated signal on a variety of computer readable transmission mediums which are then transmitted including across wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of this disclosure may be practiced with other computer system configurations.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the present disclosure. For example the methods and systems for performing contextual access discussed herein are applicable to other architectures other than a WINDOWS or iOS operating system architecture. Also the methods and systems discussed herein are applicable to differing protocols communication media optical wireless cable etc. and devices such as wireless handsets electronic organizers personal digital assistants tablets portable email machines game machines pagers navigation devices such as GPS receivers etc. 

