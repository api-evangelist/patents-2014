---

title: RDMA to streaming protocol driver
abstract: Mechanisms for providing data streams are disclosed. A device accesses a mapping stored at the device that maps a desired media content item to a source address and to a range of addresses in a storage device of a remote content distribution server allocated to the desired media content item. The device preforms a direct memory-to-memory transfer of the desired media content item from the remote content distribution server to a local memory of the device using the range of addresses. The device encapsulates the desired media content item from the local memory into a plurality of packets according to a streaming protocol. Encapsulating the desired media content item includes inserting into each of the plurality of packets the source address. The plurality of packets are streamed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09112889&OS=09112889&RS=09112889
owner: Qurio Holdings, Inc.
number: 09112889
owner_city: Raleigh
owner_country: US
publication_date: 20140623
---
This application is a continuation of co pending U.S. patent application Ser. No. 11 961 632 filed on Dec. 20 2007 entitled RDMA TO STREAMING PROTOCOL DRIVER which is hereby incorporated herein by reference in its entirety.

Commonly owned and assigned U.S. patent application Ser. No. 11 831 228 entitled RDMA BASED REAL TIME VIDEO CLIENT PLAYBACK ARCHITECTURE which was filed on Jul. 31 2007 and is hereby incorporated herein by reference in its entirety discloses an architecture for a client playback device that utilizes Remote Direct Memory Access RDMA or some other similar direct memory to memory transfer scheme to transfer media content and or targeted advertisements from a remote server to the client playback device. One issue is that a playback function of the client playback device may be a standard streaming protocol playback function such as for example a User Datagram Protocol UDP based or Real time Transport Protocol RTP based streaming playback function. In other words the playback function may be capable of performing playback of media content in a streaming format rather than an RDMA format. Thus there is a need for a system and method that enable playback of media content obtained utilizing RDMA or similar direct memory to memory transfers by a streaming playback function.

The present invention provides a direct memory to memory to streaming protocol driver for a media content playback system. In one embodiment the direct memory to memory to streaming protocol driver is a Remote Direct Memory Access RDMA to streaming protocol driver. In general the RDMA to streaming protocol driver utilizes an RDMA enabled network interface to obtain media content from a remote content distribution server. In order to emulate a streaming protocol layer of a network stack such as for example the User Datagram Protocol UDP the RDMA to streaming protocol driver encapsulates the media content according to the streaming protocol to provide streaming media content. The streaming media content is then provided to an associated streaming protocol based playback function.

Those skilled in the art will appreciate the scope of the present invention and realize additional aspects thereof after reading the following detailed description of the preferred embodiments in association with the accompanying drawing figures.

The embodiments set forth below represent the necessary information to enable those skilled in the art to practice the invention and illustrate the best mode of practicing the invention. Upon reading the following description in light of the accompanying drawing figures those skilled in the art will understand the concepts of the invention and will recognize applications of these concepts not particularly addressed herein. It should be understood that these concepts and applications fall within the scope of the disclosure and the accompanying claims.

The system includes a RDMA enabled content distribution server which is hereinafter referred to as content distribution server communicatively coupled to the STBs through N via a network . Note that while only one content distribution server is illustrated for clarity and ease of discussion the system may include any number of one or more content distribution servers . The network may be any type of Wide Area Network WAN Local Area Network LAN or the like or any combination thereof. In addition the network may include wired components wireless components or both wired and wireless components. In one embodiment the content distribution server is a headend or is part of a headend in a Cable Television CATV distribution network supporting Data Over Cable Service Interface Specifications DOCSIS 3.0 or similar specification. The network may be or include a Hybrid Fiber Coax HFC delivery network utilizing Quadrature Amplitude Modulation QAM where Switched Digital Video SDV circuits may be used to transport Internet Protocol IP traffic to the STBs through N.

The content distribution server generally hosts media content such as for example broadcast television content Video on Demand VOD content broadcast radio content advertisements or the like or any combination thereof. As discussed below RDMA may be used to transfer media content from the content distribution server to the STBs through N. Depending on the implementation of the network iWARP RDMA over Ethernet RoE InfiniBand IB or the like may be used to carry the RDMA traffic. For more information regarding an exemplary embodiment of the content distribution server the interested reader is directed to commonly owned and assigned U.S. patent application Ser. No. 11 831 228 entitled RDMA BASED REAL TIME VIDEO CLIENT PLAYBACK ARCHITECTURE which was filed on Jul. 31 2007 and is hereby incorporated herein by reference in its entirety. The interested reader is also directed to commonly owned and assigned U.S. patent application Ser. No. 11 685 479 entitled LATE BINDING OF ADVERTISEMENTS USING RDMA CONNECTIVITY which was filed on Mar. 13 2007 and is hereby incorporated herein by reference in its entirety.

In one embodiment the content distribution server publishes a mapping to the STBs through N. The mapping generally includes metadata describing each of a number of media content items available from the content distribution server RDMA address ranges in a high speed storage device of the content distribution server allocated to the media content items and source address information for the media content items. The media content items may be broadcast television channels VOD content items such as movies or television programs broadcast radio stations advertisements or advertisement categories or the like. Note that the content distribution server may rotate data into and out of the allocated address ranges in the high speed storage device as needed in order to serve the content items. The high speed storage device may be for example one or more Random Access Memory RAM disks or the like. The metadata describing the media content items may be for example titles of the media content items genres of the media content items release dates of the media content items a textual description of the media content items or the like or any combination thereof. As discussed below the source information is also referred to as pseudo source addresses for the media content items. The pseudo source addresses may be for example a combination of IP source addresses and UDP source ports that trigger operation of the RDMA to UDP streaming drivers through N and further enable the RDMA to UDP streaming drivers through N to emulate a UDP protocol layer.

In addition the mapping may include information such as for example format specification information on encapsulation within RDMA. More specifically the format specification information may confirm or identify how the media content is packaged within the RDMA address space. For example the media content may be packaged within the RDMA address space according to the Real time Transport Protocol RTP . In addition the format specification information may identify a video compression scheme used for the media content items. For example the media content items may be compressed according to the H.264 MPEG 4 Part 10 or MPEG 2 standard. The mapping may also identify whether the media content items are fully stored within the associated RDMA address ranges or are buffered within the associated RDMA address ranges. For example if video content from a broadcast television channel is buffered into a corresponding RDMA address range the content distribution server rotates new content into the RDMA address range. As such when playback of the broadcast television channel is desired the RDMA to UDP streaming drivers through N perform multiple RDMA transfers to obtain content as the content is rotated into the RDMA address range.

The STB includes a network interface and a streaming playback function . The RDMA to UDP streaming driver is implemented within the network interface . In one embodiment the network interface including the RDMA to UDP streaming driver is implemented in hardware. However the present invention is not limited thereto. The RDMA to UDP streaming driver may alternatively be implemented in software or a combination of hardware and software. Note that while only one RDMA to UDP streaming driver N is illustrated per STB N the present invention is not limited thereto. The RDMA to UDP streaming driver N may be replicated to provide multiple streaming feeds. Alternatively the RDMA to UDP streaming driver N may be capable of processing multiple streaming feeds where a separate buffer or segment of a buffer associated with the RDMA to UDP streaming driver N may be allocated to each of the streaming feeds.

The streaming playback function may be implemented in software hardware or a combination thereof. In this example the streaming playback function is a UDP based playback function an RTP based playback function where UDP is utilized to transport the RTP traffic or the like. As discussed below with respect to the streaming playback function the RDMA to UDP streaming driver emulates a UDP protocol stack such that underlying RDMA transfers of desired media content items from the content distribution server are transparent to the streaming playback function .

Like the STB the other STBs through N include network interfaces through N and streaming playback function through N. Again the RDMA to UDP streaming drivers through N are implemented in the network interfaces through N.

The RDMA enabled offload engine is preferably implemented in hardware and operates to implement Layers 2 through 4 of the protocol stack. The RDMA enabled offload engine is enabled to perform RDMA transfers from the content distribution server to memory associated with the RDMA to UDP streaming driver utilizing iWARP RoE IB or the like. In addition the RDMA enabled offload engine may provide other types of connectivity such as for example UDP connectivity TCP connectivity or the like. In other words the RDMA enabled offload engine is not limited to RDMA transfers. For example television content or VOD content may be streamed to the STB utilizing RTP and targeted advertisements for insertion into the television or VOD content may be obtained utilizing RDMA. The RDMA enabled offload engine may therefore support RTP or at least the transmission control protocol TCP or UDP layer used to carry the RTP traffic as well as RDMA. Note that for content that is already in a streaming protocol format the RDMA to UDP streaming driver may be bypassed or operate in a pass through mode.

As discussed below the RDMA to UDP streaming driver operates to issue RDMA transfer requests to the RDMA enabled offload engine for desired media content items. As a result the media content items are provided directly to memory associated with the RDMA to UDP streaming driver . The RDMA to UDP streaming driver converts the desired media content items from the RDMA format or protocol to the UDP format or protocol and provides the converted media content items to the video processing function as streaming media content items. The RDMA to UDP streaming driver emulates a UDP layer with respect to the video processing function such that the RDMA transfers that are utilized to transfer the desired media content items to the STB are transparent to the video processing function . The video processing function may perform functions such as decryption and decoding.

In this embodiment after processing by the video processing function the media content items are provided to the playback and overlay insertion function and optionally storage . The storage may be for example a hard disk drive and may be used to provide Digital Video Recorder DVR functionality or the like. The playback and overlay insertion function is controlled by a control system to select either the output of the video processing function or the storage and optionally insert a desired overlay onto the selected media content. The output of the playback and overlay insertion function is then provided to the A V interface for output to an associated display and or sound system.

The control system includes a playback application a session management application and a cross layer application each of which is preferably implemented in software but may alternatively be implemented in hardware or a combination of hardware and software. Together with the video processing function and the playback and overlay insertion function the playback application forms the streaming playback function of . The playback application generally operates to enable selection of media content for playback and control playback of the selected media content based on user input from one or more associated viewers. The user input may be for example the selection of a desired media content item from a listing or menu of media content items available from the content distribution server or input related to the control of playback such as pause rewind fast forward or the like.

The session management application operates to obtain the mappings from the content distribution server for the available media content items. As discussed above the mappings include metadata describing the media content items the RDMA address ranges for the media content items and pseudo source addresses for the media content items. In addition the mappings may include format specific information identifying how the content is packaged within the RDMA address space and the protocol used for video compression. When a media content item is selected for playback the playback application sends a request including a pseudo source address for the media content item to the session management application . In response if the pseudo source address is one of the pseudo source addresses from the mappings from the content distribution server the session management application interacts with the cross layer application to trigger the RDMA to UDP streaming driver . In addition the session management application provisions the video processing function for the playback session by providing the pseudo source address and a pseudo destination address or alternatively the UDP source port and a UDP destination port to the video processing function for the playback session. As discussed below the same pseudo source and destination addresses or alternatively the same UDP source and destination ports are thereafter used by the RDMA to UDP streaming driver in order to spoof the video processing function such that the underlying RDMA transfers are transparent to the video processing function .

The cross layer application provides parameters to the RDMA to UDP streaming driver and enables monitoring of the RDMA to UDP streaming driver by for example the session management application and or the playback application . More specifically in one embodiment the cross layer application provides appropriate Application Programming Interfaces APIs for provisioning and monitoring the RDMA to UDP streaming driver . The APIs may include one or more APIs for providing parameters to the RDMA to UDP streaming driver such as an IP source address a UDP source port an IP destination address a UDP destination port a RDMA starting address a RDMA ending address and a content storage type such as complete or buffered. The APIs may also include one or more APIs for monitoring a status of a buffer or memory associated with the RDMA to UDP streaming driver and or RDMA transfer status.

Data received in response to RDMA transfer requests issued by the RDMA block transfer function is temporarily stored or buffered in the buffer . As discussed below a status of the buffer is provided to the RDMA block transfer function and used to determine an optimal block transfer size when issuing RDMA transfer requests. The buffer status may also be provided to the UDP encapsulation function in order to notify the UDP encapsulation function when data is available in the buffer . In addition the buffer status may be provided to the cross layer application for monitoring purposes. The buffer status may be for example a percentage of the buffer that is used a percentage of the buffer that is unused a number of bytes of data stored in the buffer a number of additional bytes of data that can be stored by the buffer before the buffer is full one of a number of predefined threshold values such as full almost full half full almost empty and empty or the like.

As data becomes available in the buffer the UDP encapsulation function converts the data from the RDMA format to the UDP format. More specifically when triggering the RDMA to UDP streaming driver the cross layer application provides UDP source and destination ports and optionally IP source and destination addresses to the UDP encapsulation function . The UDP source port and the IP source address are those from the pseudo address for the desired media content item. The UDP encapsulation function obtains the data from the buffer strips the RDMA encapsulation and formats the data into UDP packets. Formatting the data into UDP packets includes encapsulating the data with the UDP source port the UDP destination port packet length and check sum. Note that the UDP source and destination ports are the same as those provided to the video processing function when provisioning the video processing function for the playback session and are therefore expected by the video processing function .

In addition IP source and destination addresses or IP encapsulation may also be expected by the video processing function or otherwise desired. If so the IP source and destination addresses provided by the cross layer application and expected by the video processing function may be passed separately to the UDP streaming interface . The UDP streaming interface may then perform IP encapsulation if desired or provide the IP source and destination addresses to the video processing function separately. The UDP streaming interface then streams the UDP packets to the video processing function .

More specifically when the desired media content item is selected for playback the playback application or alternatively the session management application identifies a pseudo source address for the desired media content item. If the pseudo source address is one of the pseudo source addresses in the mappings provided by the content distribution server the session management application provides the UDP source port and a UDP destination port to the cross layer application . Optionally the session management application also provides the IP source address and a destination address to the cross layer application . The UDP source port and the IP source address are those from the pseudo source address for the desired media content item and are expected by the video processing function . The UDP destination port and the IP destination address are the same as those provided to the video processing function during provisioning for the playback session and are therefore expected by the video processing function . In addition the RDMA address range for the desired media content item is obtained from the mapping based on the pseudo source address for the desired media content item and provided to the cross layer application . The cross layer application then loads the UDP encapsulation function with the UDP source and destination ports and optionally the IP source and destination addresses and loads the RDMA block transfer function with the RDMA address range in order to trigger operation of the RDMA to UDP streaming driver .

After loading the UDP encapsulation function and the RDMA block transfer function the cross layer application begins monitoring the RDMA transfer. More specifically the cross layer application determines whether the RDMA transfer for the entire RDMA address range is complete step . If the RDMA transfer for the entire RDMA address range is complete the process proceeds to step . Otherwise the cross layer application determines whether a RDMA transfer request issued by the RDMA block transfer function has failed step . If so the process proceeds to step . If not the cross layer application determines whether the buffer is full or empty step . If so the process proceeds to step . As such if the transfer of the entire RDMA address range is complete a RDMA transfer request has failed or the buffer is full or empty the cross layer application notifies the session management application of the status of the RDMA transfer step . The session management application may then take action based upon the status if desired.

At this point the cross layer application then determines whether there are updates available from the session management application for the UDP source and destination ports the IP source and destination addresses or the RDMA address range step . If so the process returns to step . If not the process returns to step .

Note that if the desired media content item is for example a broadcast television channel the content distribution server may continually rotate or buffer content into the corresponding RDMA address range in the high speed storage at the content distribution server . As such the session management application or alternatively the cross layer application may reload the UDP encapsulation function and the RDMA block transfer function with the information for the desired media content item upon being notified that the RDMA transfer is complete in order to request new content from the content distribution server as the new content is rotated or buffered into the RDMA address range for the desired media content item.

The RDMA block transfer function then determines an optimal block size for a RDMA transfer based on the amount of available storage space in the buffer step . Typically the optimal block size is less than the size of the RDMA address range. The RDMA block transfer function generates and sends a RDMA transfer request for a block of the RDMA address range to the RDMA enabled offload engine step . More specifically for the first iteration the RDMA block transfer function generates and sends a RDMA transfer request for a first block of the RDMA address range having a starting address equal to the starting address of the RDMA address range and an ending address determined based on the optimal block size for the RDMA transfer. As discussed below the process is repeated in order to generate and send RDMA transfer requests for additional blocks of the RDMA address range until the entire RDMA address range has been transferred or the transfer has failed.

After generating and sending the RDMA transfer request for the block of the RDMA address range the RDMA block transfer function determines whether the RDMA transfer for the requested block was successful step . Note that retrys on request failures are assumed to have been performed in the RDMA enabled offload engine . A retry is for example automatically re issuing an RDMA request when unsuccessful. However as an alternative the RDMA block transfer function may retry an unsuccessful transfer one or more times before finally determining that the transfer was unsuccessful. If so the process proceeds to step . If not the RDMA block transfer function notifies the cross layer application of the transfer failure step . In response the cross layer application may notify the session management application and the session management application may take appropriate action if desired. For example the session management application may terminate the transfer restart the transfer or the like.

The RDMA block transfer function then determines whether a RDMA transfer has been attempted to all RDMA addresses in the RDMA address range step . If not the process returns to step and is repeated in order to request a next block of the RDMA address range. Note that the starting address for the next RDMA request is set to the ending address of the previous RDMA request plus one address. Once the entire RDMA address range has been requested the RDMA block transfer function notifies the cross layer application that the RDMA transfer of the RDMA address range is complete step .

Next the UDP encapsulation function determines whether the buffer contains enough transferred RDMA data to build a complete UDP packet step . If not the UDP encapsulation function waits until the buffer contains enough transferred RDMA data to build a complete UDP packet. If the buffer contains enough transferred RDMA data to build a complete UDP packet the UDP encapsulation function obtains enough data from the buffer to fill one UDP packet step . The UDP encapsulation function then builds or generates a UDP packet for the data obtained from the buffer using the UDP source and destination ports for the desired media content item step . A checksum may also be calculated and added to the UDP packet. The UDP encapsulation function then transfers the UDP packets and optionally the IP source and destination addresses to the UDP streaming interface step . Optionally the UDP streaming interface may encapsulate the UDP packet within an IP packet using the IP source and destination addresses for the media content item.

After transferring the UDP packet to the UDP streaming interface the UDP encapsulation function determines whether updates for the UDP source and destination ports or the IP source and destination addresses are available from the cross layer application step . If not the process returns to step . If so the process returns to step .

While illustrates the system wherein the RDMA to UDP streaming drivers through N are implemented in the network interfaces through N of the STBs through N the present invention is not limited thereto. The RDMA to UDP streaming drivers through N may be implemented in any type of device having playback capabilities. For example illustrates a personal computing system where the RDMA to UDP streaming driver is implemented in a network interface of the personal computing system . The personal computing system may be for example a personal computer a mobile device such as a mobile phone having media content playback functionality a gaming console having media content playback functionality or the like.

The network interface may be a Network Interface Card NIC wherein the RDMA to UDP streaming driver is implemented in hardware such as for example a Field Programmable Gate Array FPGA Application Specific Integrated Circuit ASIC or the like. Note that the buffer may be implemented as one or more memory devices within or external to the FPGA ASIC or the like. In addition to the RDMA to UDP streaming driver the network interface also includes a physical layer interface and a RDMA enabled offload engine connected as shown. The RDMA enabled offload engine is not limited to performing RDMA transfers. The RDMA enabled offload engine may additionally be enabled to perform other types of network communication such as for example TCP IP UDP RTP or the like.

The personal computing system also includes a control system and an A V interface interconnected as shown. The control system includes a processing unit one or more user input devices and a power supply connected via a bus . The processing unit is connected to volatile memory such as for example RAM. In addition the processing unit may be connected to non volatile memory such as for example a hard disk drive. As illustrated an operating system which is implemented in software is executed by the processing unit . In this embodiment the playback application the session management application and the cross layer application are implemented in software and execute on the operating system . Note that in this example video processing functions such as decryption and decoding may be performed by the playback application . Alternatively the personal computing system or the control system may include a separate video processing function that performs video processing functions such as for example decryption and decoding.

In this example the A V interface includes a video graphics engine video memory and a physical A V interface interconnected as shown. The operation of the video graphics engine and the video memory will be apparent to one of ordinary skill in the art upon reading this disclosure. The physical A V interface may be any type of protected or unprotected A V interface such as for example a Digital Video Interface DVI a High Definition Multimedia Interface HDMI or the like.

In the embodiments discussed above the RDMA to UDP streaming driver is implemented in a user device or system such as a STB or personal computing system however the present invention is not limited thereto. As illustrated in the RDMA to UDP streaming driver may alternatively be implemented in a home gateway router . RDMA transfers are performed as discussed above. However UDP packets are passed back down the network protocol stack for routing such as IP routing over the home network to one or more client devices implementing standard UDP based or RTP based playback functions.

Those skilled in the art will recognize improvements and modifications to the preferred embodiments of the present invention. All such improvements and modifications are considered within the scope of the concepts disclosed herein and the claims that follow.

