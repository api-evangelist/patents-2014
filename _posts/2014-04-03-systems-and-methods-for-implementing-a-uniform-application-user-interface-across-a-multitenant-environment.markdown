---

title: Systems and methods for implementing a uniform application user interface across a multi-tenant environment
abstract: In accordance with disclosed embodiments, there are provided systems and methods for implementing a uniform application user interface across a hosted computing environment, such as an on-demand or cloud computing environment which utilizes multi-tenant database technologies, client-server technologies, traditional database technologies, or other computing architecture in support of the hosted computing environment. According to a particular embodiment such a system includes a processor and a memory to execute instructions at the system; a foundation layer to define a plurality of components; the plurality of components, each to define one or more features to be consumed by an arbitrary application built from the features; wherein the one or more features are to each incorporate one or more of the components defined by the foundation layer and further wherein each of the one or more features have visibility to one or more interfaces available for the respective features to connect with but have no visibility to or about any arbitrary application that will consume them; a glue logic layer to link the features to the arbitrary application built from the features, wherein the arbitrary application built from the features has a one-way view of the features consumed through the glue logic layer without permitting the features visibility to or about the arbitrary application built; and wherein the arbitrary application built from the features is to execute within the host organization. Other related embodiments are disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448773&OS=09448773&RS=09448773
owner: salesforce.com, inc.
number: 09448773
owner_city: San Francisco
owner_country: US
publication_date: 20140403
---
This application is related to and claims priority to the U.S. provisional patent application entitled SYSTEM AND METHOD FOR A UNIFORM APPLICATION USER INTERFACE ACROSS A MULTI TENANT ENVIRONMENT filed on Apr. 3 2013 having an application No. of 61 807 884 the entire contents of which are incorporated herein by reference.

A end of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Embodiments of the invention relate generally to the field of computing and more particularly to systems and methods for implementing a uniform application user interface across a hosted computing environment such as an on demand or cloud computing environment which utilizes multi tenant database technologies client server technologies traditional database technologies or other computing architecture in support of the hosted computing environment.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also correspond to embodiments of the claimed inventions.

Within a hosted environment various technologies are utilized to service many different tenants e.g. customer organizations and their users simultaneously. Such technologies may include for example client server traditional databases and multi tenant database systems. A multi tenant database system in particular operates to store data on behalf of a multitude of subscribers each being a tenant of the database system hence the term multi tenant database system. Many subscribers e.g. users or tenants utilize the computing technologies of the host organization to access analytics charts views reports and other such data which is stored within the servers systems databases and multi tenant database system of the host organization. For instance a sales team may utilize sales data stored within such a system. A host organization that implements the multi tenant database system may additionally provide a variety of tools including application development tools to create customized feature sets and interfaces by which the tenants may access manipulate display and analyze their data within an on demand environment for instance as a cloud based service accessible via a public Internet.

While conventionally available User Interface UI architectures and technologies exist the problem with prior solutions is that over time the UI architectures become increasingly tightly coupled with the underlying features and functionality they are meant to support which in turn renders conventional UI architectures unsuitable for use with new and different projects. That is to say the UI architecture and the underlying features become overly interdependent such that one cannot easily be removed from the other for re use elsewhere. Take for example a particular aspect of a conventional UI architecture which is used to connect up with a given feature say a social media feed available from a social network such as Facebook. For instance the UI architecture may provide a feature that takes a viewer from the particular Facebook feed being viewed to the Facebook user that posted the feed.

Such a UI architecture component may create a connection change the URL at the top of the browser which in turn triggers other events to occur such as loading the user s profile page. Over time the system becomes tightly coupled with its container resulting in a maintenance problem due to the glue like integration throughout the codebase between the UI architecture and the underlying features and functionality. As systems become increasingly larger the stickiness or glue eventually becomes immutable for all practical purposes.

The present state of the art may therefore benefit from the systems and methods for implementing a uniform application user interface across a multi tenant environment as described herein.

Described herein are systems and methods for implementing a uniform application user interface across a hosted computing environment such as an on demand or cloud computing environment which utilizes multi tenant database technologies client server technologies traditional database technologies or other computing architecture in support of the hosted computing environment. Such an exemplary system may include for example a processor and a memory to execute instructions at the system a foundation layer to define a plurality of components the plurality of components each to define one or more features to be consumed by an arbitrary application built from the features wherein the one or more features are to each incorporate one or more of the components defined by the foundation layer and further wherein each of the one or more features have visibility to one or more interfaces available for the respective features to connect with but have no visibility to or about any arbitrary application that will consume them a glue logic layer to link the features to the arbitrary application built from the features wherein the arbitrary application built from the features has a one way view of the features consumed through the glue logic layer without permitting the features visibility to or about the arbitrary application built and wherein the arbitrary application built from the features is to execute within the host organization.

The systems and methods described enable a predictable and cohesive relationship between a UI architecture and underlying features and functionality which operates within a large scale and highly used hosted computing environment supporting multiple distinct tenants and further which does not result in the stickiness and coupling which is problematic with conventionally available solutions.

Certain embodiments operate within a hosted computing environment also referred to as a provider of on demand services on demand database services cloud computing services or simply a host organization that provides services to subscribing customer organizations. Such host organizations utilize various technologies to service many different tenants e.g. customer organizations and their users simultaneously. Such technologies may include for example client server implementations computing grids computing pods or pools of work machines traditional databases single tenancy database systems and or multi tenant database systems. A multi tenant database system in particular operates to store data on behalf of a multitude of subscribers each being a tenant of the database system hence the term multi tenant database system. Many subscribers e.g. users or tenants utilize the computing technologies of the host organization to access analytics charts views reports and other such data which is stored within the servers systems databases and multi tenant database system of the host organization. For instance a sales team may utilize sales data stored within such a system.

In the following description numerous specific details are set forth such as examples of specific systems languages components etc. in order to provide a thorough understanding of the various embodiments. It will be apparent however to one skilled in the art that these specific details need not be employed to practice the embodiments disclosed herein. In other instances well known materials or methods have not been described in detail in order to avoid unnecessarily obscuring the disclosed embodiments.

In addition to various hardware components depicted in the figures and described herein embodiments further include various operations which are described below. The operations described in accordance with such embodiments may be performed by hardware components or may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor programmed with the instructions to perform the operations. Alternatively the operations may be performed by a combination of hardware and software.

Embodiments also relate to an apparatus for performing the operations disclosed herein. This apparatus may be specially constructed for the required purposes or it may be a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition embodiments are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the embodiments as described herein.

Embodiments may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the disclosed embodiments. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium electrical optical acoustical etc.

Any of the disclosed embodiments may be used alone or together with one another in any combination. Although various embodiments may have been partially motivated by deficiencies with conventional techniques and approaches some of which are described or alluded to within the specification the embodiments need not necessarily address or solve any of these deficiencies but rather may address only some of the deficiencies address none of the deficiencies or be directed toward different deficiencies and problems where are not directly discussed.

Multi tenant database system includes a plurality of underlying hardware software and logic elements that implement database functionality and a code execution environment within the host organization . In accordance with one embodiment multi tenant database system further implements databases to service database queries and other data interactions with the databases . The hardware software and logic elements of the multi tenant database system are separate and distinct from a plurality of customer organizations A B and C which utilize the services provided by the host organization by communicably interfacing to the host organization via network . In such a way host organization may implement on demand services on demand database services or cloud computing services to subscribing customer organizations A C.

Host organization receives input and other requests from a plurality of customer organizations A C via network such as a public Internet . For example incoming database queries API requests interactions with displayed graphical user interfaces and displays at the client devices A C or other inputs may be received from the customer organizations A C to be processed against the multi tenant database system . In certain embodiments the inputs and requests from the customer organizations A C may include custom code features and functionality to be hosted and executed within the host organization on behalf of such customer organizations A C. In such embodiments responses may constitute data records reports analytics charts or other information provided by either the customer organizations A C previously provided customized code features and functionality or may be provided by code features and functionality made accessible to the customer organizations A C as a service or may be some combination of both.

In one embodiment each customer organization A C is an entity selected from the group consisting of a separate and distinct remote organization an organizational group within the host organization a business partner of the host organization or a customer organization A C that subscribes to cloud computing services provided by the host organization .

In one embodiment requests are received at or submitted to a web server within host organization . Host organization may receive a variety of requests for processing by the host organization and its multi tenant database system . Incoming requests received at web server may specify which services from the host organization are to be provided such as query requests search request status requests database transactions graphical user interface requests and interactions processing requests to retrieve update or store data on behalf of one of the customer organizations A C code execution requests and so forth. Web server may be responsible for receiving requests from various customer organizations A C via network and provide a web based interface or other graphical displays to an end user client device A C or machine originating such data requests .

Host organization may implement a request interface via web server or as a stand alone interface to receive requests packets or other requests from the client devices A C. Request interface further supports the return of response packets or other replies and responses in an outgoing direction from host organization to the client devices A C.

Authenticator operates on behalf of the host organization to verify authenticate and otherwise credential users attempting to gain access to the host organization.

Query interface provides functionality to pass queries from web server into the multi tenant database system for execution against the databases or other data stores of the host organization s production environment . In one embodiment the query interface implements an Application Programming Interface API through which queries may be executed against the databases or other data stores including queries arriving from a foundational layer of the UI Framework . Query optimizer performs query translation and optimization for instance on behalf of other functionality such as functionality of a graphical interface which possesses sufficient information to architect a query e.g. identifying parameters targets tables records rows actions etc. yet lacks the necessary logic to actually construct the appropriate query syntax into the databases of the multi tenant database system . In other instances query optimizer modifies a submitted query to optimize its execution within the host organization without affecting the resulting dataset returned responsive to such an optimized query.

UI Framework enables a predictable and cohesive relationship between a UI architecture and underlying features and functionality whether provided by the host organization or the customer organizations A C permitting the UI architecture and features and functionality to operate within the large scale and highly used multi tenant environment established by the computing architecture of the host organization . Use and implementation of such a UI framework as will be described in additional detail below further avoids the stickiness and coupling between the features and functionality and the UI architecture which is problematic with conventionally available solutions.

Conversely the conventional solution depicts that conventional components reside at the bottom with conventional features above which are directly connected e.g. tightly and immutably coupled over time to the coupled applications of the conventional solution . It is this direct connection resulting in the tightly bound and immutable coupling overtime that is to be avoided by design use and implementation of the UI Framework as is described herein.

The foundation provides implementing logic to the UI Framework supporting re usable components and forming the base or foundation for the new UI architecture which is enabled by way of the UI framework . The foundation layer provides technology and implementing logic by which customer organizations partners or internal developers to the host organization may specify what a component is or does. For instance at the foundation a component is defined to have a certain shape that is to say a component is defined by a set of rules and events that the functionality of the components must adhere to without defining the components themselves. The foundation layer additionally provides components and other functionality with access to information. For instance via the foundation layer it is possible to retrieve data from the multi tenant data base system retrieve information from Chatter from Force.com from Data.com from various social networks from available feeds and from other external sources all of which may be interfaced via the foundation layer.

The components specify what a feature is with each feature essentially being a grouping of components bucketed together. Components may thus be considered as the building blocks for creating features. The re usable components provide code modules that may be consumed and reused by features to be consumed by the arbitrary applications . The components themselves are either developed and provided as a service by the host organization or custom developed by customer organizations and hosted by the host organization on behalf of such customer organizations or may be developed by external partners or services providers and provided for use within the multi tenant environment.

For instance a customer wishing to view their pending deliveries need not write a custom component which queries remote databases at DHL UPS USPS FedEx etc. rather those service providers may and very likely will provide turn key re usable components which may then be utilized by the customer organization without having to develop and customize the functionality themselves.

Instantiating a provided component may require very little code essentially requiring only that such a component be identified and identifying relevant parameters such as a customer ID or shipping ID for the pending deliveries example above. Using the provided components a customer organization may develop and provide an application which permits a user to navigate to their pending deliveries the pending deliveries being available as a list or set of records stored in the multi tenant database system as well as receive status available via the functionality of the provided components incorporated into features which are then consumed by the application. Such status may originate external to the multi tenant database environment such as from the remote databases of DHL UPS USPS and FedEx in the prior example or such status may be retrieved internally such as from the multi tenant database system if the pertinent information exists and is permissibly accessible.

Customer organizations may use either their own components provided components or a mix of such components within their arbitrary applications depending upon their needs and the level of customization required. Use of custom developed components by a customer organization would be similar to use of provided components except that additional code must be written by the customer organization to establish the relevant functionality of the component first before it may be utilized within features and consumed into an arbitrary application.

Components additionally provide the graphical user elements that may be placed upon a screen or display of a user s device when executing the resulting arbitrary application. Such user elements may include for example a date control box a label a user input box a check box a radio button a slider an action button e.g. submit cancel edit save etc. and other well known graphical elements.

The features know about the interfaces that are available for them to connect with but the features have no knowledge about the arbitrary applications that will consume them. A series of well defined interfaces establishes the series of events that the features are allowed to utilize. Such events are provided by the host organization however additional events may be defined by customer organizations and partners via extension and in turn utilized by the features . According to described embodiments features may be tangible or perceivable elements directly viewable by users of the arbitrary applications without being specific to any particular application. For instance a picture or image a user profile a feed a contact or a contacts list and so forth. Features are commonly a composition of the components below them but do not necessarily have to be.

The features are written and provided by the host organization as a service to the customer organizations and provide integration to the internal computing architecture of the host organization. Because the features are written and provided by the host organization they are subject to a level of control not forced upon the arbitrary applications . As such the features are consumed and communicated with in a predictable manner thus allowing for the cohesive linkage of the features to the arbitrary applications through the glue without creating a tangle of code and unwanted coupling and interdependency.

Take for example the Facebook scenario above in which it is desired to provide an end user with a redirection from viewing a Facebook post to viewing the poster s profile page for instance subject to a click event etc. Features may provide such capabilities on behalf of the arbitrary applications which may consume and implement the chosen feature simply by adhering to the requirements to call upon the chosen feature . The host organization provides the features and thus provides the appropriate venting in an appropriate manner for instance by establishing within the features the relevant parameters to be passed in and returned as output as well as the internal functionality of the feature for instance triggering the re direction from viewing a post to viewing a poster s profile page subject to a specified event or condition. Because the features are controlled and specify a set of predictable requirements they may be consumed or otherwise utilized via arbitrary applications regardless of whether such applications are developed by customer organizations the host organization partners etc.

The Glue provides a connection between the decentralized components whether provided or hosted and allows customer organizations to create a cohesive link between their chosen features and any arbitrary application they develop without incurring unwanted coupling due to the intentional disconnection between the arbitrary applications and the features forcing the linkage through the glue instead. Because the glue provides the cohesiveness between features and the arbitrary applications the features do not become interdependent upon the arbitrary applications and visa versa. By forcing the cohesion through the glue the features themselves are prevented from knowing what the arbitrary application is what it does etc. resulting in the disconnection . Rather the arbitrary application must consume the features resulting in one way knowledge by the arbitrary application rather than bi directional knowledge by both the arbitrary application and the features consumed.

Within the arbitrary applications the features are stitched together forming a cohesive application having consumed the various features with a one way knowledge of the features consumed without the features themselves having any knowledge whatsoever of the arbitrary application or the manner in which they were consumed by the arbitrary application .

In accordance with certain embodiments the quarterback is responsible for receiving events and importantly the quarterback determines where the received events go. The quarterback resides within container and additionally passes events based on subscriptions. For instance the quarterback may pass a public profile for an object called based on an application calling upon the object e.g. having asked for the object and optionally based on the condition of having requested the object from a permissible domain website server or location etc. .

Events provide a series of well defined application diagnostics that define shape to communications. For example the events may define how to handle and what to do with a particular entity such as a feed when that entity packages an event and passes it to the quarterback which receives such events.

The container defines the feel and the interaction model of the arbitrary application in particular the feel interactions and general flow of the UI presented to an end user executing the arbitrary application . The container does not however specify the features or the connectivity of the arbitrary application . The container is a purpose built application either provided by the host organization as a service or developed and customized by a customer organization partner etc. and hosted by the host organization for execution on behalf of the customer organization partner etc.

Take for example a web application using pure HTML a native iOS application e.g. to run on iPhones iPads etc. and a native Android application e.g. an APK to run on any Android compatible platform . The HTML iOS and Android applications are all purpose built and in this particular example are written by developers at the host organization and provided as a service to customer organizations.

Customer developed applications such as page editors comment pages etc. may then consume the container and operate in conjunction with the larger production environment and multi tenant database system of the host organization refer back to at elements and respectively .

Consider for example a feed system similar to the Facebook example above except provided by the host organization such as the feed system provided via Chatter by salesforce.com which provides feeds posts status and various updates regarding business interactions etc. Take for example an end user interacting with such a feed system as an author posting content to the feed through such a provided container which is consumed by an arbitrary application . The container thus enables the end user to interact with the feed beyond merely authoring content and posting. For instance the container enables the end user to perform actions such as sharing a contact with all of the end user s followers triggering the end user s posting to show up on the feed as well as an update to the feed saying for example User John Doe shared contact Jane Doe with his followers. The end user initiates an action in the feed which defines for example that when another user clicks on the feed that user should be taken to the shared contact.

The quarterback must then recognize that such a user is being taken to an entity regardless of the entity type. The quarterback need not understand the type of entity the user is being directed to but rather only that the user is being taken to an entity agnostic to whether the entity is of a shared contact type entity a custom object type entity a shared opportunity type entity etc.

Regardless of the entity type an entity ID for the entity is packaged into an event having well defined requirements such as for this entity ID in the present context navigate to another specified target entity e.g. a targeted object to fulfill the requirements of this event. For example the event may define calling a particular target entity object which has internal functionality to fire a navigation or re direction as appropriate. Within the publication and subscription type model once a user taps clicks or otherwise triggers a particular event at a displayed user interface and the current entity packages the event with a call to the appropriately defined target entity e.g. a targeted object and entity ID the work of the calling entity is complete. The targeted entity object has its own functionality to then for example fire the navigation to an appropriate profile page feed contact etc. based on the packaged event or some other requested contextually appropriate action based on the definition of the packaged event. Many other examples are feasible as the actions are not limited to merely triggering navigation events.

From the perspective of the entity packaging the event it is not even necessary to track whether the request landed anywhere or was fulfilled according to the model. Rather the quarterback is responsible for determining where packaged events are routed and is further responsible for applying the appropriate pivots. For instance the quarterback may collect or identify additional context for the packaged event and then based on what type of event is being handled e.g. a task a detail page of a particular entity a dashboard a custom object etc. the quarterback will then apply the appropriate pivot determining where to send the event and further how the UI is adapted at the end user s device pursuant to the handling of the packaged event.

A more detailed example is provided with regard to a contact or profile which corresponds to a particular user. In this user s feed there may be a shared contact for instance similar to the example above saying John Doe User has shared contact Jane Doe with you or perhaps with all of John Doe s followers. Regardless if the user taps or clicks on the shared contact Jane Doe the act of tapping clicking fires the event up to the container . There may be multiple such containers for instance a first container having therein a conventional web application a second container implementing a native iOS application and a third container providing a community website. In this case the quarterback now has all of the information it needs regarding the entity that is being fired. It can say based on heuristics the user tapping on the contact is asking to navigate to the corresponding profile based on the event and in the context of the three distinct containers the quarterback may do something completely different for each.

For instance in the case of a first container having therein the conventional web application the quarterback may recognize the entity as a profile and in turn instantiate functionality to carryout the visual aspects of the UI and populate what elements are to be displayed to the end user s device. The functionality may interact with the databases of the multi tenant database system to retrieve the necessary information for display and may perform other functionality such as analysis dashboarding calculations etc. as necessary for the display. Another alternative path may be followed instead based on the identical user event of tapping on a shared contact for instance in the context of an iOS application the quarterback may recognize the entity and recognize it specifically as a profile entity and then based on the iOS application context the quarterback will instantiate some native iOS code that is going to show very specific information about the contact available possibly distinct from the kind of information displayed in the context of the first container with the conventional web application. Importantly however the same action need not be carried out. The source may be a web page or a feed and may even be the same but the targeted entity object is completely up to the implementing container. Thus the first container with the conventional web application may specify a particular target entity and the second container with the iOS native code may specify a different target entity which may in turn retrieve and display different kinds of information and potentially take different actions including rendering different kinds of a UI display.

In the case of the second container with the native iOS code it may be that the target entity is another native iOS application for instance the user interface may be adapted to display a native profile which is pulled from for example Twitter or another appropriate source depending upon the functionality chosen.

With the third container having therein the community web site the user may be in a forum type of discussion board and when the user clicks on the contact within their feed an event may be fired up to the container for the community website which in turn causes the user interface to render a pop up confirming that the user interface will be moved away from the forum view as it is necessary to completely switch context to view the profile corresponding to the contact which was clicked on within the feed. The user may then confirm and the view is moved away from the context of the forum view and into the context of a profile view where the contact s profile page may be seen at the user s display.

Again however completely different actions may be taken via custom built containers as the chosen functionality is not restricted to merely displaying contact profiles and clicking on contacts shared in a feed. For instance the arbitrary application may be developed to track NBA teams and the developer may elect to have entities corresponding to players teams leagues coaches etc. with each being a different entity type. Event definitions can further be made to cause the quarterback which is generic from the perspective of the application developer to carry out customized pivots and distributions of packaged events based on entity key prefixes or the entity types at the discretion of the application developer.

Packaged events would then cause the quarterback to pivot to a team page or a player s page or a coaches page each of which may have different UI flows layouts skins data displays dashboards etc.

The UI Framework enables an n way relationship with the arbitrary applications . The applications are arbitrary and are composed of building blocks created from the features which in turn are created from the components. Enabling the n way application relationship results in a system with applications that support a variety of technologies while incorporating a mixture of functionality written by customer organizations functionality written by partners and functionality written by and provided by the host organization as a service to the customer organizations.

According to certain embodiments the quarterback includes partially generic code and partially application specific. Generic code of the quarterback handles all the glue entities. Application specific code of the quarterback handles what is to be done with the specific entity. The Application specific code of the quarterback and the actions it takes are called pivots and provide routing based on the actual context associated with the specific entity and in particular the context within which that specific entity operates whether that is an iOS native application an Android native application a web base HTML application etc.

Collectively the UI Framework establishes a URI Uniform Resource Identifier platform which purposefully blurs the line between programmatic and declarative customization and additionally blurs the lines between code written by developers internal to the host organization and code that is written by customer organizations and simply hosted at the host organization on behalf of such customers. By blurring the line maintenance of code is greatly simplified especially within the ecosphere of the multi tenant database of the host organization which supports and interacts with many different customer organizations or tenants simultaneously each of whom have different needs in terms of functionality and information to be rendered to an end user s UI.

The problem of code maintenance is not new however maintenance issues are further exacerbated within a multi tenant environment. Consider the very simple example of a UI with a box on the left hand side and the person responsible for the application wishes to move that box such that it is displayed on the right hand side instead. However the IT persons that developed the template by which to display information may have only included the box on the left hand side without any option to display information on the right hand side. While a seemingly simple maintenance issue the fact is that different persons are responsible for the kinds of information displayed versus the template which permits the application to display information. Using conventional content management solutions it is necessary to engage somebody in IT and request that the IT support person move the box. Once the IT person takes up the request the IT person goes to some other system writes some code modifying or adding additional features into the template deploys the code into production and in particular into the conventional content management system and magically the box now appears on the right hand side as requested or permits the person responsible for the information display to render information in the newly available box.

Conversely the platform implementing the UI Framework further provides a developers interface through which customer organizations may incorporate functional components and graphical components from an available tool box or pallet for example by dragging graphical and functional components onto a page being built. The developers interface additionally permits the customer organizations to link additional functionality to the graphical and functional components through extension points.

The UI Framework presents a unified system with defined interactions which permits certain changes to be managed by the persons responsible for the application and information display rather than having to engage back end IT persons responsible for the underlying computing architecture. For instance the UI Framework enables customer organizations and their users to control and define what information is to be displayed how that information is to be displayed visually to an end user s device what functionality is to be triggered or what entities objects are to be instantiated pursuant to defined events etc. all without having to engage the IT persons responsible for supporting the underlying computing architecture of the host organization.

This is especially important within a multi tenant environment because there are a vast and varied array of customer organizations which utilize services provided by the host organization and the IT persons responsible for the computing architecture of the host organization and its multi tenant environment lack the intimate knowledge of the information and business objectives associated with any particular customer organization. Additionally removing IT support persons from the maintenance chain improves satisfaction by the customer organizations by enabling them to modify the UI aspects rather than being limited to controlling only what information is displayed by a restricted set of pre established templates.

The overall implementation and use of the UI Framework within the host organization and the multi tenant environment provides value to the customer organizations by permitting them to add their own arbitrary applications and desired customizations as building blocks resulting in a composition type system created partially by the customer organizations developers and partially by the host organization s own developers.

For example in one embodiment a system embodies a tablet computing device or a hand held smartphone in which a display unit of the system includes a touchscreen interface for the tablet or the smartphone and further in which memory and an integrated circuit operating as an integrated processor are incorporated into the tablet or smartphone in which the integrated processor implements one or more of the embodiments described herein. In one embodiment the integrated circuit described above or the depicted integrated processor of the tablet or smartphone is an integrated silicon processor functioning as a central processing unit CPU and or a Graphics Processing Unit GPU for a tablet computing device or a smartphone.

Display subsystem represents hardware e.g. display devices and software e.g. drivers components that provide a visual and or tactile display for a user to interact with the tablet computing device or smart phone. Display subsystem includes display interface which includes the particular screen or hardware device used to provide a display to a user. In one embodiment display subsystem includes a touchscreen device that provides both output and input to a user.

I O controller represents hardware devices and software components related to interaction with a user. I O controller can operate to manage hardware that is part of audio subsystem and or display subsystem . Additionally I O controller illustrates a connection point for additional devices that connect to the tablet computing device or smart phone through which a user might interact. In one embodiment I O controller manages devices such as accelerometers cameras light sensors or other environmental sensors or other hardware that can be included in the tablet computing device or smart phone. The input can be part of direct user interaction as well as providing environmental input to the tablet computing device or smart phone.

In one embodiment the tablet computing device or smart phone includes power management that manages battery power usage charging of the battery and features related to power saving operation. Memory subsystem includes memory devices for storing information in the tablet computing device or smart phone. Connectivity includes hardware devices e.g. wireless and or wired connectors and communication hardware and software components e.g. drivers protocol stacks to the tablet computing device or smart phone to communicate with external devices. Cellular connectivity may include for example wireless carriers such as GSM global system for mobile communications CDMA code division multiple access TDM time division multiplexing or other cellular service standards . Wireless connectivity may include for example activity that is not cellular such as personal area networks e.g. Bluetooth local area networks e.g. WiFi and or wide area networks e.g. WiMax or other wireless communication.

Peripheral connections include hardware interfaces and connectors as well as software components e.g. drivers protocol stacks to make peripheral connections as a peripheral device to to other computing devices as well as have peripheral devices from connected to the tablet computing device or smart phone including for example a docking connector to connect with other computing devices. Peripheral connections include common or standards based connectors such as a Universal Serial Bus USB connector DisplayPort including MiniDisplayPort MDP High Definition Multimedia Interface HDMI Firewire etc.

At block processing logic executes within a system a foundation layer having logic to define a plurality of components.

At block processing logic executes a components layer providing the plurality of components wherein each of the plurality of components defines one or more features to be consumed by an arbitrary application built from the features.

According to block the one or more features are to each incorporate one or more of the components defined by the foundation layer and further in which each of the one or more features have visibility to one or more interfaces available for the respective features to connect with but have no visibility to or about any arbitrary application that will consume them.

At block processing logic executes a glue logic layer to link the features to the arbitrary application built from the features wherein the arbitrary application built from the features has a one way view of the features consumed through the glue logic layer without permitting the features visibility to or about the arbitrary application built.

At block processing logic executes the arbitrary application built within the multi tenant environment.

In accordance with another embodiment of method the interfaces available for the respective features each establishes a series of events that the features are allowed to utilize.

In accordance with another embodiment method further includes executing a quarterback within the glue logic layer the quarterback receiving the events utilized by the features wherein the quarterback determines where the received events go.

In accordance with a particular embodiment there is non transitory computer readable storage media having instructions stored thereon that when executed by a processor of a system the instructions cause the system to perform operations including executing a foundation layer having logic to define a plurality of components executing a components layer providing the plurality of components wherein each of the plurality of components defines one or more features to be consumed by an arbitrary application built from the features wherein the one or more features are to each incorporate one or more of the components defined by the foundation layer and further wherein each of the one or more features have visibility to one or more interfaces available for the respective features to connect with but have no visibility to or about any arbitrary application that will consume them executing a glue logic layer to link the features to the arbitrary application built from the features wherein the arbitrary application built from the features has a one way view of the features consumed through the glue logic layer without permitting the features visibility to or about the arbitrary application built and executing the arbitrary application built within the multi tenant environment.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system is used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it is understood that the networks that the claimed embodiments may utilize are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system may include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser a Mozilla or Firefox browser an Opera or a WAP enabled browser in the case of a smartphone tablet PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it is understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units.

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS may include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It is understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas e.g. tenant storage space which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space tenant data and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to tenant data . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface into system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process space for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user may hit three different application servers and three requests from different users may hit the same application server . In this manner system is multi tenant in which system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS may have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects as described herein. It is understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It is understood that the word entity may also be used interchangeably herein with object and table. 

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. static memory such as flash memory static random access memory SRAM volatile but high data rate RAM etc. and a secondary memory e.g. a persistent storage device including hard disk drives and a persistent database and or a multi tenant database implementation which communicate with each other via a bus . Main memory includes a UI Framework to implement the mechanisms described herein such as the foundational layer providing components features the glue logic layer and so forth. Arbitrary application also of main memory may be created or developed by the consumption of various features and their components as provided by the UI Framework . Main memory and its sub elements are operable in conjunction with processing logic and processor to perform the methodologies discussed herein. The computer system may additionally or alternatively embody the server side elements as described above.

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and functionality which is discussed herein.

The computer system may further include a network interface card . The computer system also may include a user interface such as a video display unit a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. an integrated speaker . The computer system may further include peripheral device e.g. wireless or wired communication devices memory devices storage devices audio processing devices video processing devices etc. .

The secondary memory may include a non transitory machine readable storage medium or a non transitory computer readable storage medium or a non transitory machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface card .

In accordance with one embodiment there is a system having at least a processor and a memory therein to execute implementing logic and or instructions . Such a system executes as a part of a hosted computing environment such as an on demand or cloud computing environment which utilizes multi tenant database technologies client server technologies traditional database technologies or other computing architecture in support of the hosted computing environment.

According to the depicted embodiment the system may implement a UI Framework . For instance the system implementing such a UI Framework includes a foundation layer to define a plurality of components the plurality of components each to define one or more features to be consumed by an arbitrary application built from the features in which the one or more features are to each incorporate one or more of the components defined by the foundation layer and further in which each of the one or more features have visibility to one or more interfaces available for the respective features to connect with but have no visibility to or about any arbitrary application that will consume them. A glue logic layer of the system is to further link the features to the arbitrary application built from the features in which the arbitrary application built from the features has a one way view of the features consumed through the glue logic layer without permitting the features visibility to or about the arbitrary application built and further in which the arbitrary application built from the features is to execute within the host organization.

According to another embodiment of the system the interfaces available for the respective features establish a series of events that the features are allowed to utilize.

According to another embodiment the system further includes a quarterback to receive the events utilized by the features in which the quarterback determines where the received events are routed.

According to another embodiment of the system the quarterback resides within the glue logic layer and routes the events based upon context of the arbitrary application built from the features when executing within the host organization.

According to another embodiment of the system the events are provided by a host organization which implements the system or defined by customer organizations and or partners via extensions and further in which the events are utilized by the features.

According to another embodiment of the system the features constitute tangible or perceivable elements directly viewable by users of the arbitrary applications without being specific or exclusive to any particular arbitrary application.

According to another embodiment of the system each feature constitutes one of a picture an image a user profile a feed a contact or a contacts list.

According to another embodiment of the system the glue logic layer provides a connection between the plurality of components which operate in a decentralized manner and further allows customer organizations to create a cohesive link between features chosen by the customer organizations for the arbitrary application built without incurring unwanted coupling between the arbitrary application built and the features by forcing the link through the glue logic layer rather than rather than bi directionally between the features and the arbitrary application built.

According to another embodiment of the system a host organization implements the system and in which a customer organization develops the arbitrary application built from the features to execute within the host organization.

According to another embodiment of the system the customer organization causes the arbitrary application built from the features to execute within the host organization on behalf of a plurality of users affiliated with the customer organization and in which the arbitrary application built from the features presents a graphical user interface to the users to provide output and receive input.

According to another embodiment of the system the foundation layer defines a set of rules and events that each of the plurality of components must adhere to without defining functionality of the respective components.

According to another embodiment of the system the foundation layer includes implementing logic by which customer organizations partners and or internal developers to a host organization which implements the system and the host organization specify what any one of the plurality of components does.

According to another embodiment of the system the foundation layer further provides the plurality of components with access to information stored within a multi tenant database system of the host organization.

According to another embodiment of the system the foundation layer further provides the plurality of components with access to information sources accessible external from the host organization including one or more of social network feeds shipping status from third party shippers news feeds and data sources maintained by partners external to the host organization.

According to another embodiment of the system each one of the plurality of components include a re usable component having executable code therein to be consumed and reused by any one or more of the features.

According to another embodiment of the system each of the one or more features includes a grouping of a the re usable components as building blocks utilized to create each of the one or more features.

According to another embodiment of the system each one of the plurality of components include one of a host organization component developed by the host organization and provided to customer organizations as a service a custom developed component by one of the customer organizations and hosted by the host organization on behalf of the respective customer organization and an externally developed partner or service provider component provided for use by the customer organizations at the system within the host organization.

According to another embodiment of the system each component provides graphical user elements that may be placed upon a screen or display of a user s device when executing the arbitrary application.

According to another embodiment the system further includes a web server to implement a request interface to receive input from users of the arbitrary application built during execution via a graphical user interface presented to user devices by the arbitrary application built.

According to another embodiment of the system the input from users includes input from one of a plurality of customer organizations remote from the system in which the plurality of customer organizations communicably interface with the system via a public Internet and in which each customer organization is an entity selected from the group consisting of a separate and distinct remote organization an organizational group within the host organization a business partner of the host organization or a customer organization that subscribes to cloud computing services provided by the host organization.

According to another embodiment of the system a user interface operates at a user client device remote from the system and communicatively interfaces with the system via a public Internet in which the system operates at a host organization as a cloud based service provider to the user client device and in which the cloud based service provider hosts the arbitrary application built within the host organization on behalf of a customer organization which is a tenant of the host organization and makes the arbitrary application built accessible to authorized users affiliated with the customer organization.

According to another embodiment the system is embodied within one of a tablet computing device or a hand held smartphone such as those depicted at .

Bus interfaces the various components of the system amongst each other with any other peripheral s of the system and with external components such as external network elements other machines client devices etc. including communicating with such external devices via a network interface over a LAN WAN or the public Internet. Query interface provides functionality to pass queries from the request interface e.g. web server into a multi tenant database system for execution against its databases or other data stores of the host organization s production environment as depicted in additional detail at .

While the subject matter disclosed herein has been described by way of example and in terms of the specific embodiments it is to be understood that the claimed embodiments are not limited to the explicitly enumerated embodiments disclosed. To the contrary the disclosure is intended to cover various modifications and similar arrangements as are apparent to those skilled in the art. Therefore the scope of the appended claims are to be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosed subject matter is therefore to be determined in reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

