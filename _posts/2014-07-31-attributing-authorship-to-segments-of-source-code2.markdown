---

title: Attributing authorship to segments of source code
abstract: An electronic device accesses a comparison of at least a portion of a second version of a software program to a corresponding portion of a first version of the software program. The device determines an attribution value for a first author based in part on one or more differences between a respective segment of source code in the second version of the software and a corresponding segment of source code in the first version of the software, and determines an attribution value for a second author based in part on one or more differences between the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software. The device displays or sends instructions for displaying indicia of at least one attribution value with the respective segment of source code in the second version.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612826&OS=09612826&RS=09612826
owner: FACEBOOK, INC.
number: 09612826
owner_city: Menlo Park
owner_country: US
publication_date: 20140731
---
This relates generally to computer programming including but not limited to revision control software.

A software program is often written and revised by multiple authors. Different programmers will work on the same software program with each programmer creating new source code or removing or otherwise modifying portions of existing source code.

For a large software program that is developed and revised over weeks months or years it is difficult to know or keep track of which programmers authors are knowledgeable about particular segments of the source code e.g. particular lines blocks paragraphs functions methods or classes in the source code .

Accordingly there is a need for devices with methods and interfaces for attributing authorship to segments of source code. Keeping track of which programmer s author s are responsible for particular segments of source code as the source code changes can help troubleshoot those segments and allows further improvements to the software program to be made in a more efficient manner.

In accordance with some embodiments a method is performed at an electronic device with one or more processors and memory. The method includes accessing a comparison of at least a portion of a second version of a software program to a corresponding portion of a first version of the software program. The first version of the software program was written by a first author. The portion of the second version of the software program includes revisions to the corresponding portion of the first version of the software program the revisions including segments of source code in the second version of the software program that have changed relative to corresponding segments of source code in the first version of the software program. The revisions to the corresponding portion of the first version of the software program were written by a second author. The method further includes for a respective segment of source code in the second version of the software program that has changed relative to a corresponding segment of source code in the first version of the software program determining an attribution value for the first author based in part on one or more differences between the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software and determining an attribution value for the second author based in part on one or more differences between the respective segment of source code in the portion of the second version of the software and the corresponding segment of source code in the first version of the software. The method further includes displaying or sending instructions for displaying at least some of the second version of the software program such that for the respective segment of source code in the portion of the second version of the software program that has changed at least one of an indicium of the attribution value for the first author and an indicium of the attribution value for the second author are displayed with the respective segment of source code in the portion of the second version of the software program.

In accordance with some embodiments an electronic device includes an optional display one or more processors memory and one or more programs the one or more programs are stored in the memory and configured to be executed by the one or more processors and the one or more programs include instructions for performing the operations of the method described above. In accordance with some embodiments a graphical user interface on an electronic device with a display a memory and one or more processors to execute one or more programs stored in the memory includes one or more of the elements displayed in the method described above which are updated in response to inputs as described in the method described above. In accordance with some embodiments a computer readable storage medium has stored therein instructions which when executed by an electronic device with an optional display and one or more processors cause the device to perform the operations of the method described above. In accordance with some embodiments an electronic device includes an optional display and means for performing the operations of the method described above.

Thus electronic devices are provided with methods and interfaces for attributing authorship to segments of source code.

As noted above because source code in a software program typically undergoes multiple revisions in the process of software development and maintenance programmers often want to know which programmer s author s are knowledgeable about a particular segment or segments of the source code e.g. particular lines blocks paragraphs functions methods or classes in the source code . Keeping track of which programmer s author s are responsible for particular segments of source code as the source code changes can help troubleshoot those segments and allows further improvements to the software program to be made in a more efficient manner.

Accordingly the present application describes devices methods and interfaces for attributing authorship to segments of source code. These devices and methods determine attribution values for authors of the segments. Attribution values are scores percentages letter grades or the like that are determined for the authors of a particular segment of source code. Attribution values are based at least in part on changes in the particular segment of source code between different versions of the software program.

Attribution values provide an indication of the contribution of each author to the particular segment of source code. For example if a first author writes a segment of source code the attribution value for the first author will reflect that the segment is fully attributable to the first author e.g. corresponding to an attribution value of 100 or any other appropriate score grade etc. . If a second author subsequently makes a minor change to the segment e.g. changing a variable name the attribution value for the first author will decrease e.g. from 100 to 90 and an attribution value is determined for the second author that reflects the minor nature of the second author s changes e.g. 10 . On the other hand if the second author subsequently makes a major change to the segment the attribution value for the first author decreases more significantly e.g. from 100 to 20 and the attribution value for the second author is correspondingly higher e.g. 80 .

Attribution values are typically determined for each author who has edited the segment including in some embodiments the original author of the segment . As additional authors further revise the software attribution values are determined for those additional authors as well taking into account both the contribution by the additional authors as well as the previous authors. Accordingly users can see each of the multiple authors who have contributed to the segment. In addition users can see attribution values for each of the multiple authors which provide information concerning the significance of the contributions by each author. The attribution values provide insight into who may be responsible for or understand particular lines or other segments of the software program. In other words attribution values provide an indication of who the experts are for particular lines or other segments of the software program at any given point in time.

Below illustrate exemplary user interfaces for attributing authorship to segments of source code. are flow diagrams illustrating a method of attributing authorship to segments of source code. The user interfaces in are used to illustrate the processes in .

Reference will now be made in detail to embodiments examples of which are illustrated in the accompanying drawings. In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the various described embodiments. However it will be apparent to one of ordinary skill in the art that the various described embodiments may be practiced without these specific details. In other instances well known methods procedures components circuits and networks have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.

The terminology used in the description of the various described embodiments herein is for the purpose of describing particular embodiments only and is not intended to be limiting. As used in the description of the various described embodiments and the appended claims the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will also be understood that the term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms includes including comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

As used herein the term if is optionally construed to mean when or upon or in response to determining or in response to detecting or in accordance with a determination that depending on the context. Similarly the phrase if it is determined or if a stated condition or event is detected is optionally construed to mean upon determining or in response to determining or upon detecting the stated condition or event or in response to detecting the stated condition or event or in accordance with a determination that a stated condition or event is detected depending on the context.

In some embodiments the client devices . . . are computing devices such as portable computers tablet computers laptop computers desktop computers etc. with one or more processors embedded therein or coupled thereto or other appropriate computing devices that can be used to display write and or modify software programs e.g. source code files or to determine and or display author attribution values associated with segments of software programs.

In some embodiments the revision control server system is a single computing device such as a computer server while in other embodiments the revision control server system is implemented by multiple computing devices working together to perform the actions of a server system e.g. cloud computing .

In some embodiments the network is a public communication network e.g. the Internet or a cellular data network a private communications network e.g. private LAN or leased lines or a combination of such communication networks.

Users . . . optionally employ the client devices . . . to access the revision control server system . For example one or more of the client devices . . . execute software program authoring environments that can be used to view modify change or otherwise access software programs e.g. source code files that are stored on the revision control server system . As another example one or more of the client devices . . . execute software applications e.g. a revision control program which may be part of a developer program that can be used to view revision information stored on and or generated by the revision control server system e.g. comparisons of portions of different versions of source code of a software program author attribution values for segments of source code etc. .

In some embodiments either or both of the client device and the revision control server system determine author attribution values for segments of source code as described herein.

Memory includes high speed random access memory such as DRAM SRAM DDR RAM or other random access solid state memory devices and may include non volatile memory such as one or more magnetic disk storage devices optical disk storage devices flash memory devices or other non volatile solid state storage devices. Memory may optionally include one or more storage devices remotely located from the processor s . Memory or alternately the non volatile memory device s within memory includes a non transitory computer readable storage medium. In some embodiments memory or the computer readable storage medium of memory stores the following programs modules and data structures or a subset or superset thereof 

The revision control database stores data associated with revisions to software programs in one or more types of databases such as graph dimensional flat hierarchical network object oriented relational and or XML databases. In some embodiments the revision control server provides revision control functionality for one or more client computers . Accordingly in some embodiments the data stored in the revision control database e.g. source code files corresponding to different versions of software programs is created on a client device and is sent to the revision control server system . Further in some embodiments the data stored in the revision control database is accessible by one or more client devices .

Source code files include source code files for different versions of software programs. Source code files are typically text files that include computer instructions written in a human readable computer language e.g. Python Java C Ruby SQL etc. . A source code file can be generated in response to a save or commit request by an author. In some embodiments when the source code file generated in response to a save or commit request is a revised version of a previously saved source code file the revised version is saved as a separate file and is associated with the previously saved source code file e.g. as a subsequent version in a chain of source code files . In some embodiments the source code file corresponding to the revised version is assigned a version number indicating its version with respect to an initial or previous version of the software file.

Attribution values include attribution values for one or more authors of the source code files . In some embodiments attribution values for a particular source code file or portion thereof are stored in the particular source code file such as in a header or metadata portion of the file or in a separate data file container associated with the source code file. As described herein attribution values indicate a relative degree of contribution made by a particular author to a particular segment of source code.

Comparison data includes information specifying differences between given source code files or portions thereof. In some embodiments comparison data is generated by the comparison module of the revision control module . In some embodiments comparison data is used to display differences between source code files. For example comparison data can be used to display a source code file where differences between the source code files are distinctively displayed e.g. code that has been deleted is shown in strikethrough and code that has been added is shown underlined . In some embodiments comparison data is used by the attribution module to determine attribution values for segments of the source code. Comparison data is stored as any appropriate data structure such as a text file e.g. ASCII SGML HTML a table or the like.

The version tracking module facilitates tracking and storage of different versions of software programs. For example the version tracking module receives requests to save or commit a source code file of a software program e.g. from a client device and the version tracking module saves the source code file in the revision control database in conjunction with a version identifier. In some embodiments the version tracking module communicates with one or more client devices to send requested source code files to the client device. For example the version tracking module receives a request for a particular version of a software program and the version tracking module retrieves the corresponding source code file from the revision control database and sends the source code file to the requesting client device. In some embodiments the version tracking module automatically assigns version indicators e.g. numbers to source code files upon receiving a request to save or commit the source code file. For example when a client saves or commits a revised source code file the version tracking module automatically applies a version indicator that indicates the particular version of the software program that the revised source code file represents.

The comparison module compares source code files and generates comparison data. In some embodiments the comparison module is or includes a file comparison utility such as the diff utility used in UNIX or UNIX based computer systems. In some embodiments source code files are compared in response to a request from a client device . For example a user of a client device may request author attribution values for a portion of a particular version of a software program. In such cases the comparison module generates a comparison of two versions of the software program. In some embodiments the comparison is then made accessible to the attribution module .

The attribution module determines attribution values for various authors of software programs. In some embodiments the attribution module determines attribution values for segments of source code of a software program. As described herein in some embodiments a segment is a single line of source code. In some embodiments a segment is multiple lines of source code. In some embodiments where a segment includes multiple lines of source code attribution values are assigned to each line of code in the segment. In some embodiments where a segment includes multiple lines of source code attribution values are assigned to the segment in its entirety. Segments and how attribution values are assigned to segments and or parts of the source code within segments are explained below.

In some embodiments the comparison module of the revision control module identifies segments of source code for which attribution values are determined. For example when comparing two source code files the comparison module identifies segments in both source code files that correspond to one another. Segments of source code may but need not have the same number of lines of source code. In some embodiments the attribution module identifies the segments of source code for which attribution values are determined e.g. using a comparison module not shown that is separate from a revision control system .

In some embodiments the attribution module is part of e.g. is a sub module of the revision control module . In some embodiments the attribution module is a separate module from the revision control module but communicates with the revision control module e.g. via one or more application programming interfaces APIs to receive information such as identifiers of segments of source code e.g. line numbers defining the start and end lines of segments for which attribution values are to be determined.

As described herein in some embodiments the revision control database the revision control module and or the attribution module communicate with one or more client devices to provide revision control and author attribution functionality to the one or more client devices .

Memory includes high speed random access memory such as DRAM SRAM DDR RAM or other random access solid state memory devices and may include non volatile memory such as one or more magnetic disk storage devices optical disk storage devices flash memory devices or other non volatile solid state storage devices. Memory may optionally include one or more storage devices remotely located from the processor s . Memory or alternately the non volatile memory device s within memory includes a non transitory computer readable storage medium. In some embodiments memory or the computer readable storage medium of memory stores the following programs modules and data structures or a subset or superset thereof 

The software program authoring environment enables users to display write and or modify software programs including source code files of software programs. In some embodiments the software program authoring environment includes a text editor in which source code files are displayed written and or modified. In some embodiments the software program authoring environment communicates with the revision control server system . In some embodiments the revision control server system provides revision control functions and services for the software program authoring environment including storing tracking and comparing different versions of software programs e.g. source code files or portions thereof. For example in some embodiments source code files created and or modified in the software program authoring environment by a user are sent to the revision control server system which then applies appropriate version numbers to the source code files e.g. with the version tracking module and stores the source code files e.g. in the revision control database . Upon request from the client for a particular source code file the revision control server system retrieves and sends the requested source code files to the client device e.g. to the software program authoring environment .

In some embodiments the revision control server system provides software program comparison and author attribution functions and services for the client device . For example upon receiving a request from the client device for a comparison between two versions of a software program e.g. two different source code files corresponding to different versions of the software program the revision control module of the revision control server system retrieves and compares the appropriate source code files and provides the comparison to be sent to the client device . In some embodiments the comparison is displayed in a user interface of the program authoring environment or a user interface of any other appropriate software program or module of the client device . Moreover in some embodiments upon receiving a request from the client device for author attribution values associated with a software program e.g. a source code file corresponding to a given version of the software program the attribution module determines attribution values for one or more authors of the software program which are then sent to the client device e.g. for display by the program authoring environment . Techniques for determining attribution values are explained herein.

In some embodiments the client device optionally includes a local revision control database storing source code files attribution values and comparison data a local revision control module including a version tracking module and a comparison module and or a local attribution module . Details of these modules are described above with reference to analogous modules in the revision control server system for brevity these details are not repeated here.

In some embodiments the client device is a standalone system. In some embodiments the client device provides revision control functionality using the foregoing optional modules independent of a revision control server system. For example instead of requesting source code files from the revision control database of the revision control server the client device retrieves source code files from its own revision control database . Similarly instead of requesting attribution values from the revision control server the client device determines attribution values with the local attribution module . In some embodiments any functionality provided by a program or module of the revision control server system is instead provided by an analogous local program or module of the client device .

In some embodiments both server based modules and client based modules are used to provide the revision control and author attribution services and or functions described herein. For example in some embodiments the client device executes a local revision control module and a local attribution module but stores and retrieves source code files from the revision control database of the revision control server . In this case the client device may not include a local revision control database . As another example in some embodiments the client device executes a local attribution module but relies on the revision control module and the revision control database of the revision control server system to provide revision control and file comparison services.

Each of the above identified modules and applications correspond to a set of executable instructions for performing one or more functions described above and the methods described in this application e.g. the computer implemented methods and other information processing methods described herein . These modules i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules are optionally combined or otherwise re arranged in various embodiments. In some embodiments memory and or store a subset of the modules and data structures identified above. Furthermore memory and or optionally store additional modules and data structures not described above.

Attention is now directed towards embodiments of user interfaces UI and associated processes that may be implemented on a client device e.g. the client device in .

With reference to user interface displays of a portion of a first version of a software program and a portion of a second version of the software program also called first version and second version respectively where the second version has been revised as compared to the first version. The displayed portions of the software program represent source code of the software program.

In some embodiments the first version of the software program corresponds to a first commit of the software program in a revision control system and the second version of the software program corresponds to a subsequent commit of the software program in the revision control system.

In some embodiments the user interface includes a scroll bar to allow a user to display other portions not shown of the software program.

The user interface also includes exemplary indicia of attribution values for an author X associated with the first version of the software program namely X 100 . In some embodiments a value of 100 indicates that the corresponding segment of source code was written entirely by that author. Thus as shown in each line in the displayed portion of the first version of the software program was written by author X.

While various different indicia of attribution values are sometimes referred to herein merely as attribution values it will be understood that these indicia may or may not actually be the calculated attribution values. In particular while the present discussion sometimes equates attribution values with percentages e.g. stating that an author X is associated with an attribution value of 100 the underlying attribution value need not be a percentage value.

The user interface also includes exemplary indicia of attribution values for authors associated with the second version of the software program . For segments of the source code in the second version that have not changed relative to corresponding segments in the first version including for example Lines 1 2 5 6 8 and 10 the indicium of the attribution value remains the same for both versions namely X 100 . For segments in the second version of the software program that have changed relative to corresponding segments in the first version two attribution values are displayed one that indicates the attribution value for the author of the first version and one that indicates the attribution value for the author who made the revisions to the first version.

Specifically the user interface displays several segments of source code in the second version of the software program segments and that have changed relative to corresponding segments of source code in the first version of the software program segments and respectively . The user interface also displays a segment of source code in the first version of the software program that was deleted in the second version of the software program. For clarity lines that have changed between the first version and the second version are shown in bold type in . In various embodiments changes between lines or portions of lines between different versions of a software program are indicated in any appropriate manner e.g. underlines strikethroughs highlights font color font style etc. . In some embodiments changes between lines or portions of lines are not indicated.

In some embodiments corresponding segments of source code in different versions of a software program are determined by a comparison program or module e.g. a diff utility that identifies differences between source code files or portions thereof and groups lines of source code into segments e.g. using techniques such as the longest common subsequence longest increasing subsequence rolling hash functions and or the Hunt Mcllroy algorithm . Notably as identified by a given diff utility a segment in one version of a software program may but need not have the same number of lines as a corresponding segment in another version of the software program. For example segment includes four lines of source code whereas segment includes only two.

With reference to segment several lines have changed relative to the corresponding segment in the first version of the software program. In particular Line has been deleted in the second version and Line A Line B and Line C have been added. Based on the differences between segment and segment attribution values for both the first and second author are displayed in conjunction with segment . Specifically the attribution value for author X is shown as X 33 and the attribution value for author Y is shown as Y 66 . Accordingly a user viewing the indicia of attribution values can infer that author Y likely has a greater understanding of the code in segment or at least made a larger contribution to the segment because the attribution value for author Y is greater than that for author X. If the diff utility identified the segments differently these attribution values could change based on the segments actually identified.

In the example shown in the attribution values are determined for the segment as a whole but are displayed for each line within the segment. In particular for Line A in segment the attribution value for author X namely X 33 does not necessarily indicate that Line A contains code that was written by or otherwise attributable to author X. Rather the attribution values are determined based on all of the differences between segments and e.g. a number of lines that have been added removed or changed to the overall segment and the attribution value for the segment as a whole is displayed in conjunction with each line. Other techniques for displaying indicia of attribution values are discussed with reference to .

Turning to segments and in in the second version of the software program author Y replaced Line with Line D. Thus although none of the lines of code in segment of the first version of the software remain in the corresponding segment in the second version of the software an attribution value for author Y is shown as Y 50 and an attribution value for author X is shown as X 50 . In some other embodiments author Y is given an attribution value of 100 not shown .

Segment refers to a line of source code that was deleted from the first version of the software program and thus has no corresponding line in the second version. In some embodiments where no corresponding segment of source code exists in a second version of a software program no attribution values are determined or displayed to reflect the deletion. In particular as shown in while author Y deleted Line from the first version of the software program no attribution value is displayed to reflect the deletion. On the other hand in some embodiments attribution values are determined and displayed for such deletions. For example illustrates a user interface in which the indicia of attribution values include an indicium of attribution for author Y displayed alongside a blank line corresponding to the line deleted by author Y. In some embodiments indicia of attribution for the author s of the deleted line would also be displayed not shown .

In some embodiments indications of lines or segments that were deleted from the first version of the software program are displayed whether or not attribution values are determined for the deleted lines. For example as shown in the user interface in a blank line is included in the displayed portion of the second version of the software program to indicate where the deletion occurred i.e. after Line in the portion of the second version of the software program . In some embodiments instead of or in addition to a blank line or lines additional text or symbols are displayed to indicate the deleted line s . For example in some embodiments the content of the deleted line s are displayed in a different format e.g. strikethrough text underlined distinctive background color highlighting distinctive font color etc. . In some embodiments the deleted line s are indicated by replacing or prepending the content of the deleted line s with one or more symbols e.g. etc. .

In some embodiments even if attribution values are not determined for deleted lines indications of the deleted lines are displayed in the user interface. For example user interface would omit the attribution value Y 100 that appears next to the blank line following Line . 

In user interface displays the portion of the second version of the software program and a portion of a third version of the software program where the third version of the software program has been revised as compared to the second version of the software program . In particular while the displayed portion of the second version of the software program includes attribution values for two authors author X and author Y the displayed third version of the software program includes attribution values for three authors author X author Y and author Z reflecting the fact that the third version includes revisions written by author Z.

In particular the third version includes segment that corresponds to segment in the second version . Segment includes two lines of source code that have been edited as compared to corresponding lines in segment . Accordingly indicia of attribution values for the third version reflect the difference between the corresponding segments where the attribution values for authors X and Y are modified and an attribution value for author Z is added. The resulting attribution values for segment namely X 17 Y 33 Z 50 reflect the relative contribution of authors X Y and Z to segment and indicate that these authors likely all have some knowledge of segment .

Similar to segment in the attribution values for segment are determined for the segment as a whole but are displayed for each line within the segment. Thus Line B and Line in segment are displayed in conjunction with an attribution value for author Z namely Z 50 even though these lines were not revised by author Z.

The displayed portion of the third version of the software program also includes segment that does not have a corresponding segment in the second version of the software program . Accordingly because this line was newly written by author Z the indicium of the attribution value for this segment is Z 100 reflecting that this line of code is not attributable to any of the previous authors i.e. author X or author Y .

In some embodiments attribution values are determined based at least in part on a number of lines that have been added to a segment of source code the number of lines that have been removed from the segment of source code the total number of lines in a first version of the segment and or the total number of lines in a revised version of the segment. For example as described above with respect to segments and in the indicia of attribution values for segment reflect the fact that the revision by author Y resulted in the addition of three lines of source code and the deletion of one line of source code. In some embodiments a change to a previous line of source code is considered to be a deletion of the previous line of code and an addition of a new line of code. For example attribution values for segment are determined based on the deletion of two lines Line A and Line C and the addition of two lines Line A edited and Line C edited even though line A and Line C were not deleted but merely edited e.g. a portion of Line A remains unmodified in the edited version of Line A . Exemplary techniques and formulas for determining attribution values are described herein.

In some embodiments attribution values are determined by determining a similarity between a segment of source code in a first version of a software program and a corresponding segment of source code in a second version of the software program where the corresponding segment of source code in the second version of the software program has changed e.g. has been revised relative to the segment of source code in the first version of the software program. Attribution values are then calculated for each author associated with the corresponding segment in the second version of the software program. For example in some embodiments the similarity between a segment of source code in a first version of a software program and a corresponding segment of source code in a second version of the software program is defined as 

L1 is the total number of lines in the segment of source code in the first version of the software program 

L2 is the total number of lines in the corresponding segment of source code in the second version of the software program and

Using an example from the total number of lines in segment is 2 L1 2 and the total number of lines in segment is 4 L2 4 . Substituting these values into formula 1 gives the result 

In some embodiments an attribution value for an author who revised the segment of source code in the first version of the software program thus creating the corresponding segment of source code in the second version of the software program is defined as Attrib Similarity PriorAttrib 1 Similarity 2 where 

Attribis the attribution value for the revising author i.e. the author who revised the segment of source code in the first version of the software program thus creating the corresponding segment of source code in the second version of the software program and

PriorAttribis the prior attribution value for the revising author of the segment of source code in the first version of the software program if the revising author was not an author of the segment of source code in the first version of the software program then PriorAttribequals zero .

Continuing the example using segments and from formula 2 is used to determine the attribution value of author Y as author Y is the author that revised segment resulting in segment . Because author Y did not have a prior attribution value for segment the prior attribution value PriorAttrib is zero. Accordingly substituting the appropriate values into formula 2 gives the result Attrib 0.33 0 1 0.33 0.66

In some embodiments an attribution value for an author of the segment of source code in the first version of the software program who did not revise the segment of source code in order to create the corresponding segment of source code in the second version of the software program is defined as Attrib Similarity PriorAttrib 3 where 

Attribis the attribution value for the prior author i.e. the author of the segment of source code in the first version of the software program who did not revise the segment of source code in order to create the corresponding segment of source code in the second version of the software program and

PriorAttribis the prior attribution value for the prior author of the segment of source code in the first version of the software program.

Continuing the example using segments and from formula 3 is used to determine the attribution value of author X as author X is an author of segment and author X did not revise segment to create segment . Because author X was the sole author of segment the PriorAttribis 1.0 e.g. 100 . Accordingly substituting the appropriate values into formula 3 gives the result Attrib 0.33 1 0.33

Thus the attribution value for author X for segment is 0.33 or 33 . The attribution values according to formulas 1 3 are reflected in which displays the attribution value of 33 for author X and 66 for author Y.

In segment corresponds to a revised version of segment having been revised by author Z. In particular author Z revised segment by editing Line A and Line C resulting in segment . Substituting values into formulas 1 3 above attribution values for segment for authors X Y and Z are calculated as follows 

Thus for segment the attribution value for author Z is 0.5 or 50 the attribution value for author X is 0.17 or 17 and the attribution value for author Y is 0.33 or 33 . illustrates these attribution values in association with segment .

In user interface displays the portion of the first version of the software program and the portion of the second version of the software program as described above with respect to . However in the indicia of attribution values and are displayed in a different manner than in . In particular although the attribution values underlying the displayed indicia in are the same as those underlying the displayed indicia in only one author is identified for each line of source code in . Specifically indicia of attribution values e.g. X for Line and Y for Line A in are only displayed for the author having the highest attribution value for a corresponding segment. Thus the indicia of attribution values displayed in conjunction with the portion of the first version of the software program indicate that each line was written by author X and the indicia of attribution values displayed in conjunction with the portion of the second version of the software program indicate only the author who has the highest attribution value for that line. Thus with respect to the second version Line indicates only author X because author X is entirely responsible for Line . On the other hand Line A which is 66 attributable to author Y and 33 attributable to author X indicates only author Y.

In some embodiments where the indicia of the attribution values indicate only one author whichever author is associated with the highest attribution value is indicated. Thus if a segment is associated with three authors having respective attribution values of 20 30 and 50 the author associated with the attribution value of 50 will be listed. In some embodiments in the case of a tie the author who made the most recent edit is indicated. For example if the respective attribution values for two authors of a segment are both 50 the author who most recently edited the software program is indicated. In other embodiments in case of a tie all of the tied authors are indicated. For example if three authors are all associated with an attribution value of 33 then all three authors are indicated.

In user interface displays the portion of the first version of the software program and the portion of the second version of the software program as described above with respect to . Once again the attribution values underlying the displayed indicia in are the same as those underlying the displayed indicia in . However in the indicia of attribution values and are symbolic representations of the attribution value of each author. While uses stars to indicate attribution values of different authors other symbols are used in some embodiments instead of or in addition to stars such as asterisks dots plus signs dollar signs emoji etc.

In the maximum attribution value e.g. 100 is associated with three stars. Thus because author X wrote each of the lines in the displayed portion of the first version of the software program each line in the first version indicates that author X has three stars. Where a line is attributable to multiple authors such as Line A and Line B each author is given zero one or two stars depending on the underlying attribution value for each author. In some embodiments any nonzero attribution value for an author results in a one star rating. In some embodiments any attribution value above 33 results in a two star rating. Other techniques for assigning symbolic indicia of attribution values are also used in various embodiments. In some embodiments in case of a tie the author who most recently edited the software program is given a greater number of stars. For example for Line D in the underlying attribution values for authors X and Y are both 0.5 or 50 .

In user interface displays the portion of the first version of the software program and the portion of the second version of the software program as described above with respect to . Once again the attribution values underlying the displayed indicia in are the same as those underlying the displayed indicia in . However in the indicia of attribution values and are displayed for segments as a whole and not for each line in a given segment. Moreover as described with respect to only one author is indicated for each segment or group of contiguous lines having the same attribution values. For example segment is displayed in conjunction with a single indicium for author Y indicating that this author has the highest attribution value for this segment. While Line and Line in the second version are not identified as a segment that includes revisions with respect to the first version these lines are nonetheless grouped together for the purposes of displaying indicia of attribution values. In particular because both Line and Line are associated with the same underlying attribution value e.g. the value for X 100 only one indicium is displayed.

In user interface displays the portion of the first version of the software program and the portion of the second version of the software program as described above with respect to . Once again the attribution values underlying the displayed indicia in are the same as those underlying the displayed indicia in . Similar to the description of in the indicia of attribution values and are displayed for segments as a whole and not for each line in the segments. However instead of only indicating one author for each segment as shown in includes indicia of attribution values for each author of a given segment. For example segment is displayed in conjunction with indicia of the attribution values for both author X and author Y e.g. X 33 Y 66 .

In user interface displays a portion of a first version of a software program and a portion of a second version of the software program where the second version of the software program has been revised as compared to the first version of the software program. Like the displayed portions of the software program in represent source code e.g. two source code files corresponding to consecutive versions of the software program .

Whereas the attribution values underlying are based on the number of lines that have been changed added and or removed between different versions of the software program the attribution values in are based on a number of tokens changed added and or removed between different versions of the software program. In some embodiments a token is a basic lexical building block of source code such as an identifier a reserved word an operator a separator or a constant.

The user interface also includes indicia of attribution values for an author X associated with the first version of the software program and indicia of attribution values for authors X and Y associated with the second version of the software program . Each line in the portion of the first version of the software program is associated with an attribution value for author X of 100 thus indicating that each displayed line was written entirely by author X.

For lines of the source code in the second version that have not changed relative to corresponding segments in the first version the indicia of the attribution values remains the same for both versions. For segments in the second version of the software program that have changed relative to corresponding segments in the first version two attribution values are displayed one that indicates the attribution value for the author of the first version and one that indicates the attribution value for the author who made the revisions to the first version.

As noted above however the attribution values underlying the indicia in are based on the number of tokens that have been changed added or removed between different versions of the software. In particular with respect to segment author Y is responsible for the addition of eight tokens to and the deletion of three tokens from segment . Accordingly attribution values for author X and author Y for segment are based on these token level changes to the source code resulting in attribution values of 30 for author X and 70 for author Y. Exemplary techniques and formulas for determining attribution values are described herein.

Similar to the discussion above with respect to in the attribution values are determined for the segment as a whole but are displayed for each line within the segment. In particular for the line in segment including Token A Token B the attribution value for author X namely X 30 does not necessarily indicate that either Token A or Token B was written by or otherwise attributable to author X. Rather the attribution values are determined based on all of the differences between segments and e.g. a number of tokens that have been added removed or changed and the attribution values for the segment as a whole are displayed in conjunction with each line.

In user interface displays the portion of the second version of the software program and a portion of a third version of the software program where the portion of the third version of the software program has been revised as compared to the second version of the software program . In particular while the displayed portion of the second version of the software program includes attribution values for two authors author X and author Y the displayed third version of the software program includes attribution values for three authors author X author Y and author Z reflecting the fact that the third version includes revisions written by author Z.

In particular the third version includes segment that corresponds to segment in the second version . In segment author Z removed two tokens from and added two tokens to segment . Accordingly indicia of attribution values for the third version reflect the difference between the corresponding segments where the attribution values for authors X and Y are modified and an attribution value for author Z is added. The resulting attribution values for segment namely X 15 Y 35 Z 50 indicate approximately the relative contributions of authors X Y and Z to segment and indicate that these users likely all have some knowledge of segment .

The attribution values for segment are determined for the segment as a whole but are displayed for each line within the segment. Thus for example the line including Token C Token D in segment is displayed in conjunction with an attribution value for author Z namely Z 50 even though these lines were not revised by author Z. Alternative techniques for displaying indicia of attribution values such as those described above with respect to are likewise applicable to the user interfaces .

In some embodiments attribution values are determined based on the number of tokens in a segment of source code in a first version of a software program and a corresponding segment of source code in a second version of the software program where the corresponding segment of source code in the second version of the software program has changed e.g. has been revised relative to the segment of source code in the first version of the software program. In some embodiments as described above and as shown in attribution values are determined based on the number of tokens added to and or deleted from the segment of source code in the first version of the software program to create the corresponding revised segment in the second version of the software program. For example in some embodiments the similarity between a segment of source code in a first version of a software program and a corresponding segment of source code in a second version of the software program is defined as 

Tis the total number of tokens deleted from the segment of source code in the first version of the software program 

Tis the total number of tokens added to the corresponding segment of source code in the second version of the software program and

Using an example from the total number of tokens deleted from segment is 3 T 3 and the total number of tokens added to segment is 8 T 8 . Substituting these values into formula 4 gives the result 

Attribution values for authors e.g. revising authors and prior authors are determined using formulas 2 and 3 described above. Thus continuing the example using segments and from formula 2 is used to determine the attribution value of author Y as author Y is the author that revised segment resulting in segment . Because author Y did not have a prior attribution value for segment the prior attribution value PriorAttrib is zero. Accordingly substituting the appropriate values into formula 2 gives the result Attrib 0.30 0 1 0.30 0.70

Formula 3 is used to determine the attribution value of author X as author X is an author of segment and author X did not revise segment to create segment . Because author X was the sole author of segment the PriorAttribis 1.0 e.g. 100 . Accordingly substituting the appropriate values into formula 3 gives the result Attrib 0.30 1 0.30

Thus the attribution value for author X for segment is 0.30 or 30 . The attribution values according to formulas 1 3 are reflected in which displays the attribution value of 30 for author X and 70 for author Y.

In segment corresponds to a revised version of segment having been revised by author Z. In particular author Z revised segment by deleting Token B and Token F and adding Token XX and Token YY editing resulting in segment . Substituting values into formulas 1 3 above attribution values for segment for authors X Y and Z are calculated as follows 

Thus for segment the attribution value for author Z is 0.5 or 50 the attribution value for author X is 0.15 or 15 and the attribution value for author Y is 0.35 or 35 . illustrates these attribution values in association with segment .

In user interface includes a portion of a first version of a software program and a portion of a second version of the software program where the portions of the software program include exemplary source code. The user interface also includes indicia of attribution values corresponding to the displayed lines of source code in the first version of the software and indicia of attribution values corresponding to the displayed lines of source code in the second version of the software. In some embodiments the indicia of attribution values and in are determined in accordance with the techniques described above with respect to . In particular for a given segment they are based on the number of lines that have been added removed and or changed with respect to a corresponding segment in an earlier version of the software program.

In user interface includes the portion of the second version of the software program and a portion of a third version of the software program where the portions of the software program include exemplary source code. In the portion of the third version of the software program includes revisions that were written by a third author author Z. Accordingly the indicia of attribution values indicate approximately the contribution of author Z to the software program.

In user interface includes a portion of a first version of a software program and a portion of a second version of the software program where the portions of the software program include exemplary source code. The user interface also includes indicia of attribution values corresponding to the displayed lines of source code in the first version of the software and indicia of attribution values corresponding to the displayed lines of source code in the second version of the software. In some embodiments the indicia of attribution values and in are determined in accordance with the techniques described above with respect to . In particular for a given segment they are based on a number of tokens that have been added removed and or changed with respect to a corresponding segment in an earlier version of the software program.

In user interface includes the portion of the second version of the software program and a portion of a third version of the software program where the portions of the software program include exemplary source code. In the portion of the third version of the software program includes revisions that were written by a third author author Z. Accordingly the indicia of attribution values reflect the contribution of author Z to the software program. Note that the attribution values for authors X Y and Z in are different than the attribution values for authors X Y and Z in even though the changes in source code between and are the same as the changes in source code between and . This difference in attribution values is due to the difference in the manner in which the attribution values was calculated i.e. an exemplary line based calculation versus an exemplary token based calculation as explained above . Note that while attribution values are calculated precisely and automatically the values themselves are often just approximate indicators of the contribution made by a particular author to a particular segment especially if the segment has more than one author. These approximate indicators are nevertheless suitable for their purpose they are typically used to provide an indication of the author s who are most knowledgeable about a particular segment of source code. For example the attribution values X 18 Y 82 in and X 25 Y 75 in both indicate that author Y is probably the most knowledgeable author about the corresponding segment of source code. Here the difference between Y 82 and Y 75 is not meaningful because the difference simply reflects two different ways of calculating the attribution value for author Y.

The device accesses a comparison of at least a portion of a second version of a software program to a corresponding portion of a first version of the software program. In some embodiments the device accesses a comparison of the entire second version of the software program to the entire first version of the software program. In some embodiments the portion of the second version of the software program is user selected.

The first version of the software program was written by a first author e.g. author X in . In some embodiments the first version of the software program was written by more than one author.

The portion of the second version of the software program includes revisions relative to the corresponding portion of the first version of the software program the revisions including segments of source code e.g. particular lines blocks paragraphs functions methods or classes in the source code in the second version of the software program that have changed relative to corresponding segments of source code in the first version of the software program. A version of a program includes revisions if the version has been revised as compared to a previous version of the program. In some embodiments the revisions are contained in segments of source code in the second version of the software program that have changed relative to corresponding segments of source code in the first version of the software program.

The revisions to the corresponding portion of the first version of the software program were written by a second author e.g. author Y in .

In some embodiments the comparison identifies the segments of source code in the second version of the software program that have changed relative to corresponding segments of source code in the first version of the software program.

In some embodiments the first version of the software program corresponds to a first commit of the software program in a revision control system and the second version of the software program corresponds to a subsequent commit of the software program in the revision control system . In some embodiments another version of the software program is created with each commit i.e. save of the software program in the revision control system.

In some embodiments the first author is a creator of all of the lines of source code of the first version of the software program . In other words the first author is the initial author or the initial creator of the software program and the first version of the software program is the initial version of the software program. In some embodiments the first version of the software program is not the initial version of the software program. In such cases the first author is one author of the first version of the software program and does not necessarily correspond to the initial author of the software program.

In some embodiments as shown above in the creator i.e. the initial author of a software program or of particular lines of source code in an existing software program is given a maximum initial attribution value e.g. 100 . In some embodiments the author of a respective version of the software program other than the initial version of the software program is the user who created the respective version of the software program by making changes revisions to a version of the software program immediately preceding the respective version of the software program and then saving committing the changes revisions. The respective version of the software program is created as a result of execution of the save commit command with respect to the changed revised version.

In some embodiments prior to accessing the comparison at the device identifies segments of source code in the second version of the software program that have changed relative to corresponding segments of source code in the first version of the software program. In some embodiments the program or module that compares the first and second versions of the software program is separate from the program or module that determines the attribution values for the authors. In some embodiments the program or module that compares the first and second versions of the software program is the same as the program or module that determines the attribution values for the authors.

In some embodiments prior to accessing the comparison at the device identifies one or more differences between the segments of source code in the portion of the second version of the software program that have changed relative to corresponding segments of source code in the first version of the software program. In some embodiments prior to accessing the comparison at the device identifies one or more differences between the segments of source code in the second version of the software program that have changed relative to corresponding segments of source code in the first version of the software program. In some embodiments identifying the differences includes identifying one or more deleted lines identifying one or more added lines identifying one or more modified lines and or identifying one or more replaced lines which may be characterized as a deletion of a line plus an insertion of a new line . In some embodiments identifying the differences includes identifying one or more deleted tokens identifying one or more added tokens identifying one or more modified tokens and or identifying one or more replaced tokens which may be characterized as a deletion of a token plus an insertion of a new token .

With reference to for a respective segment of source code in the second version of the software program that has changed relative to a corresponding segment of source code in the first version of the software program the device determines an attribution value e.g. a numerical score a percentage value a letter grade etc. for the first author based in part on one or more differences between the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software e.g. based on the number of tokens and or lines that have been added removed and or changed .

For the respective segment of source code in the second version of the software program that has changed relative to a corresponding segment of source code in the first version of the software program the device determines an attribution value for the second author based in part on one or more differences between the respective segment of source code in the portion of the second version of the software and the corresponding segment of source code in the first version of the software.

In some embodiments the attribution value for the second author for the respective segment of source code in the portion of the second version of the software program is based at least partially on one or more of a number of lines of source code added by the second author to the respective segment of source code in the portion of the second version of the software program a number of lines of source code deleted or modified by the second author from the corresponding segment of source code in the first version of the software program a number of tokens added by the second author to the respective segment of source code in the portion of the second version of the software program a number of tokens deleted or modified by the second author from the corresponding segment of source code in the first version of the software program a total number of lines in the respective segment of source code in the portion of the second version of the software program a total number of lines in the corresponding segment of source code in the first version of the software program a total number of tokens in the respective segment of source code in the portion of the second version of the software program or a total number of tokens in the corresponding segment of source code in the first version of the software program. In some embodiments the attribution value for the first author is also based at least partially on one or more of these factors.

With reference to in some embodiments the device determines an attribution value for a respective author e.g. at based in part on one or more differences between comments in the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software. In other words in some embodiments additions deletions and or changes to comments are considered when determining an attribution value. In some embodiments comments are textual annotations embedded in source code files of computer programs e.g. text preceded by a character such as or .

In some embodiments the device determines an attribution value for a respective author e.g. at steps not based in part on one or more differences between comments in the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software. In other words in some embodiments additions deletions and or changes to comments are not considered when determining an attribution value.

In some embodiments the respective segment of source code in the second version of the software program corresponds to one or more lines of source code in the second version of the software program that are identified by a file comparison program as corresponding to one or more lines of source code in the first version of the software program . In some embodiments the one or more lines of source code in the second version of the software program are revised versions of the one or more lines of source code in the first version of the software program.

In some embodiments the respective segment of source code in the second version of the software program includes more lines of source code than the corresponding segment of source code in the first version of the software program .

In some embodiments the respective segment of source code in the second version of the software program includes fewer lines of source code than the corresponding segment of source code in the first version of the software program .

In some embodiments the respective segment of source code in the second version of the software program includes a same number of lines of source code as the corresponding segment of source code in the first version of the software program .

With reference to in some embodiments the device determines an attribution value for the first author based in part on one or more differences between the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software for each line of source code in the respective segment of source code in the second version of the software program. For example user interface in includes indicia of attribution values for author X the first author for each line in segment of the second version of the software program e.g. X 33 . Similarly in some embodiments the device determines an attribution value for the second author based in part on one or more differences between the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software for each line of source code in the respective segment of source code in the second version of the software program. For example user interface in includes indicia of attribution values for author Y the second author for each line in segment of the second version of the software program e.g. Y 66 .

In some embodiments the device determines author attribution values for each line of source code in a respective version of the software program including lines of source code that are the same as corresponding lines of source code in the prior version. For example Line in the displayed portion of the second version of the software program in is unchanged between the first version of the software and the second version of the software. Yet an indicium of an attribution value for the first author author X is displayed alongside Line in the displayed portion of the second version of the software program .

In some embodiments after determining the attribution value for the first author and the attribution value for the second author the device assigns the attribution value for the first author and the attribution value for the second author to each line of source code in the respective segment of source code in the portion of the second version of the software program. For example in attribution values for the first and the second authors author X and author Y are assigned to each line of source code in segment in the second version of the software program and indicia of attribution values for the first and the second authors author X and author Y are displayed alongside each line of source code in segment in the second version of the software program .

In some embodiments after determining the attribution value for the first author and the attribution value for the second author the device assigns the attribution value for the first author and the attribution value for the second author to the respective segment of source code in the portion of the second version of the software program. For example in attribution values for the first and the second authors author X and author Y are assigned to segment in the second version of the software program and indicia of attribution values for the first and the second authors author X and author Y are displayed alongside segment in the second version of the software program .

With reference to the device displays e.g. if the method is performed at a client computer or a standalone computer or sends instructions for displaying e.g. if the method is performed at a server computer that sends its results for display on a client computer at least some of the second version of the software program such that for the respective segment of source code in the portion of the second version of the software program that has changed at least one of an indicium of the attribution value e.g. a score number letter grade or one or more symbols for the first author and an indicium of the attribution value for the second author are displayed with e.g. alongside or next to the respective segment of source code in the portion of the second version of the software program. For example displays an exemplary indicium of an attribution value for author X namely X 33 and an exemplary indicium of an attribution value for author Y namely Y 66 displayed next to the respective segment of source code in the second version of the software program. In some embodiments the indicium of the attribution value includes the attribution value itself e.g. the calculated attribution value is displayed . Other exemplary indicia of an attribution value for a respective author include symbols e.g. stars as shown in scaled or normalized attribution values and the like.

In some embodiments the indicium of the attribution value for the first author and the indicium of the attribution value for the second author are values selected from a range wherein the range is 0 x 1 0 x 1 0 x 10 0 x 10 0 x 100 or 0 x 100.

In some embodiments for the respective segment of source code in the second version of the software program that has changed the device displays at least one of the indicium of the attribution value for the first author and the indicium of the attribution value for the second author with each line of source code in the respective segment of source code in the second version of the software program. For example in an indicium of an attribution value for one of the two authors of segment in this case Y for author Y is displayed alongside each line in segment .

In some embodiments both the indicium of the attribution value for the first author and the indicium of the attribution value for the second author are displayed with each line of source code in the respective segment of source code in the second version of the software program. For example in an indicium of the attribution value for author X the first author and the indicium of the attribution value for author Y the second author are displayed alongside each line in segment . Specifically X 33 Y 66 appears next to each line in segment .

In some embodiments for a respective segment of source code that has changed at least one of the indicium of the attribution value for the first author and the indicium of the attribution value for the second author are displayed for the respective segment as a whole. For example displays an indicium of an attribution value for one of the two authors of segment in this case Y for author Y alongside segment as a whole.

In some embodiments for a respective segment of source code that has changed both the indicium of the attribution value for the first author and the indicium of the attribution value for the second author are displayed for the respective segment as a whole. For example displays an indicium of an attribution value for author X the first author and an indicium of an attribution value for author Y the second author alongside segment as a whole. Specifically X 33 Y 66 appears next to segment .

In some embodiments for each respective segment of source code in the portion of the second version of the software program that has changed relative to a corresponding segment of source code in the first version of the software program the device determines an attribution value for the first author based in part on one or more differences between the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software. In some embodiments for each respective segment of source code in the portion of the second version of the software program that has changed relative to a corresponding segment of source code in the first version of the software program the device determines an attribution value for the second author based in part on one or more differences between the respective segment of source code in the second version of the software and the corresponding segment of source code in the first version of the software. For example if a portion of a second version of a software program includes five segments that have changed relative to corresponding portions in a first version of the program the device determines attribution values for the authors of both the first and second versions for all five of the segments.

With reference to in some embodiments the device displays e.g. if the method is performed at a client computer or a standalone computer or sends instructions for displaying e.g. if the method is performed at a server computer that sends its results for display on a client computer at least some of the second version of the software program such that for each respective segment of source code in the portion of the second version of the software program that has changed at least one of an indicium of the attribution value for the first author and an indicium of the attribution value for the second author are displayed with the respective segment of source code in second version of the software program. For example continuing the preceding example if the portion of a second version of the software program includes five segments that have changed relative to corresponding portions in the first version of the program the device displays or sends instructions for displaying for all five of the segments an indicium of the attribution value of at least one of the authors.

In some embodiments the device displays e.g. if the method is performed at a client computer or a standalone computer or sends instructions for displaying e.g. if the method is performed at a server computer that sends its results for display on a client computer an indicium of an author with a highest attribution value for the respective segment with e.g. alongside or next to the respective segment of source code in the second version of the software program. For example user interface in displays an indicium of author Y e.g. Y next to segment indicating that author Y has the highest attribution value for segment e.g. 66 as described above . As another example the indicia of the attribution values in include stars for each author where more stars correspond to a higher attribution value. Thus for segment author Y has the highest attribution value reflected by an indicium of two stars.

In some embodiments the device accesses a comparison of at least a portion of a third version of the software program to a corresponding portion of the second version of the software program. In some embodiments the device accesses a comparison of the entire third version of the software program to the entire second version of the software program. In some embodiments the third version of the software program corresponds to a third commit of the software program in a revision control system.

In some embodiments the portion of the third version of the software program includes revisions to the corresponding portion of the second version of the software program the revisions including segments of source code e.g. particular lines blocks paragraphs functions methods or classes in the source code in the third version of the software program that have changed relative to corresponding segments of source code in the second version of the software program. In some embodiments the revisions are contained in segments of source code in the third version of the software program that have changed relative to corresponding segments of source code in the second version of the software program.

In some embodiments the revisions to the corresponding portion of the second version of the software program were written by a third author. For example user interface in displays indicia of attribution values for a third author author Z in addition to the first author author X and the second author author Y .

In some embodiments for a respective segment of source code in the third version of the software program that has changed relative to a corresponding segment of source code in the second version of the software program the device determines an attribution value e.g. a numerical score a percentage value a letter grade etc. for the first author based in part on one or more differences between the respective segment of source code in the third version of the software and the corresponding segment of source code in the second version of the software.

With reference to in some embodiments the device determines an attribution value e.g. a numerical score a percentage value a letter grade etc. for the second author based in part on one or more differences between the respective segment of source code in the third version of the software and the corresponding segment of source code in the second version of the software.

In some embodiments the device determines an attribution value e.g. a numerical score a percentage value a letter grade etc. for the third author based in part on one or more differences between the respective segment of source code in the third version of the software and the corresponding segment of source code in the second version of the software. In some embodiments as described above the attribution values for the first second and third authors are based on the number of tokens and or lines that have been added removed and or changed.

In some embodiments the device displays e.g. if the method is performed at a client computer or a standalone computer or sends instructions for displaying e.g. if the method is performed at a server computer that sends its results for display on a client computer at least some of the third version of the software program such that for the respective segment of source code in the third version of the software program that has changed an indicium of the attribution value for the first author an indicium of the attribution value for the second author and or an indicium of the attribution value for the third author are displayed with e.g. alongside or next to the respective segment of source code in the third version of the software program. For example displays an exemplary indicium of an attribution value for the first author X 17 an exemplary indicium of an attribution value for the second author Y 33 and an exemplary indicium of an attribution value for the third author Z 50 displayed next to the respective segment of source code in the third version of the software program.

Although some of various drawings illustrate a number of logical stages in a particular order stages which are not order dependent may be reordered and other stages may be combined or broken out. While some reordering or other groupings are specifically mentioned others will be obvious to those of ordinary skill in the art so drawings herein do not present an exhaustive list of alternatives. Moreover it should be recognized that the stages could be implemented in hardware firmware software or any combination thereof.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the scope of the claims to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen in order to best explain the principles underlying the claims and their practical applications to thereby enable others skilled in the art to best use the embodiments with various modifications as are suited to the particular uses contemplated.

