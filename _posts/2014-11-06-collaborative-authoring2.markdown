---

title: Collaborative authoring
abstract: A collaborative authoring application provides an authoring environment in which two or more users can edit a document concurrently. Each user edits a copy of the document, sends updates to a master copy of the document, and receives updates from the master copy of the document. The authoring environment generally inhibits the users from providing conflicting editing instructions to the master copy of the document. For example, each user can generate a content lock about one or more data units within the document. The authoring environment may synchronize content locks automatically and content only at the request of the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547635&OS=09547635&RS=09547635
owner: Microsoft Technology Licensing, LLC
number: 09547635
owner_city: Redmond
owner_country: US
publication_date: 20141106
---
This application is a continuation of U.S. patent application Ser. No. 13 539 473 now U.S. Pat. No. 8 990 150 filed Jul. 1 2012 entitled Collaborative Authoring which application is a continuation of U.S. patent application Ser. No. 13 079 605 now U.S. Pat. No. 8 352 418 filed Apr. 4 2011 entitled Client Side Locking which application is a continuation of U.S. patent application Ser. No. 11 938 082 now U.S. Pat. No. 7 941 399 filed Nov. 9 2007 entitled Collaborative Authoring the complete disclosures of which are hereby incorporated herein by reference.

Traditional collaborative editing tends to be performed serially. Users take turns accessing a document editing the document and storing their edits. The accessing user may place a lock on the file to inhibit other users from editing the document when the accessing user is editing the document. The iterative editing process can cause delays since each user may wait for a turn at editing the document. In addition the iterative editing process may be difficult to manage. For example each user may need to keep track of who is editing which portions of the document which version of the document is the most recent and when the user will have a turn.

In other types of traditional collaborative editing each user can edit a different copy of a document. Subsequently all of the edited copies may be merged into a single document. This large scale merge also may cause delays lead to numerous editing conflicts and or be difficult to manage. For example the user responsible for merging the documents may be required to track the relationship between the documents. The user also may be responsible for resolving conflicts among two or more of the edited copies.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

A collaborative authoring application provides an authoring environment in which two or more users can edit a document concurrently. Each user edits a copy of the document periodically sends updates to a master copy of the document and periodically receives updates from the master copy of the document. The authoring environment generally inhibits the users from providing conflicting editing instructions to the master copy of the document. In other embodiments the authoring environment can inhibit editing conflicts if the users edit the document at different times.

According to aspects of the disclosure each document being authored can be divided into one or more data units. Each user can generate a content lock about one or more of the data units. Generating a content lock about a data unit inhibits other users from editing the locked data unit. In one embodiment content locks can grow and or shrink automatically as the user edits the document.

According to other aspects of the disclosure the authoring environment synchronizes both content and metadata among the user copies and the master copy of the document. In general the authoring environment synchronizes metadata automatically and synchronizes content only at the request of one of the users. In one embodiment the metadata includes content locks.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. While the disclosure will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a computer system those skilled in the art will recognize that the disclosure also may be implemented in combination with other program modules. The embodiments described herein may be combined and other embodiments may be utilized without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the invention is defined by the appended claims and their equivalents.

Embodiments of the present disclosure provide an environment in which multiple users can collaboratively author a document. illustrates an example authoring system having features that are examples of inventive aspects of the disclosure. The authoring system includes a storage device storing a master copy of a document . In one embodiment the storage device can include a computing device. In another embodiment the storage device can include one or more storage devices e.g. a network of computing devices .

The authoring system also includes at least one user computing device that is communicatively coupled to the storage device . Each of the user computing devices can edit the document by creating a user copy of the document and editing the user copy . The user copies of the document are synchronized when the user computing devices periodically send to the storage device updates to be shared with the other user computing devices and periodically obtain from the storage device updates from other user computing devices.

As the term is used herein a user computing device includes any computing device that obtains a user copy of a document to be authored from a master copy of the document. The user computing device can be different from the storage device or can include a different user account implemented on the storage device . In one embodiment a computing device that acts as a storage device for one document may act as a user computing device for a different document and vice versa.

In the example shown four user computing devices A B C and D are communicatively coupled to the storage device . In other embodiments however any number of computing devices may be coupled to the storage device . In the example shown each user computing device A B C D can send to the storage device updates generated by the user of the user computing device and can request from the storage device updates generated by the users of the other user computing devices. In one embodiment the storage device can be a server computing device and the user computing devices A B C D can be client computing devices.

As shown in the document stored on the storage device can include content and metadata . Authoring applications on the user computing devices process and manipulate the content and metadata of the user copies of the document . In some embodiments metadata can be stored separately from content . For example content can be stored in the document and metadata can be stored in a table see separate from the document . In other embodiments however the metadata can be stored within the document .

In general the user computing devices can synchronize updates to the content separately from updates to the metadata . In general metadata updates are automatically synchronized among the storage device and user computing devices whereas content updates from each user computing device are synchronized at the request of the respective user.

The first update operation synchronizes the metadata of the copy with the metadata of the document without requiring any interaction with the user. For example the first update operation can provide an exchange of metadata between the storage device and the user computing device at periodic time intervals. In one embodiment the first update operation provides for an exchange of metadata every few seconds. In other embodiments however the first update operation can provide for the exchange of metadata to occur in shorter or longer time intervals.

A request module determines whether a request to synchronize content has been received. For example the request module can determine whether a user of one of the user computing devices has requested to share content changes with other users. In another embodiment the request module can determine whether a user of one of the user computing devices has requested to view content changes made by other users.

If the request module determines that no request to synchronize content has been made then the synchronization process cycles back to the first update operation and begins again. If the request module however determines that a request to synchronize content has been received then the synchronization process proceeds to a second update operation which provides an exchange of content between the storage device and the user computing device . The synchronization process completes and ends at a stop module .

As the term is used herein content updates refer to any addition deletion and or revision made to the substantive content of a document. For example content updates for a word processing document can include added paragraphs i.e. or sections thereof deleted paragraphs i.e. or section thereof and or revised paragraphs i.e. or sections thereof . In another embodiment content updates for a presentation document can include added deleted and or revised pictures text animations sounds and other such data objects.

As the term is used herein metadata updates refer to any addition deletion and or revision made to metadata of the document. Non limiting examples of document metadata include content locks presence information and other such data. As will be discussed herein content locks inhibit editing of content within the lock by users that do not own the lock. Presence information indicates which users have indicated an intention to edit the document as will be discussed in greater detail herein.

Referring to content locks inhibit editing conflicts by indicating which portions of a document have been claimed by another user. In some embodiments the content locks can prevent i.e. bar a user from editing a portion of a document that has been claimed by another user. In other embodiments however the user can choose to break the content lock and edit the portion of the document. In such cases the lock can warn the user that conflicts may arise when editing the locked section.

For example is a schematic block diagram of a document having five units of data . In one embodiment the document is a word processing document and the units of data are paragraphs of text. In another embodiment the document is a presentation document and the first unit of data is a title or subject heading the second unit of data is a picture or other data object and the remaining units of data are blocks of text.

A first user can generate a lock about one or more of the units of data of the document . In the example shown in the second unit of data has been locked by the first user as indicated by the cross hatching. By generating the content lock the first user has indicated the first user intends to edit the unit of data . For example the user can generate the lock when the user is actively editing the unit of data . In another embodiment the user can generate the lock and then edit the unit of data at a later time. As noted above the authoring application managing the document may prevent a user other than the first user from editing the locked data unit .

In general a content lock generated by a first user is displayed to all other users who access the document during the life of the lock. In one embodiment the first user also can view the content lock. Locks can be displayed using different types of indicia. For example in one embodiment the background of a locked unit of data may be colored shaded or patterned e.g. see data unit of . In another embodiment the content e.g. text picture shape or other data object of the locked unit may be colored shaded or patterned. In yet another embodiment a box bracket or symbol can be displayed adjacent the locked unit of data to indicate the lock.

A content lock may be generated around one or more units of data within a document. In some embodiments the content lock can be generated implicitly without express instruction from the user. For example an authoring application may generate a content lock about a data unit when a user positions a cursor within highlights or otherwise selects the data unit. In another embodiment an authoring application may generate a content lock about a data unit when the user begins editing the data unit. In another embodiment an authoring application may generate a content lock about a data unit when a user saves edits made to the data unit. In some embodiments the authoring application may generate content locks around multiple inter dependent data units within the document even if only one of the data units is claimed by a user. In other embodiments a user may explicitly define a content lock about one or more data units.

In some embodiments a content lock can grow to include additional units of data within the document and or shrink to release one or more units of data within the document. In one embodiment the content lock can grow to include only contiguous units of data. For example as shown in the content lock e.g. see cross hatching around the second data unit can expand to include the third data unit if the user selects or edits the third data unit . A content lock or portion thereof generally can be released at the discretion of the user who generated the content lock. In some embodiments the user who generated the content lock releases the content lock by selecting or editing another data unit.

In one embodiment the user must indicate the user has finished editing the data unit before the authoring application will release the lock. For example the authoring application may release the lock only after the user has provided instructions to store the document. In another embodiment the authoring application may release a lock after the user selects or begins editing a remote data unit such as the fifth data unit of . In another embodiment the authoring application only releases a lock after both movement to a non contiguous data unit and a finalization act e.g. instructions to store the document . In other embodiments a content lock can be released explicitly by an administrator or another user.

Referring to lock metadata can be stored in a variety of different formats. For example the lock metadata of is stored in a table format . The lock table of includes a list of users each of whom is identified with a user identifier e.g. an identification number that is uniquely assigned to the user. Data units to be locked are identified with unit identifiers e.g. identification numbers that are uniquely assigned to each data unit within a document. The lock table associates the unit identifiers of the one or more data units to be locked with the user identifiers of the users who own the locks.

For example in the lock table data units and are associated with a first user . Other users therefore are inhibited from editing data units and . Data unit is associated with user . Other users including the first user therefore are inhibited from editing data unit . The fourth user has not locked any portion of the document and so is not associated with any unit identifiers. In other embodiments however lock metadata can be stored in a different format or within the document. For example the lock table can be arranged by unit identifier instead of by user identifier.

Presence metadata also can be stored in a variety of formats. For example presence metadata can be stored in the lock table of . In another embodiment however presence metadata can be stored in a separate table or in a different format. Presence metadata includes the user identifier of each user that is currently accessing the document or that has staked a claim e.g. generated a content lock on a data unit of the document. For example a metadata table such as the lock table can store the user identifier of each user having a claim to at least one data unit of the document. Like lock metadata presence metadata can be synchronized automatically.

The first synchronization process of initializes and begins at a start module and proceeds to a receive operation . The receive operation receives an instruction from the first user to perform an editing operation on one or more data units within a document. Non limiting examples of editing operations include adding editing and or deleting data units e.g. text drawings pictures shapes headings etc. or portions thereof adding and or deleting formatting of the data units rearranging a sequence of the data units and other such operations.

A first determination module checks if the data unit on which the editing operation is to be performed is locked. For example the first determination module can access a lock table such as the lock table of to determine whether a unit identifier assigned to the data unit is associated with any user. In another embodiment the first determination module can otherwise determine whether the data unit is locked.

If the first determination module determines the data unit is not locked then a generate operation creates a content lock on the data unit. For example in one embodiment the generate operation can add an entry to the lock table of associating the unit identifier of the data unit with the user identifier of the first user. A transmit operation sends lock metadata indicating the existence of the newly generated lock to the device storing the master copy of the document. For example the transmit operation can send the lock metadata from a user computing device such as computing device A of to a storage device such as storage device . In one embodiment the lock metadata includes instructions that describe incremental edits e.g. delta states to the lock metadata. An implement operation performs the editing operation on the data unit.

Alternatively if the first determination module determines the data unit is locked then a second determination module obtains ownership information for the lock. In one embodiment if the second determination module determines the lock is owned by another user then the synchronization process completes and ends at a stop module without performing the editing operation. In another embodiment not shown the synchronization process may enable the first user to choose to break the lock and then proceed to generate operation . However if the second determination module determines the lock is owned by the first user then the synchronization process proceeds to the implement operation discussed above. In another embodiment not shown the synchronization process can determine whether the lock on any data units should be released.

A third determination operation determines whether the first user has provided an instruction either explicitly or implicitly to share content changes to the data unit resulting from implementing the editing operation. For example the third determination operation may determine whether the first user has provided an instruction to store the document. In another embodiment the third determination operation may determine whether the first user has selected a share changes button or other such indicia. In another embodiment the third determination operation may determine an auto save feature has been implemented by the application. If the third determination operation determines instructions to share have not been provided then the synchronization process cycles back to the receive operation and begins again.

If the determination operation determines instructions to share have been provided however then the synchronization process proceeds to a transmit operation which sends content updates to the device storing the master copy of the document. Content updates indicate changes made to the content of the document by the editing operation. For example the transmit operation can send the content updates from a user computing device A of to a storage device . In one embodiment content updates include a newly generated version of the document. In another embodiment content updates indicate incremental edits e.g. delta states to the content between the current user copy of the document and the master copy of the document. The synchronization process completes and ends at the stop module as discussed above.

The second synchronization process of initializes and begins at a start module and proceeds to a receive operation . The receive operation receives an update based on changes made to the document by other users. The update can include changes to the content and or metadata of the document. In one embodiment the receive operation can poll the device storing the master copy of the document and request updates. In another embodiment the device storing the master copy can push changes to the authoring application.

A first determination module determines whether the update includes any changes to the metadata of the document. For example the first determination module can determine whether any other user has established a new lock or released a lock on a data unit. In another embodiment the first determination module can determine whether another user has accessed the document.

If the first determination module determines a metadata update has been received then an implement operation automatically instantiates the received metadata updates. For example the implement operation can cause the authoring application to update a lock table such as lock table of based on the metadata update. However if the first determination module determines no metadata update has been received then the second synchronization process proceeds to a second determination module .

The second determination module determines whether the update includes any changes to the content of the document. For example the second determination module can determine whether any data units have been added deleted revised or moved. If the second determination module determines a content update has not been received then the second synchronization process cycles back to the receive operation to begin again. However if the second determination module determines a content update has been received then the second synchronization process proceeds to an indicate operation .

The indicate operation alerts the first user that a content update is available for viewing. For example the indicate operation can display a graphic text box numerical indicia or other message indicating the availability of the content update. In one embodiment the indicate operation provides information to the user indicating how many updates are available. Other information about the updates e.g. user who made the updates timestamp etc. also may be indicated.

A third determination module determines whether the authoring application has received instructions from the first user either explicitly or implicitly to view and or instantiate the content updates. For example the third determination module can determine whether the user has selected a view option e.g. via a button menu or other interface tool of the authoring application. In another embodiment the third determination module may determine the user has selected an auto instantiate option. If the third determination module determines the authoring application has not received such instructions from the first user then the second synchronization process cycles back to the receive operation and begins again.

If the third determination module determines the authoring application has received instructions from the first user then an instantiate operation displays the content updates to the first user. For example in one embodiment the instantiate operation can merge the available content updates into the first user s copy of the document. In another embodiment the instantiate operation can annotate the first user s copy of the document to indicate which content has changed. Additional annotations can indicate which users made which changes. In one embodiment the instantiate operation performs conflict resolution between the user copy and the updates. The second synchronization process completes and ends at a stop module .

The user computing device includes an authoring application configured to provide an authoring environment in which a user can create and or manipulate a document to be authored. The user computing device also includes a cache a layer object LO and a synchronization manager sync manager . The cache stores a user copy of the document to be authored. The cache also stores the metadata including lock and presence metadata associated with the document. Updates to the content and metadata of the document also can be stored in the cache .

The layer object provides an interface between the authoring application and the cache . The layer object also provides an interface between the authoring application and the sync manager . The sync manager communicates with the storage device and provides an interface between the storage device and the cache . For example the sync manager can send updates to and obtain updates from the storage device and the cache .

In general an authoring environment having features that are examples of inventive aspects in accordance with the principles of the disclosure can be implemented on a user computing device e.g. a personal computer a server computer a notebook computer a PDA a Smartphone or any other such computing device . A non limiting embodiment of a user computing system configured to implement an authoring environment is described herein with reference to .

In the exemplary computing system for implementing the principles of the disclosure includes a user computing device such as user computing device . In a basic configuration the user computing device typically includes at least one processing unit for executing applications and programs stored in system memory . Depending on the exact configuration and type of computing device the system memory may include but is not limited to RAM ROM EEPROM flash memory CD ROM digital versatile disks DVD or other optical storage devices magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other memory technology.

System memory typically stores an operating system such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. suitable for controlling the operation of the computing device . System memory also may include a document cache in which a user copy of a document can be stored. Metadata of the document also can be stored within the user cache .

The system memory also may store one or more software applications such as authoring applications for creating and editing documents. One non limiting example of an authoring application suitable for authoring documents in accordance with the principles of the present disclosure is MICROSOFT OFFICE WORD authoring software from MICROSOFT CORPORATION of Redmond Wash. Other non limiting examples of authoring applications include POWERPOINT presentation software and VISIO drawing and diagramming software both also from MICROSOFT CORPORATION of Redmond Wash.

Computing device also may have input device s such as a keyboard mouse pen voice input device touch input device etc. for entering and manipulating data. Output device s such as a display screen speakers printer etc. also may be included. These output devices are well known in the art and need not be discussed at length herein.

The computing device also may contain communication connections that allow the device to communicate with other computing devices for example the storage device of over a network in a distributed computing environment e.g. an intranet or the Internet . By way of example and not limitation communication device media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

A generate operation creates a base copy and a working copy of the document based on the download copy . The working copy of the document can be manipulated by the authoring application to allow the user to edit the document. Accordingly the working copy reflects the current state of the document as edited by the user of the authoring application . The base copy reflects the state of the document at the time just before the user begins editing the document. In one embodiment the layer object generates the base copy of the document and the working copy and provides the working copy to the authoring application .

To obtain content updates generated by other users a poll operation causes the sync manager to contact the storage device periodically to obtain an updated download copy of the document being authored. The download copy reflects the state of the master copy of the document at the time of download. The master copy is stored on storage device and may include changes made by other users since the base copy was generated. The sync manager stores any updated download copy of the document in the cache .

An edit operation receives any instructions provided by the user to the authoring application to perform an editing operation on the document. The application makes the edits to the working copy of the document . The authoring application also makes metadata changes as appropriate when implementing the editing operations.

At a first determination module the layer object checks the cache to determine whether any updates have been received during the poll operation i.e. whether an updated download copy is available in the cache . In one embodiment the first determination module is performed at periodic intervals regardless of whether the user has edited the working copy of the document. In different embodiments the first determination module can be performed e.g. every few seconds milliseconds or minutes.

If the layer object determines a new download copy is not available then the synchronization process proceeds to a second determination module which will be discussed in greater detail below. If the layer object determines a new download copy is available however then the synchronization process proceeds to a sync operation . In one embodiment the sync operation automatically instantiates any metadata updates found in the download copy without requiring any interaction with the user of the authoring application . For example the layer object may automatically instantiates any lock metadata reflected in the download copy into the working copy of the document.

In some embodiments the sync operation does not automatically instantiate any content updates from the download copy into the working copy . Rather the sync operation only instantiates content updates when the user of the authoring application provides instructions to integrate the content updates. In other embodiments however the sync operation automatically instantiates the content updates. In one embodiment the sync operation causes the layer object to merge the updated download copy with the working copy when instructions to integrate are provided. In one embodiment the sync operation is the same as the second synchronization process shown in . In other embodiments however other synchronization processes can be used to integrate the updates with the working copy of the document. The synchronization process proceeds from the sync operation to the second determination module .

The second determination module determines whether the user made any changes to the working copy of the document or to the metadata of the document during the edit operation . If the second determination module determines that no edits i.e. neither content nor metadata have been made then the synchronization process cycles back to the poll operation and begins again. If the second determination module determines the user has made content edits e.g. revising a data unit of the document and or metadata edits e.g. locking a data unit of the document however then a share operation synchronizes the edits with the storage device .

The share operation causes the sync manager of the user computing device to send automatically to the storage device any changes to the metadata of the document without requiring any interaction from the user of the authoring application . In one embodiment the share operation does not cause the sync manager to send content updates to the storage device automatically. Rather the sync manager only sends content updates to the storage device when instructed to do so by the layer object . Automatically pushing only metadata may enhance the user experience by increasing update efficiency reduce network bandwidth usage and provide conflict inhibition without requiring auto syncing of content. In other embodiments however the share operation automatically pushes content as well as metadata. In one embodiment the share operation is the same as the first synchronization process of . In other embodiments however other synchronization processes can be utilized.

For example when the user wishes to share content revisions made by the user the user will instruct the authoring application to submit the revisions to the storage device for integration with the master copy of the document. In one embodiment the authoring application will instruct the layer object to generate an upload copy of the document. Generally the layer object generates the upload copy based on the working copy . The sync manager attempts to push the upload copy to the storage device . The synchronization process completes and ends at a stop module .

In some embodiments the share operation cannot send content updates to the storage device until all previous content updates received from the storage device have been instantiated into the working copy of the document. In such embodiments the upload copy can be generated by merging the working copy of the document with the most recently obtained download copy . In one embodiment the sync manager polls the storage device for an updated download copy when the layer object attempts to generate an upload copy .

If the sync manger fails to push the upload copy to the storage device e.g. if the upload copy does not reflect the most recent changes instantiated into the master copy then the sync manager retry with a revised update document . For example the sync manager may obtain a new download copy from the storage device and the layer object may generate a new upload copy from the working copy and the new download copy . In one embodiment the sync manager will continue to revise and push an upload copy to the storage device until successful.

Referring to the principles of the present disclosure can be better understood by walking through some example applications. represent changes made to a cache of a storage device a cache a first user computing device and a cache of a second user computing device during a collaborative authoring session in which a first user and a second user edit a document concurrently. In other embodiments however the first and second users can edit the document at different times using the same processes.

In the first user has created a document and saved an initial draft of the document to a storage device as a master copy . Alternatively the first user may have accessed the master copy of an existing document. The second user has not yet accessed the document.

The master copy of the document has a corresponding master lock table. For the sake of convenience in the example shown in the master lock table is displayed as part of the master copy . In other embodiments however the master lock table can be stored separately from the master copy of the document. Similarly for ease in understanding locks associated with each copy of the document e.g. base copy working copy download copy and upload copy stored on a user cache are shown in as part of the copy. In other embodiments however metadata may be separately stored for each document copy or for each user.

The master copy of the document includes a first data unit containing the text Hello World and a lock E on the first data unit. The lock E is owned by i.e. assigned to the first user. The content and metadata of the master copy are reflected in the base copy and download copy stored in the cache of the first user. Because the first user sent the initial draft of the document to the storage device the upload copy stored in the cache also reflects the content and metadata of the master copy .

Since sending the initial draft to the storage device the first user has edited the working copy of the document to include a second data unit containing the text Testing. A second lock E has been added about the second data unit. In one embodiment the second lock E is a new lock assigned to the user. In another embodiment the second lock E is an extension of the first lock E. For example a new unit identifier can be assigned to the first user in a metadata table stored in the cache of the first user. In one embodiment the first user creates the second lock E by moving a cursor to start a new data unit e.g. paragraph and typing Testing. The first lock E is not yet released because the first user has not yet indicated editing on the first data unit is final e.g. by saving after moving the cursor .

In the second user accesses the master copy of the document stored on the storage device. The second user obtains a download copy of the document and stores the download copy into the cache of the second user. The download copy includes the content and metadata of the master copy . The download copy does not include the most recent content and metadata contained in the working copy of the first user. The layer object of the second user generates a base copy and a working copy of the document based on the download copy. The authoring application utilized by the second user displays the content and any locks of the working copy to the second user.

In some embodiments the second user can edit the document even before a coauthoring session has been fully established i.e. before the first and second user computing devices learn of the presence of the other . For example the second user is allowed to edit the second working copy of the document while the first and second user computing devices exchange greetings i.e. handshake . Typically metadata is not exchanged automatically before the first and second computing devices learn of the existence of one another.

In the first and second computing devices each have discovered the existence of the other. Accordingly each of the first and second computing devices has begun transmitting metadata updates automatically to each other. As shown in the first authoring application provides updated lock metadata e.g. the second lock from the lock table of the first user to the storage device e.g. via a layer object and sync manager . The authoring application does not provide updated content information to the storage device however because no instructions to share content updates have been received from the first user.

In the storage device has integrated the updated lock metadata e.g. the second lock E into the master metadata table of the master copy . The lock metadata has not yet been obtained by the second user computing device. In the second user computing device has polled the storage device and obtained a new download copy of the master copy . A new download copy also has been generated e.g. via a layer object on the first cache based on the upload copy. In another embodiment the first user computing device also may have polled the storage device and obtained a new download copy of the master copy . Both of the new download copies reflect the updated lock information e.g. lock E from the working copy of the first user.

In the second computing device generates e.g. via a layer object a new working copy based on the new download copy. Accordingly the new working copy of the second computing device contains the second lock E on the second data unit. The new working copy does not include the second data unit itself however. In one embodiment the working copy of the second user computing device displays a blank empty data unit and indicates that the blank empty data unit is locked. In another embodiment the working copy does not display the second data unit at all and the lock E is not indicated to the second user until the second data unit is visible to the second user.

In the second user adds a third data unit to the document and a third lock E around the third data unit e.g. in the memory of the authoring application . The third data unit contains the text Goodbye World . The second authoring application generates e.g. via a layer object a working copy of the document including the third data unit and the third lock E. The second authoring application also automatically provides e.g. via a sync manager the third lock E to the storage device. However the second authoring application does not provide the third data unit to the storage device.

Also in the first user releases the first lock E after the first user indicates the first user has finished editing the first data unit. For example the first user can provide instructions to store the document when the cursor of the first user is positioned within the second data unit. In one embodiment the second data unit may be located remote from the first data unit. In the example shown the finalization indication provided by the first user does not indicate the first user wishes to share content changes made by the first user. Accordingly the first authoring application does not generate e.g. via a layer object an upload copy containing content changes for distribution to the storage device.

In the third lock E has been stored in the master lock table of the master copy of the document on the storage device. The first user computing device subsequently polls e.g. via a sync manager the storage device to check for updates. The first user computing device obtained e.g. via a sync manager a new download copy of the document from the storage device based on the master copy . The new download copy contains the third lock E. The first authoring application automatically instantiates e.g. via a layer object the third lock E into the working copy of the first authoring application. As noted above the third lock E optionally may be displayed to the first user using the user interface of the first authoring application.

In the second user releases the third lock E when the second user indicates the second user has finished editing the third data unit. The third lock E is removed from the metadata table of the second user. In the example block diagram shown in the third lock E is removed from the metadata tables corresponding to the working copy of the second authoring application.

In the example shown in the finalization indication provided by the second user indicates the second user wishes to share content changes with other users. For example the second user may remove a cursor from the third data unit and then provide instructions to store the document. Accordingly the second authoring application may generate an upload copy containing the content changes based on the working copy. In one embodiment the upload copy also can be based on any content updates e.g. in this case none found in the download copy that had not yet been instantiated into the working copy. In the example shown the upload copy includes the third data unit including the phrase Goodbye World. 

In the storage device obtains the third data unit from the upload copy of the second user computing device and merges the third data unit into the master copy of the storage device. The lock table associated with the master copy indicates the third lock E has been released. As shown in upon a successful push to the storage device the second authoring application copies e.g. via a layer object the upload copy to the download copy and the base copy of the second cache .

In the first user computing device obtains e.g. via a sync manager a new download copy of the master copy of the document. The first authoring application determines e.g. via a layer object the new download copy has been obtained and determines the new download copy includes content changes. The authoring application automatically merges any new locks none in this case into the working copy of the cache . The user interface of the first authoring application may indicate content updates are available for viewing.

In the first user chooses to instantiate the content updates available in the cache into the working copy of the document. Accordingly the authoring application merges the download copy stored in the cache with the working copy of the first authoring application. The third data unit is added to the working copy of the first authoring application and is displayed to the first user. The third lock E is released in the metadata table associated with the working copy of the first authoring application. The first user therefore may instruct the first authoring application to edit the third data unit.

Referring now to the user experience during the coauthoring session is described in detail below. illustrate changes to an exemplary user interface of a first authoring application as a first user and a second user collaboratively author a document . The first user Jane Doe edits the document using the first authoring application and the second user John Doe edits the document using a different authoring application.

The document includes a first data unit a second data unit a third data unit and a fourth data unit . The first user places a content lock around the first data unit . For example in one embodiment the first user may move her cursor to the first data unit . In another embodiment the first user may provide instructions to perform one or more editing operations on the first data unit .

In the first user has added text to the first data unit . The lock on the first data unit inhibits the second user from editing the first data unit . In one embodiment the first lock prevents the second user from editing the first data unit . In another embodiment the first lock warns the second user against editing the first data unit but does not bar editing by the second user. In yet another embodiment the first lock merely indicates the first user has expressed an intention to edit the first data unit .

In the second user has placed a content lock about the third data unit . Because the second user has chosen to not share his changes the second lock may be visible on the user interface of the first authoring application but any changes made to the third data unit by the second user are not visible yet. In the example shown the second lock is indicated by the user interface by displaying a bracket indicating the scope of the second lock . The second lock also can include a nametag indicating the owner of the second lock . In the nametag includes text identifying the second user and an icon. The icon can further identify a user by color symbol or other graphic.

In the first authoring application receives content updates for the document . The second user has chosen to share content changes with other users and accordingly merged content updates into a master copy of the document e.g. via one of the synchronization processes described above . A sync manager of the first authoring application obtained the updates from the master copy of the document by polling the device storing the master copy.

The user interface of the first authoring application displays an alert to the first user indicating the availability of the content update. In the example shown a text box appears in the user interface . In another embodiment the second lock or text within the second lock can change color pattern or formatting. In another embodiment an update counter increments when each new update is available.

The first user can choose to view instantiate the changes made by the second user or to ignore the content updates. The first user can continue to edit any unlocked data units within the document while ignoring the content updates. In one embodiment the first user must instantiate the content updates before merging her updates with the master copy. In the first user instructs the first authoring application to instantiate the content updates into the document displayed by the user interface of the first authoring application. Content changes made by the second user are now visible to the first user.

Embodiments of the disclosure may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The processes programs can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document. Another optional way is for one or more of the individual operations of the methods to be performed on a computing device in conjunction with one or more human operators performing some of the operations. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. The term computer readable media as used herein includes both storage media and communication media.

Those skilled in the art will appreciate that the disclosure may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The disclosure may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

