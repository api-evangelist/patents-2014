---

title: Honey monkey network exploration
abstract: A network can be explored to investigate exploitive behavior. For example, network sites may be actively explored by a honey monkey system to detect if they are capable of accomplishing exploits, including browser-based exploits, on a machine. Also, the accomplishment of exploits may be detected by tracing events occurring on a machine after visiting a network site and analyzing the traced events for illicit behavior. Alternatively, site redirections between and among uniform resource locators (URLs) may be explored to discover relationships between sites that are visited.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596255&OS=09596255&RS=09596255
owner: Microsoft Technology Licensing, LLC
number: 09596255
owner_city: Redmond
owner_country: US
publication_date: 20140716
---
This application is a divisional of U.S. patent application Ser. No. 12 818 038 filed Jun. 17 2010 which is a divisional of U.S. patent application Ser. No. 11 276 483 now U.S. Pat. No. 7 774 459 filed on Mar. 1 2006 the contents of which are both incorporated by reference herein.

Computers are used to conduct business acquire information and experience entertainment by visiting sites on the internet. Unfortunately some internet sites are designed to accomplish actions that are not requested by a user. These actions can result in harm to a computer and or to the user of the computer.

Malware is one term for software that can cause harm to a user. For example malware may report relatively innocuous generic marketing related information and or reduce the performance of a computer in which it has been installed. However malware can also damage or even destroy data files on a computer. Moreover and perhaps most dangerously malware can also be used to steal valuable personal or financial information.

Malware may be installed without a user s knowledge or the full extent of a malware program s functionality may be unknown to a user when installation is authorized. In any case malware is typically software that a user would ultimately rather not have present functional or executing on his or her computer because of the attendant risks. Consequently internet sites that wish to install malware have developed convoluted and secretive mechanisms for doing so without full knowledge of the user and even without first acquiring any authorization from a user.

A network can be explored to investigate exploitive behavior. For example network sites may be actively explored by a honey monkey system to detect if they are capable of accomplishing exploits including browser based exploits on a machine. Also the accomplishment of exploits may be detected by tracing events occurring on a machine after visiting a network site and analyzing the traced events for illicit behavior. Alternatively site redirections between and among uniform resource locators URLs may be explored to discover relationships between the sites that are visited.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure API arrangement etc. implementations are described herein.

This detailed description is divided into four sections. The four sections are entitled Example General Implementations for Honey Monkey Network Exploration Example Specific Implementations for Honey Monkey Network Exploration A Specific Example Multi Stage Implementation for a Honey Monkey Exploit Detection System and Example Device Implementations for Honey Monkey Network Exploration .

As illustrated honey monkey system includes a browser and a browser based vulnerability exploit detector . Internet includes some number u of URLs with u being an integer. Specifically internet includes URL URL . . . URL . URLs represent some location node etc. on internet . An example location is a site on the so called world wide web WWW .

An expanded diagram for URL includes a browser based vulnerability exploiter . Browser based vulnerability exploiter is capable of installing creating realizing or otherwise accomplishing an exploit during communication exchanges with honey monkey system . These communication exchanges are represented by request response exchanges . Specifically u request response exchanges . . . occur between honey monkey system and URL . . . respectively.

In a described implementation honey monkey system actively explores internet by sending an information request to a URL in order to elicit a response as part of a request response exchange . Honey monkey system uses browser to make the request in order to emulate the appearance of a standard browsing environment including any vulnerability or vulnerabilities that browser might expose to URLs .

Standard responses are directed to browser within honey monkey system . However suspect responses may be directed fully or partially to other software components. In operation a so called sandbox is created for browser . Typically a browser is capable of creating its own sandbox and it does so automatically to limit what changes the components loaded into the browser process can make during normal operations. When accomplishing an exploit the suspect responses usually extend beyond the browser sandbox. In an example implementation events that extend beyond the browser sandbox are detectable by browser based vulnerability exploit detector . An example of an exploit is the installation of malware. Malware examples are described further herein below.

By way of specific example honey monkey system directs browser to visit URL by requesting information from URL as a result of a redirection from URL . A user actually intends to visit URL . However URL responds with the requested information and additionally instructs the browser to visit URL which constitutes an example redirection . The exploiter served by URL is the requested information with respect to URL . In short URL is a bad actor and includes browser based vulnerability exploiter . As at least part of request response exchange URL activates browser based vulnerability exploiter . Browser based vulnerability exploiter accomplishes exploit at exploit realization . Exploit realization may be execution of some code installation of a program creation or modification of a file creation or adjustment to a registry setting some combination thereof and so forth.

Honey monkey system uses browser based vulnerability exploit detector to detect exploit . Example detection mechanisms are described further herein below. Examples include a black box event tracing mechanism and a vulnerability specific exploit detection mechanism. The former is described with particular reference to the flow diagram of .

At block a URL is selected. For example a honey monkey system may select a URL . Honey monkey system may also provide the selected URL to a browser along with an instruction to point the browser at the selected URL .

At block an information request is sent to the selected URL. For example browser may target the selected URL by sending an information request thereto. At block a response is received from the targeted URL. For example browser may receive a response from the targeted URL as part of a request response exchange . If URL includes a browser based vulnerability exploiter then the machine or device upon which honey monkey system is executing may also receive an exploit as a result of an exploit realization .

At block an exploit detection is performed. For example a browser based vulnerability exploit detector of honey monkey system may attempt to detect if any exploit has been accomplished e.g. realized . At block it is determined if an exploit is detected. If not then another URL is selected at block . For example the other URL may be contacted with a newly launched browser at block .

If on the other hand an exploit is detected at block then at block the detected exploit is analyzed. The analysis may optionally involve visiting URLs listed in a history of URLs that were visited as a result of browser redirection. The analysis may also optionally involve visiting the redirect URLs with a redirection blocking feature enabled so as to narrow down and actually identify pages that truly perform the exploits. Examples of redirection analysis are described further herein below with particular reference to .

Example general implementations are described in the preceding section and example specific implementations are described in this section as well as in the following section. However the general and specific implementations are not mutually exclusive. By way of example only aspects of specific implementation s may be incorporated into a general implementation. For instance a honey monkey controller and a virtual machine both of as described herein below may comprise all or part of a honey monkey system . Also a honey monkey system may incorporate some or all of the patch escalation exploit analysis features described herein below with particular reference to . Furthermore aspects of the specific implementations may be combined in many different manners. For example the virtual machine concepts of may be combined with the redirection analysis of .

The integer v may have any value of one or higher. So called heavy weight virtual machine products may be capable of having two three eight or more virtual machines running on a single physical machine So called light weight virtual machine products may be capable of having tens to even thousands of virtual machines running on a single physical machine.

In a described implementation honey monkey controller instantiates the v virtual machines . Each virtual machine includes a honey monkey module a strider tracer module and browser . Although illustrated separately honey monkey module and strider tracer module may reside in the same process. Moreover honey monkey module may be realized as two or more modules. For example one module may reside in kernel mode as a driver and the other module may reside in user mode as a dynamic linked library DLL that is loaded into the process module. In operation honey monkey module directs browser to engage in request response exchanges with URLs . During and or afterwards honey monkey module performs an exploit detection procedure to determine if an exploit was accomplished by a URL .

The exploit detection procedure is effected at least in part by inspecting a trace file created by strider tracer module . Strider tracer module is adapted to trace certain events e.g. operations actions etc. within a given machine be it a virtual machine or a real machine For example the following events may be traced registry writes file writes process creations some combination thereof and so forth. When it is ascertained from the trace file that an illicit event has occurred honey monkey module determines that an exploit has been detected. An example of creation s termination s interactions etc. between and among the various components of honey monkey machine is described further below with particular reference to .

At block a honey monkey HM controller starts a virtual machine VM . For example a honey monkey controller of a honey monkey machine may start a virtual machine . At block the honey monkey controller starts a honey monkey module and a strider tracer ST module. For example honey monkey controller may start a honey monkey module and a strider tracer module . Alternatively honey monkey module may be configured to auto start with the operating system. Strider tracer module begins tracing events within virtual machine to create a trace log.

At block the honey monkey module launches a browser. For example honey monkey module may launch a browser . Honey monkey module also provides a URL such as URL to browser . A URL list may be provided to honey monkey module from honey monkey controller .

At block the browser requests information from the targeted URL. For example browser may visit URL by requesting information from it as part of a request response exchange . In an exploit scenario the browser visitation is likely the result of a redirection or more specifically a cross domain auto visit. At block the browser receives a response from the targeted URL. For example browser may receive a response from URL . The response may or may not involve the accomplishment of an exploit of .

As part of a black box approach the honey monkey module waits a predetermined time period at block . For example honey monkey module may wait a predetermined time period such as one minute two minutes five minutes or some other duration. The longer the duration the greater the likelihood that any intended exploit will be accomplished during the predetermined time period and thus be efficiently detectable by this black box approach. On the other hand the longer the duration of the predetermined time period the fewer the number of URLs that may be explored each hour each day and so forth.

After expiration of the predetermined time period at block the honey monkey module provides a trace file to the honey monkey controller at block . For example honey monkey module may provide a trace file that is produced by strider tracer module to honey monkey controller . At block the honey monkey controller analyzes the trace file that is produced by the strider tracer module. For example honey monkey controller may inspect a trace file created by strider tracer module to detect the occurrence of events e.g. file accesses processing operations etc. that extend beyond the bounds of a browser sandbox.

At block it is determined by the honey monkey controller if an illicit event is evident from the trace file. If not then at block a next URL is selected. For example honey monkey module may provide another URL to a newly launched browser at block . A new browser process is launched for each URL so that the process ID can be correlated to the URL in the output trace files because the processes are more easily traceable. If on the other hand an illicit event is evidenced from the trace file to have occurred as determined at block then the method of flow diagram continues at block .

At block the honey monkey controller terminates the associated virtual machine. For example in response to detection of an exploit honey monkey controller terminates the virtual machine that is associated with the honey monkey module that is operating the exploited browser . At block the honey monkey controller restarts the virtual machine with a clean state. For example honey monkey controller may restart the affected virtual machine at a state that existed prior to beginning the request response exchange with the responsible URL .

Furthermore the virtual machine state may revert all the way back to a state prior to beginning any request response exchanges that are initiated for a batch of URLs. A batched network exploration approach is described further herein below. Moreover the virtual machine state may be restarted from a saved fully clean state that existed before any honey monkey initiated request responses to avoid the risk of contamination and because restarting from a clean state is relatively fast. When the virtual machine is started from a saved state the honey monkey module may be suspended in an input wait state.

At block the URL that is responsible for the exploit is assigned for further analysis or other action. For example recursive redirection analysis may be performed on URL . Such recursive redirection analysis is described further herein below with particular reference to . Examples of other actions that may be taken to combat an exploitive URL are described herein below with particular reference to .

Over the lifetime of a given software program more than one patch is often issued to update the software multiple times. At each phase or iteration as software migrates from lower patched software versions to higher patched software versions the software generally becomes less susceptible to exploits and thus more secure. At any given moment there is a software program having the latest update that may be considered the fully patched software version.

As illustrated block diagram includes software in four 4 different versions. These four versions are un patched software UP that is the initial version partially patched software PP that includes a first update partially patched software PP that also includes a second update and fully patched software FP that includes the latest update and represents the most recent version. Although four different versions of the software program are illustrated in block diagram and are described herein fewer than four or more than four different versions may alternatively be in effect for a given software program .

Partially patched software PP having the first update is generally less susceptible to exploits than un patched software UP . Partially patched software PP that has the first and second updates is generally less susceptible to exploits than partially patched software PP that has only the first update. The fully patched software FP that has the latest update is generally the least susceptible to exploits.

Software may comprise a browser of an operating system not explicitly shown some other software program some combination thereof and so forth. To determine if software is vulnerable to an exploit from a given URL the given URL is visited and the occurrence of an exploit is detected as described herein. Generally when a certain exploit is detected the honey monkey system escalates the investigation of the given URL in phases by visiting it with software having an ever increasing patch level. When a particular patch level is first reached that is not vulnerable to the detected exploit then it can be inferred that that particular patch level fixes the vulnerability attacked by the detected exploit.

In block diagram a given URL is first visited using un patched software UP . If an exploit is not detected at star then no escalation block is involved because even the most susceptible version of software is not the victim of i.e. is not successfully attacked by an exploit. Or in most cases URL is not a malicious URL so no attack was actually attempted. If an exploit is detected at star then the exploit investigation is escalated by using a partially patched software PP version that includes a first update.

Thus partially patched software PP visits the given URL . If an exploit is not detected at star then it is apparent at block that the exploited vulnerability in software is fixed by the first update. If an exploit is detected at star then the exploit investigation is further escalated at yet another phase by using a partially patched software PP version that includes a second update which incorporates the first update in this example.

Thus partially patched software PP that includes the second update visits the given URL . If an exploit is not detected at star then it is apparent at block that the exploited vulnerability in software is fixed by the second update. If an exploit is detected at star then the exploit investigation is further escalated by using a fully patched software FP version that includes the latest update.

Thus fully patched software FP that includes the latest update visits the given URL . If an exploit is not detected at star then it is apparent at block that the exploited vulnerability in software is fixed by the latest update. If an exploit is detected at star then it is apparent that a so called zero day exploit has been detected at block . A zero day exploit is considered to be an exploit that exists before the patch for the exploited vulnerability is released. The vulnerability related to the zero day exploit can be known or unknown generally e.g. to the public at the time of detecting the zero day exploit.

In a described implementation strider tracer module traces the actions that occur within the machine including URL redirections. Alternatively the URL redirections may be traced by a separate module or they may be separated into sub modules and so forth. Regardless URL tracing may be accomplished at any of several possible layers. Examples include implementing the URL tracer as a DLL that loads into the browser and implementing the URL tracer as a proxy which may be implemented as a service or some separate executable. For instance a proxy may register itself with the system and have browser http requests routed through the proxy. Another example is implementing and installing a Winsock Layered Service provider which is a type of DLL. This provider intercepts network traffic on the machine and inspects and traces the traffic generated from the browser. Another example is implementing a driver that intercepts network traffic at the kernel level.

Site redirection is a browser concept that enables a browser to be redirected from one site to one or more other sites. It is capable of providing modularity on the internet. The redirection may occur without the authorization or even knowledge of the user. Especially when the site redirection occurs without the knowledge of the user redirection may be more precisely termed a cross domain auto visit . For most exploit scenarios the page content stays at the URL to which the user originally directed a browser while the other URL s are being auto visited by the browser under the cover. Although there are legitimate purposes to redirection that benefit web site operators and browser users alike site redirection can also be used for nefarious purposes. For example it is often used by exploit providers to hide their identity and or make exploit detection more difficult to track and prevent. The exploit experts pay provider sites to redirect clients to their exploitive sites. Malware development companies then pay exploiters to install their software.

As illustrated browser is directed by a user to visit URL A . The information e.g. hypertext markup language HTML data that is received from URL A causes browser to be redirected to URL B . The information received from URL B causes browser to be redirected to URL C . The information received from URL C causes browser to be redirected to URL D . One or more of these URLs A B C and D may attempt whether or not successfully to accomplish an exploit. Although not so illustrated by the redirection chain of information received from a single URL may cause multiple redirections to multiple other URLs . Situations in which a single URL initiates multiple auto visits of other URLs may be envisioned as a branching tree of redirections. These are also handled by site visitation trace mechanism with strider tracer module .

As described herein above strider tracer module traces events that occur within a system. These events are logged into trace file . In addition to file reads writes registry changes etc. strider tracer module traces the sites that are visited by browser . It traces URLs that are visited directly and those that are visited indirectly via redirections . These traced sites are included in visited URL list as part of trace file . The traced sites may be further divided between directly visited sites e.g. URL A and indirectly visited or redirected sites e.g. URLs B C D . Also each may be listed separately directly visited sites may be excluded and so forth.

By further investigating the URLs included within URL list site and page interrelationships can be gleaned. The knowledge of such interrelationships can be magnified if combined with other visited URL lists from other trace files . Moreover the complexity of interrelationships between content providers and exploit providers can be further illuminated if visited URL lists are recursively analyzed.

For example each URL that is listed in visited URL list can be fed back into the honey monkey system in order to direct a browser to visit each of them. Visitation of each of these URLs produces a new visited URL list . These new visited URL lists are likewise visited. This recursive process continues for each branch until URLs that are included on a visited URL list does not produce any redirections. The result is a dynamically generated tree in which each node is visited down each branch until each leaf is reached. Such a tree may be traversed depth first or breadth first.

In other words visiting each URL on a visited URL list creates another visited URL list . For this reason generational terminology e.g. parent child grandchild is adopted to describe in greater detail this recursive analysis of visited URL lists . More specifically an initial visited URL list that is generated from a general pool of URLs is termed the parent visited URL list. Visited URL lists that are generated by visiting individual URLs on the parent visited URL list are termed child visited URL lists. The URLs listed on the child visited URL lists are termed child URLs. Visited URL lists that are generated by visiting individual child URLs on a child visited URL list are termed grandchild visited URL lists that are populated with grandchildren URLs. The process continues recursively until a child grandchild great grandchild etc. does not beget another visited URL list .

At block a parent visited URL list is extracted from a trace file. For example a visited URL list may be extracted from a trace file . At block the first URL of the parent visited URL list is visited. In this example the parent visited URL list is divided between directly visited site s and indirectly visited or redirected site s . When focusing on the redirections in a recursive analysis the directly visited site is ignored and the first redirected site in the listing is visited. In accordance with the example of the site of URL B is thus visited for block .

At block a child visited URL list is produced. For example a child visited URL list not separately shown is produced as a result of directly visiting URL B of the parent visited URL list . At block each child URL of the child visited URL list is recursively visited too. In other words each visited child URL may beget a grandchild visited URL list that includes one or more grandchildren URLs. The sites listed on the grandchildren URL lists that are created by visiting each child URL of the child visited URL list are also visited. The recursive process continues until each child URL grandchild URL great grandchild URL etc. does not beget another visited URL list .

At block site page and redirection relationships are recorded. For example the sites that are visited the pages that they host or serve and the redirections between and among them may be stored into memory for subsequent manipulation e.g. automated analysis graphing of the data etc. .

At block it is determined if all of the parent URLs of the parent visited URL list have been visited. If not then the next parent URL of the parent visited URL list is selected at block and the method of flow diagram continues from block .

If on the other hand all of the parent URLs of the parent visited URL list have been visited as determined at block then a topology graph of URL redirection relationships is created at block . For example the site redirections between and among different sites and their hosted pages may be indicated in a topology graph. Sites may be identified as being content provider sites or exploit provider sites. An example topology graph is described below with particular reference to .

Generally page nodes may be differentiated from site nodes by varying the shape color size some combination thereof etc. of the symbols representing the nodes. Also the serving relationship between sites and pages may be differentiated from redirection relationships by line style by color by line thickness by some combination thereof and so forth. Other connection relationships may be similarly indicated and or differentiated. The number of connection relationships e.g. serving redirection etc. between nodes both connecting to a given node and emanating therefrom may be indicated by the node symbol. In the illustrated topology graph the size of the symbol indicates this overall connectedness but other changes to the symbols may alternatively be employed.

Specifically topology graph is actually indicative of an example real world analysis of interrelationships between sites and pages that are involved in exploits. Specifically there were 17 exploit URLs layered over 10 sites. Rectangular nodes represent individual exploit URLs. Thick solid arrows between rectangles represent automatic traffic redirections . Circles represent site nodes that act as an aggregation point for all exploit pages hosted on that site with each site node having a relatively thinner edge or line connecting each of its hosted child page rectangles . Page nodes CP that do not receive redirected traffic are most likely those of content providers. Page nodes EP that do receive traffic from multiple exploit sites e.g. the large rectangle R near the bottom of the graph are most likely those of exploit providers.

The size of a node is proportional to the number of cross site arrows directly connected to it both incoming and outgoing. Such size numbers provide a good indication of the relative popularity of exploit URLs and sites. This popularity measure is referred to as being based on connection counts. It is clear from the picture that the large rectangle R and its associated circle C have the highest connection counts. Consequently blocking access to such a site would likely be the most effective starting point for combating malware realized from the analyzed URLs because it would disrupt nearly half of the exploit network graphed in .

Two example ranking algorithms that help prioritize the investigations of large scale topology graphs are described. Examples of such large scale topology graphs are those with hundreds thousands or even more URLs and or sites. Site ranking can be based on connection counts and or on the number of hosted exploit URLs.

With respect to site ranking based on connection counts each site may be ranked according to the number of connections to and from a site. With a bar graph for example a bar height for a given site indicates how many other sites the given site has a direct traffic redirection relationship with. Hence the bar height likely reflects how entrenched a site owner is within the exploit community.

By way of example only the bar for a given site may also be divided into segments of different filling e.g. pattern and or color . For instance a segment of a first color may represent the number of sites that redirect traffic to the given site. A segment of a second color represents the number of sites to which traffic is redirected from the given site. A segment of a third color indicates the number of sites that have a two way traffic redirection relationship with the given site.

Site ranking categorization and grouping can play a key role in the anti exploit process because they serve as the basis for deciding the most effective resource allocation for monitoring investigating blocking and legal actions. For example exploit sites that are highly ranked in a site ranking graph should be heavily monitored because a zero day exploit page connected to any one of them is likely to affect a large number of web sites. Similarly legal investigations should focus on the top exploit providers rather than on the content providers that are mere traffic redirectors and do not actually perform exploits themselves.

With respect to site ranking based on the number of hosted exploit URLs each site often hosts more than one exploit URL. On a bar graph for example each site may have a bar entry with the size of the bar dependent on the number of hosted exploit URLs. This type of ranking helps highlight those web sites whose internal page hierarchy provides important exploit provider operational insights. First some web sites host a large number of exploit pages with a well organized hierarchical structure. Second some sophisticated web sites use transient URLs that contain random strings.

The described example specific honey monkey exploit detection system attempts to automatically detect and analyze a network of web sites that exploit web browsers. Aspects of the specific example system described in this section may also be incorporated into the example implementations described herein above.

As illustrated honey monkey exploit detection system receives a list of interesting URLs as input A as well as a semi recursive depth N crawling of a given exploit URL input B . Three outputs are also shown. These three outputs are exploit URLs output A topology graph of exploit URLs B and topology graphs of zero day or latest patched vulnerability exploit URLs C .

By way of example only malicious activities performed by actual web sites exploiting browser vulnerabilities can be divided into four steps code obfuscation URL redirection vulnerability exploitation and malware installation.

Code Obfuscation To complicate investigation and to escape signature based scanning by anti virus anti spyware software some web sites use a combination of the following code obfuscation techniques 1 dynamic code injection using the document.write function inside a script 2 unreadable long strings with encoded characters such as 28 104 etc. that are then decoded either by the unescape function inside a script or by the browser 3 custom decoding routine included in a script and 4 sub string replacement using the replace function. Because code obfuscation is a common technique it limits the ability of attack signature based detectors to detect new attacks that leverage old exploit code.

URL Redirection Most malicious web sites automatically redirect browser traffic to additional URLs. Specifically when a browser visits a primary URL the response from that URL instructs the browser to automatically visit one or more secondary URLs. This redirection may or may not affect the content that is displayed to the user. Such redirections typically use one of the following mechanisms classified into three categories 1 protocol redirection using HTTP 302 Temporary Redirect 2 HTML tags including inside and 3 script functions including window.location.replace window.location.href window.open window.showModalDialog and .click and so forth. Because redirection is commonly used by non malicious sites to legitimately enrich content simply eliminating redirection from a browser s functionality would present significant complications

Vulnerability Exploitation It is not uncommon to see a malicious web page attempting to exploit multiple browser vulnerabilities in order to maximize the chance of a successful attack. If any of the attempted exploits succeed malware may be downloaded and executed. Examples of malware include a Trojan downloader a virus spyware and so forth.

Malware Installation The purpose of an exploit is almost always to introduce some piece of arbitrary code on the victim machine as a way to achieve a larger attack goal. There are many different malcode types that are installed through browser exploits including but not limited to viruses that infect files backdoors that open entry points for future unauthorized access bot programs that allow the attacker to control a whole network of compromised systems Trojan downloaders that connect to the Internet and download other programs Trojan droppers that drop files from themselves without accessing the Internet and Trojan proxies that redirect network traffic. Some spyware programs and even anti spyware programs are also installed through exploit behavior.

The example honey monkey exploit detection system comprises a 3 stage pipeline of virtual machines VMs . Stage 1 is scalable honey monkey exploit detection with unpatched VMs and without redirection analysis. Stage 2 is basic i.e. unscaled honey monkey exploit detection with at least partially un patched VMs and with redirection analysis. Stage 3 is basic honey monkey exploit detection with nearly fully patched VMs and with redirection analysis. Fully patched VMs may also be used to detect true zero day exploits.

Given a large list of input URLs A with a potentially low exploit URL density each honey monkey in Stage 1 starts in a scalable mode by visiting N URLs simultaneously inside one unpatched VM. The simultaneous visitation may be considered a batched or grouped approach to visiting N URLs. When the honey monkey VM detects an exploit it switches to a basic one URL per VM mode to re test each of the N suspects in the batch so as to determine which one or ones are actually exploit URLs A .

Stage 2 honey monkeys scan those exploit URLs that are detected from Stage 1 honey monkeys. Stage 2 honey monkeys also perform recursive redirection analysis to identify multiple up to all web pages involved in exploit activities and to determine their relationships. Stage 3 honey monkeys continuously scan those exploit URLs that are detected in Stage 2 using nearly fully patched honey monkey VMs so as to detect attacks exploiting the latest vulnerabilities.

Although it is possible to detect browser exploits by building signature based detection code for each known vulnerability or exploit this approach is manually intensive and may be unsuitable to the detection of zero day exploits . To reduce manual costs a black box approach that is not signature based is adopted. More specifically a honey monkey module launches a browser instance to visit each input URL and then waits for a few minutes to allow downloading of any code that may have a short time delay before installation.

A group of persistent state changes is then detected to signal exploitation. Because the honey monkey is not instructed to click on any dialog box to permit software installation any executable files or registry entries created outside the browser sandbox indicate an exploit. This approach has the additional important advantage of allowing the detection of both known vulnerability exploits and zero day exploits in a uniform way. For instance the same honey monkey module running on un patched machines to detect a broad range of browser based vulnerability exploits as shown in Stages 1 and 2 can run on fully patched machines to detect zero day exploits as shown in Stage 3.

At the end of each URL visit the honey monkey module in conjunction with a strider tracer module generates a report e.g. in XML . The report may contain many different types of information. By way of example only all or part of the following five pieces of information may be included 

To ease the cleanup from an infected state the honey monkey modules are run inside one or more VMs. Upon detecting an exploit the honey monkey saves its logs and notifies a monkey controller on the host machine. The monkey controller destroys the infected VM and re spawns or re instantiates a clean VM and honey monkey module which then continues to visit the remaining URL list. The monkey controller then passes the detected exploit URL to the next honey monkey module in the staged pipeline to further investigate the strength of the exploit.

In a described implementation many exploit URLs that are identified in Stage 1 do not perform the actual exploits. Instead they act as front end content providers that serve interesting content in order to attract browser traffic. This traffic is then sold and redirected to back end exploit providers which specialize in exploiting clients and installing malware.

URLs visited through traffic redirection can be tracked with a Browser Helper Object BHO running within each browser process or by intercepting and analyzing network packets. When a honey monkey module runs in its redirection analysis mode any automatically visited URLs are fed back to the system for further investigation. This recursive scanning allows the construction of topology graphs based on traffic redirection. Topology graphs may graph different types of URLs such as exploit URLs generally B zero day or latest patched vulnerability exploit URLs C some combination thereof and so forth.

Analysis of topology graphs enables the identification of major exploit providers that receive traffic from a large number of content providers. They also show how exploit providers organize their web pages in a way that facilitates customized malware installations for each of their affiliates. Finally the web pages that actually perform the exploits may be positively identified by activating an optional feature in the redirection tracker to block all redirection traffic. More specifically singular URLs that are included as part of a list of redirection URLs may be individually visited by activating a redirection blocking feature which ensures that only the intended URL is directly visited. Thus single URLs may be selectively and sequentially visited to determine whether or not each particular page is responsible for performing an exploit.

An example anti exploit process involves generating input URL lists A for honey monkey modules to scan and taking various actions based on analyses of the output exploit URL data A .

In a described implementation three sources are used for generating interesting URLs A for analysis. The first category is directed to suspicious URLs. Examples include web sites that are known to host spyware or malware links appearing in phishing or spam emails or instant messages web pages serving questionable content such as pornography URL names that are typos of popular sites web sites involved in DNS cache poisoning and similar common sources of malicious web content.

The second category is directed to the most popular web pages. These web pages if compromised can potentially infect a large population of users. Examples include the top 100 000 web sites based on browser traffic ranking or the top N million web sites based on click through counts as measured by search engines.

The third category is directed to URL lists of a more localized scope. For example an organization may want to regularly verify that its web pages have not been compromised to exploit visitors. Also a user may want to investigate whether any recently visited URL was responsible for causing a spyware infection.

There are many options available to combat exploit behavior. Of course some are more effective than others especially depending on the exploit context and the resources that are available. Example anti exploit options are presented in at .

Firstly exploit URLs A may be used in an analysis of exploit URL density or to fix compromised machines. Secondly topology graphs of exploit URLs B may be provided to an internet safety enforcement team and or to an anti spyware team. They may also be used for access blocking to block access to the exploitive URLs. Thirdly topology graphs of zero day or latest patched vulnerability exploit URLs C may be forwarded to a security response center as well as to browser or related software teams.

Generally device may represent a server device a storage device a workstation or other general computer device a set top box or other television device a personal digital assistant PDA mobile telephone or other mobile appliance an electronic machine generally some combination thereof and so forth. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media includes processor executable instructions . Although not specifically illustrated device may also include other components.

In a described implementation of device I O interfaces may include i a network interface for communicating across network s ii a display device interface for displaying information on a display screen iii one or more man machine device interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen television or printer and so forth. Examples of iii man machine device interfaces include those that communicate by wire or wirelessly to man machine interface devices e.g. a keyboard or keypad a mouse or other graphical pointing device a remote control etc. .

Generally processor is capable of executing performing and or otherwise effectuating processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device .

Thus realizations for honey monkey network exploration may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs applications coding modules protocols objects interfaces components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media and storage and transmission media e.g. wireless or wired communication channels . For example media may include an array of disks for longer term mass storage of processor executable instructions random access memory RAM for shorter term storage of instructions that are currently being executed flash memory for medium to longer term storage optical disks for portable storage and or link s on network for transmitting code or communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein. Examples include but are not limited to those of a honey monkey system or of those of a site visitation trace mechanism of those of flow diagrams and of a multi phase approach such as in block diagram of some combination thereof and so forth. As illustrated in processor executable instructions may also include a honey monkey module and or a strider tracer module of 

The machines devices actions aspects features functions procedures modules data structures schemes approaches phases stages architectures components etc. of are illustrated in diagrams that are divided into multiple blocks. However the order interconnections interrelationships layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses APIs arrangements etc. for honey monkey network exploration.

Although systems media devices methods procedures apparatuses techniques schemes approaches arrangements and other implementations have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

