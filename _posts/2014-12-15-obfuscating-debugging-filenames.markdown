---

title: Obfuscating debugging filenames
abstract: An information handling system, method, and computer-readable media for obfuscating debugging filenames during a software build are described. The system comprises one or more processors, a memory, and one or more program modules stored on the memory and executable by the one or more processors. The one or more program modules compile a source code file of a plurality of source code files into a program, generate a debugging file including debugging information for the program, utilize a one-way deterministic function to generate an obfuscated filename for the debugging file, and include a link to the debugging file in the program, the link including the obfuscated filename.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483381&OS=09483381&RS=09483381
owner: Dell Products L.P.
number: 09483381
owner_city: Round Rock
owner_country: US
publication_date: 20141215
---
As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

One subsystem of an information handling system is a Basic Input Output System BIOS which is often the first application executed by an information handling system upon start up. Among other things the BIOS loads a bootloader and an operating system during startup and is often responsible for critical functions of the information handling system. The BIOS is often constructed from multiple executable images each having specific functionality. If a hacker or other bad actor were to determine the general functionality of a particular section of the BOIS binary code the hacker might more easily reverse engineer the code to expose an attack surface or reveal a vulnerability of the BIOS.

In some embodiments an information handling system for obfuscating debugging filenames during a software build is described. The system comprises one or more processors a memory and one or more program modules stored on the memory and executable by the one or more processors. The one or more program modules compile a source code file or a plurality of source code files into a program generate a debugging file including debugging information for the program utilize a one way deterministic function to generate an obfuscated filename for the debugging file and include a link to the debugging file in the program the link including the obfuscated filename.

In some embodiments a method for obfuscating debugging filenames during a software build is described. The method comprises compiling a source code file or a plurality of source code files into a program where the program is included in a Basic Input Output System BIOS file. The method also includes generating a debugging file including debugging information for the program utilizing a one way deterministic function to generate an obfuscated filename for the debugging file and including a link to the debugging file in the program where the link includes the obfuscated filename.

In some embodiments one or more non transitory computer readable media storing programming instructions that are executable by one or more processors of a computing device to perform acts are described. The acts comprise compiling a source code file or a plurality of source code files into a program where the program is included in a Basic Input Output System BIOS file generating a debugging file including debugging information for the program utilizing a one way deterministic function to generate an obfuscated filename for the debugging file and including a link to the debugging file in the program where the link includes the obfuscated filename.

As noted above a BIOS image may be built from a collection of executables each linked together to form the BIOS image. To facilitate debugging either during development of the BIOS or during subsequent testing of a BIOS image that has been released to an end user device debugging information may be generated during the software build process and stored in a debugging file. One example of a debugging file is a program database PDB file. In order for the debugging file to be usable during the debugging process links to the appropriate debugging file are included in the compiled BIOS image. A linker generates the debugging information stores the debugging information in a debugging file and inserts a link to the debugging file e.g. a filename or a directory path and filename within the compiled code. The debugging file may take the name of the binary file to which it corresponds. For example PDB file foo.pdb may be associated with foo.exe or foo.dll.

For monolithic executables a single master debugging file is generated and a link to the master debugging file is added to the binary image of the executable. Other binary files such as BIOS images are often collections of independent executable images and may therefore contain multiple links to debugging files. It is often the custom of software developers to name these independent executable images using a description that calls to mind their function. For example a potential attacker doing a word search for password may find a link in the binary code to password.pdb thereby locating a section of the BIOS image associated with a password driver. Similarly a potential hacker performing a word search for TPM or HDD may be able to locate the section of the BIOS binary code associated with a Trusted Platform Module TPM or Hard Disk Drive HDD respectively.

Also the file path included in the debugging file links may reveal information about the system in which the software is built including for example the software running on the build system names of servers on the build system and other information. Any or all of this information may provide nefarious actors with enough information to enable them to reverse engineer the associated binary code and expose an attack surface or vulnerability within the software image or seek out attack vulnerabilities within the build system network. In this way the links to the debugging files can be thought of as an index of sorts for potential attackers to look for vulnerabilities.

Embodiments of the present disclosure describe methods for obfuscating the links to debugging information in the software image such that the underlying names and pathnames of the executables are not apparent from the links. Further details of the present disclosure will be apparent from the following description of the figures and associated embodiments. Although embodiments described herein refer to BIOS images and their associated debugging files embodiments are not limited to BIOS images and are generally applicable to any type of software e.g. firmware operating system software applications or the like being compiled with debugging file links included therein.

For purposes of this disclosure an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute calculate determine classify process transmit receive retrieve originate switch store display communicate manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control or other purposes. For example an information handling system may be a personal computer e.g. desktop or laptop tablet computer mobile device e.g. personal digital assistant PDA or smart phone server e.g. blade server or rack server a network storage device or any other suitable device and may vary in size shape performance functionality and price. The information handling system may include random access memory RAM one or more processing resources such as a central processing unit CPU or hardware or software control logic ROM and or other types of nonvolatile memory. Additional components of the information handling system may include one or more disk drives one or more network ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse touchscreen and or a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components.

The obfuscation script performs pre processing to generate obfuscated filenames runs the code linking module and performs post processing. In pre processing the obfuscation script utilizes a one way deterministic function to generate the obfuscated filename. A one way function is a function that cannot be reversed to determine the inputs used to generate known outputs. A deterministic function is one that generates the same outputs every time the same inputs are used. Hash functions are examples of one way deterministic functions. Thus the obfuscated filename is able to be regenerated from the same inputs each time but the obfuscated filename cannot be used to determine the original inputs. In embodiments the inputs to the one way deterministic function employed by the obfuscation script are the filenames of the software modules .

The obfuscation script runs the code linking module . The code linking module includes some functionality in some embodiments that enables the obfuscation script to pass along the obfuscated filenames as arguments to the code linking module . The code linking module builds a compiled BIOS image from the software modules . The compiled BIOS image includes links to debugging files having obfuscated names. The code linking module also generates the debugging files using the obfuscated names determined and passed to it by the obfuscation script .

In post processing after the code linking module completes the obfuscation script copies the debugging files from a build output directory to a common directory for debugging files. A reverse lookup file is also generated by the obfuscation script . The reverse lookup file maps the names of the software modules with the obfuscated names of their corresponding debugging files .

The compiled BIOS image is packaged as a BIOS update executable and provided to end user devices such as via a web download or in some other way. The compiled BIOS image may also in some embodiments be installed directly on the end user devices such as during production of the end user device .

A potential attacker hacker or other bad actor may obtain the compiled BIOS image such as by downloading and installing the BIOS update executable and extracting the BIOS image from memory. Once the compiled BIOS image is extracted from memory on a potential attacker device the potential attacker is able to view the binary code and can perform an ASCII search on the binary code. The compiled BIOS image includes as discussed above the links to the debugging files. In a conventional arrangement where the debugging files take their names from the binary software modules the links to the debugging files in the BIOS image would reveal the names of the binary software modules that correspond to the debugging files. However the BIOS image from memory includes obfuscated BIOS debug information which reveals obfuscated debugging filenames. Because the potential attacker does not have the reverse lookup file the potential attacker cannot make use of the obfuscated filenames revealed in the BIOS image to seek out potential attack surfaces or vulnerabilities or locations in the BIOS image from which data can be extracted or from which the BIOS could be made to perform unauthorized or unintended functions.

Upon creation of the debugging files and the reverse lookup file the obfuscation script stores or causes storage of the debugging files and the reverse lookup file in a release database . During debugging of the BIOS image the obfuscated BIOS debug information and the reverse lookup file are integrated to provide the appropriate debugging information including information about which software modules correspond to which debugging files to the BIOS developer device .

The obfuscation script in some embodiments adds a fixed directory path to the filename link in the BIOS image so that information regarding the build system cannot be determined from the directory pathname.

In some embodiments in addition to utilizing the names of the binary software modules as inputs to the one way deterministic function the obfuscation script also utilizes a cryptographic salt as an input. Adding a cryptographic salt further obfuscates the debugging filenames. A cryptographic salt may be a project name code name version number computer platform name or other non random and reproducible data related to the software build process. Adding the cryptographic salt makes it difficult for an attacker that has figured out what process that an obfuscated debugging filename corresponds to in a first BIOS image to use this information to locate the same section of code within a second BIOS image. Because the obfuscation script utilizes a deterministic function the same filename input for the software modules results in the same obfuscated filenames for the debugging files each time. If developers utilize the same filenames for each BIOS image they write then the obfuscated filenames will also carry forward to each BIOS image. A cryptographic salt that is different for two different BIOS images will result in different obfuscated filenames even if the software modules have the same filenames in both BIOS images.

The one or more processors may include a microprocessor controller programmable logic device such as a Field Programmable Gate Array FPGA an application specific integrated circuit ASIC or other hardware resource operable to execute the obfuscation module . The one or more processors may include one or more dual or multi core processors.

Computer readable memory may include any form of volatile or non volatile memory including magnetic media optical media random access memory RAM such as dynamic RAM DRAM static RAM SRAM or other. Forms of volatile or non volatile memory also includes read only memory ROM erasable programmable memory solid state memory such as flash memory removable media or any other suitable local or remote memory component or components.

In particular embodiments computer readable memory may include random access memory RAM . This RAM may be volatile memory. Computer readable memory may store any suitable data or information utilized by information handling system including one or more software modules embedded in a computer readable medium and or encoded logic incorporated in hardware. In particular embodiments computer readable memory may include main memory for storing instructions for one or more processors to execute or data for one or more processors to operate on. In particular embodiments one or more memory management units MMUs may reside between the one or more processors and computer readable memory and facilitate accesses to computer readable memory requested by the one or more processors . As used herein computer readable memory does not include purely transitory media such as signals and communication media. As such computer readable memory is a form of non transitory computer readable media. As used herein non transitory computer readable media includes one or more of optical storage magnetic storage RAM ROM solid state memory such as flash memory a hard disk drive a floppy drive tape storage a smart card an integrated circuit and so forth.

Software modules include one or more of applications binary code computer programs executable files computer executable instructions program modules source code expressed in a high level programming language such as C C Perl or other code expressed in a low level programming code such as machine code etc. An example software module is a BIOS file. Other examples include an application programming interface API a dynamic link library DLL file an executable file a firmware image and so forth.

At an obfuscation module such as the obfuscation module runs an obfuscation script or other code that utilizes a one way deterministic function to generate an obfuscated filename that will be used for naming a debugging file associated with the program. In embodiments the one way deterministic function is a hash function such as secure hash algorithm 1 SHA 1 function or other hash algorithm. In embodiments the one way deterministic function utilizes at least an original filename of the source code file or the program as an input into the one way deterministic function to generate the obfuscated filename. In the same or different embodiments the one way deterministic function utilizes at least a cryptographic salt as an input into the one way deterministic function to generate the obfuscated filename. In embodiments the obfuscation module also determines a directory pathway for the link to the debugger file to be placed into the binary code of the compiled binary. The directory pathway is in some embodiments a common pathway for a plurality of debugging files. In embodiments the obfuscation module determines the obfuscated filenames for the program files prior to running a linker.

At the obfuscation module runs a linker such as the code linking module to link a plurality of compiled program binaries into a compiled executable such as a compiled BIOS image. At the linker links the plurality of compiled program binaries into the compiled executable.

At the linker generates a debugging file that includes debugging information for the program as well as debugging files for all of the programs that form the compiled executable. At the linker includes a link to the debugging file in the program the link including the obfuscated filename determined by the obfuscation module for the program. The link to the debugging file in the program also includes a directory pathway where links for each of a plurality of debugging files for each of the source code files include the directory pathway.

At the obfuscation module generates a reverse lookup file that associates the obfuscated filename with an original filename of the source code file or the program. As noted above the reverse lookup file is not released with the compiled executable but is instead kept in a secure location.

At the obfuscation module moves the debugging files and the reverse lookup file to a common directory.

Processes described herein may be illustrated as a collection of blocks in a logical flow graph which represent a sequence of operations that can be implemented in hardware software or a combination thereof. In the context of software the blocks represent computer executable instructions that are executable by one or more processors to perform the recited operations. The order in which the operations are described or depicted in the flow graph is not intended to be construed as a limitation. For example the order in which the operations are performed may be changed without departing from the scope of the present invention Also one or more of the described blocks may be omitted without departing from the scope of the present disclosure.

Although various embodiments of the method and apparatus of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the scope of the present disclosure.

