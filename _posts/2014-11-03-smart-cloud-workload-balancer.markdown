---

title: Smart cloud workload balancer
abstract: A method and system for dynamically optimizing workload of a cloud computing system. The cloud computing system is configured into an operative status by defining a virtual machine (VM) topology representing a respective virtual machine assignment for each physical server of the cloud computing system. An objects database (ODB) stores: business policies, a respective software cost per software application in one or more software license pools, and a power cost of the cloud computing system. It is determined that the cloud computing system does not perform optimally with respect to a total cost of the cloud computing system, which is a sum of the respective software cost and the power cost. The workload of the cloud computing system is distributed pursuant to a new VM topology that has a minimum total cost of the cloud computing system pursuant to the business policies stored in the ODB.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09373096&OS=09373096&RS=09373096
owner: International Business Machines Corporation
number: 09373096
owner_city: Armonk
owner_country: US
publication_date: 20141103
---
This application is a continuation application claiming priority to Ser. No. 13 204 858 filed Aug. 8 2011 now U.S. Pat. No. 8 909 785 issued Dec. 9 2014.

The present invention discloses a system and associated method for dynamically optimizing workload distribution in a cloud computing system based on operating cost. Conventional workload optimization methods in cloud computing systems use static planning for overall operation. Since software licenses are required to run software application programs that services clients of the cloud computing system statically planning the number of software licenses in the cloud computing system causes operating cost issues. When the cloud computing system acquires enough number of software licenses to fully utilize all physical servers at all time the cloud computing system incurs unnecessary additional software license cost. Having too few number of software licenses to reduce extra cost may degrade utilization of the physical servers and performance of the cloud computing system.

According to one embodiment of the present invention a method for dynamically optimizing workload of a cloud computing system comprises configuring by a smart cloud workload balancer SCWB the cloud computing system into an operative status by defining a virtual machine VM topology representing a respective virtual machine assignment for each physical server of the cloud computing system such that the cloud computing system services workload of the cloud computing system by use of the VM topology wherein the cloud computing system comprises an objects database ODB storing system configuration parameters of business policies zero or more physical server availability zones zero or more physical server restriction zones zero or more physical server location pools zero or more software license pools a respective available licenses per software application in the software license pools a respective software cost per said software application a power cost of the cloud computing system at least one virtual machine VM and zero or more installed licenses per VM determining that the cloud computing system does not perform optimally with respect to a total cost of the cloud computing system based on the system configuration parameters stored in the ODB wherein said total cost is a sum of the respective software cost and the power cost and redistributing workload of the cloud computing system pursuant to a new VM topology that has a minimum total cost of the cloud computing system pursuant to said business policies stored in the ODB.

According to one embodiment of the present invention a computer program product comprises a computer readable memory unit that embodies a computer readable program code. The computer readable program code contains instructions that when run by a processor of a computer system implement a method for dynamically optimizing workload of a cloud computing system.

According to one embodiment of the present invention a computer system comprises a processor a memory coupled to the processor and a computer readable storage device coupled to the processor said storage device containing program code configured to be executed by the processor via the memory to implement a method for dynamically optimizing workload of a cloud computing system.

According to one embodiment of the present invention a process for supporting computer infrastructure said process comprising providing at least one support service for at least one of creating integrating hosting maintaining and deploying computer readable code in a computing system wherein the code in combination with the computing system is capable of performing a method for dynamically optimizing workload of a cloud computing system.

The cloud computing system comprises an administrator a configuration management database CMDB a smart cloud workload balancer SCWB an asset management database AMDB a virtual machine and hardware manager VMM and at least two physical servers. The CMDB the SCWB the AMDB and the VMM run on a respective generic computer system. See descriptions of infra for details of a generic computer system. An example of the cloud computing system is IBM Global Technology Services GTS infrastructure shared among customers of the IBM GTS which provides data processing services by use of System x physical servers virtualized by VMware and System p physical servers virtualized by PowerVM. IBM is a registered trademark of International Business Machines Corporation in the United States and other countries VMware is a registered trademark of VMware Inc. in the United States and other countries. 

The administrator is a human user configuring and monitoring operations of the cloud computing system by interacting with the SCWB . The administrator sets policies controlling the workload balancing defines costs for operating the cloud computing system as a sum of electrical power usage and software licensing fees verifies an ensemble status as to virtual machine assignment for respective physical servers and creates deletes and reconfigures virtual machines in respective physical servers. The administrator also receives a performance report in response to a request for the performance report.

The smart cloud workload balancer SCWB performs automated workload optimization over virtual machines of the cloud computing system such that the cloud computing system performs given workload with a minimum cost. The SCWB distributes the workload over the virtual machines in a way to minimize the operational costs of the cloud computing system based on technical availability and software license constraints of the cloud computing system . Examples of conventional workload balancing methods in cloud computing systems may be inter alia the VMware Distributed Resource Scheduling the Citrix Dynamic Workload Balancing the IBM Systems Director VMControl etc. Citrix is a registered trademark of Citrix Systems Inc. and its affiliates in the United States and other countries. The SCWB automatically reconfigures workload of the cloud computing system among virtual machines by utilizing dynamic zoning of physical servers based on policy restriction zones and availability zones for workload balancing and by utilizing multiple sources of performance data a cost model for software license cost and an automated workload optimizing method based on the performance data and the cost model. In this specification the term physical servers availability zone is defined as a logical group of physical servers that shares one or more external physical components such as power distribution units datacenter room rack network switches external storage etc. such that all physical servers in one availability zone operate atomically but not partially available. Also in this specification the term physical servers restriction zone is defined as a dynamic logical group of physical servers within a specific physical server availability zone that represents a logical condition such as inter alia a group having license to run a specific software program during a specific time period. See description of infra for functional components of the SCWB . See description of infra for steps performed by the SCWB .

The configuration management database CMDB stores information about dependencies between said at least one physical server and virtual machines running on respective physical servers and topology information as to virtual machine assignment for respective physical servers. The SCWB updates the CMDB with new topology information resulting from optimization of workload distribution among physical servers. In this specification terms VM topology and topology information are used interchangeably.

In another embodiment of the present invention the cloud computing system further comprises an external integration tool and or an external cloud automation tool. The external integration tool extends the functions of the SCWB by exchanging various data and metadata such as inter alia user directories billing and accounting data change management data service request etc. The external integration tool interacts with specific components within the SCWB . See description of infra for details of the components interfacing the external integration tool.

In the same embodiment the external cloud automation tool receives end user requests and automates provisioning of services in the cloud computing system . Examples of the external cloud automation tool may be inter alia ITSAM Eucalyptus etc. ITSAM is a registered trademark of Expetec Corporation in the United States and or other countries Eucalyptus is a trademark of Eucalyptus Systems Inc. in the United States and or other countries. 

The asset management database AMDB stores software asset information regarding a number of available software licenses a number of installed software licenses etc. In one embodiment of the present invention the administrator provides the asset information of the AMDB by interactive input to the SCWB wherein the asset information is not stored in the AMDB .

The virtual machine and hardware manager VMM monitors and manages said at least two physical servers and virtual machines running on said physical servers. The SCWB interacts with the VMM in receiving performance data of the cloud computing system and electrical power usage information. The SCWB automatically controls VM allocation over physical servers by use of the VMM communicating via inter alia hypervisors VMM application programming interfaces APIs . The VMM receives requests for virtual operations and physical operations from the SCWB and performs adding moving deleting suspending virtual machines to and from respective physical machines changing configuration of virtual machine assignment for respective physical servers. Examples of the VMM may be inter alia the Hardware Management Console HMC the VMware vCenter the Citrix XenCenter the IBM System Director etc.

A physical server of said at least two physical servers is a generic computer system that runs zero or more virtual machines. A virtual machine VM of said zero or more virtual machines is a software implementation of a computer system that services a portion of workload of the cloud computing system . In servicing the workload the virtual machine runs various software applications which is associated with a respective software license cost. Overall software license cost of running the software applications in the cloud computing system is calculated based on a respective number of physical or virtual central processing units CPUs in each physical server where a virtual machine that performs a software application is running. In this specification the terms CPU and processor are used interchangeably.

The SCWB comprises an objects database ODB a workload optimizer WO a monitoring and control module MC a user interface UI an automated operations application programming interface AO API a bulk data loader interface BDLI and an automation dispatcher interface ADI .

The objects database ODB stores information necessary for workload optimization over virtual machines VMs running on physical servers of the cloud computing system as used by the workload optimizer WO . The information is gathered from various components of the cloud computing system of supra. In one embodiment of the present invention the information stored in the ODB comprises policy information monitoring information configuration data and asset data.

The policy information indicates various policy data items stored in the ODB which define workload balancing policies per inputs provided by the administrator of the cloud computing system. Examples of the policy data items may be inter alia software asset information regarding a number of available software licenses and a number of installed software licenses as buffered from the AMDB of supra thresholds of workload per VM and or physical server a range of VM relocation frequency permitted in the cloud computing system a level of compliance to the software license agreement software license restrictions VM business priorities physical servers restriction zones and physical servers availability zones physical servers location pools VM affinity rules and VM anti affinity rules hardware constrains and power consumption limits etc. In this specification the term physical servers location pool is defined as a logical group of physical servers hosted by a same data center or a network such that the SCWB prevents a network congestion that may result from high data traffic required between virtual machines running in remote locations by allocating two virtual machines having high communication requirements in a same physical servers location pool. In this specification the term VM affinity rule is defined as a relationship between two virtual machines that perform better when the two VMs run in a same physical server. In this specification the term VM anti affinity rule is defined as a relationship between two virtual machines that cannot perform in a same physical server.

The monitoring information indicates various monitoring data items stored in the ODB as collected from the physical servers of the cloud computing system while normal operation processing the workload. Examples of the monitoring data items may be inter alia respective electrical power consumption of each physical server resource utilization information for each physical server and VM wherein the resource comprises processor memory and input output I O data communication channel bandwidth etc.

The configuration information indicates various configuration data items stored in the ODB as configured by the administrator and as buffered from the CMDB of supra. Examples of the configuration data items may be inter alia virtual machine VM configuration and physical server configuration. The VM configuration specifies for each VM a respective capacity and target performance level for resources of each VM comprising virtual processors memory and network. The physical server configuration specifies for each physical server a respective number of core processors a respective amount of memory CPU performance level relative to other CPU types available in the other physical servers in the cloud computing system etc.

The workload optimizer WO automatically performs workload optimization by use of linear or quadratic programming based on information retrieved from the ODB such that the WO dynamically decides a optimal workload distribution for virtual machines running in the physical servers of the cloud computing system wherein the workload distribution improves performance of the cloud computing system as well as meets operation criteria of the cloud computing system as specified by the information from the ODB . See description of step of infra and infra for detailed operations of the WO .

The monitoring and control module MC monitors virtual machines and physical servers of the cloud computing system for hardware constraints and system availability data during normal business operation. See description of step of infra and infra for detailed operations of the MC .

The user interface UI enables the administrator of the cloud computing system to interact with the SCWB by providing inputs determining restriction policies and other system configuration information. See description of steps and of infra for detailed operations of the UI .

The automated operations application programming interface AO API is an application programming interface API used by the external cloud automation tool and or the external integration tool to interact with the SCWB for system services provided by other components of the cloud computing system of supra. Examples of the system services may be inter alia creating a new virtual machine in a physical server delete an existing virtual machine from a physical server etc. See description of step of infra for detailed operations of the AO API .

The bulk data loader interface BDLI enables database components of the cloud computing system to update the content of the ODB . The external integration tool interacts with a bulk data loader interface BDLI for data synchronization. See description of step of infra for detailed operations of the BDLI .

The automation dispatcher interface ADI enables the virtual machine and hardware manager VMM of supra to interact with the SCWB in provisioning changing and removing virtual machines in provisioning a new physical server and in shutting down an existing physical server. See description of step of infra for detailed operations of the ADI .

The SCWB of the present invention dynamically optimizes workload distribution of virtual machines VMs over physical servers in the cloud computing system such that performing the workload in pursuant to an optimized workload distribution minimizes software license cost of the cloud computing system. To optimize workload distribution the SCWB takes system information into account in building a software license cost model. See description of the ODB for examples of the system information. The software license cost model may differ based on licensing objectives such as licensing per physical machines licensing per processors licensing per cores licensing by sub capacity differentiation of software costs by processor type etc. In one embodiment of the present invention the software license cost is calculated based on a number of VMs running a software application subject to a respective software license agreement. The SCWB dynamically analyzes the software license cost model and calculates a total cost of cloud computing and generates a new VM topology with minimum total cost subject real time content of the ODB as described in infra. The SCWB controls management of the cloud computing system virtual machine assignment and application distribution interfaces with external data sources and processing components etc.

Conventional workload optimization methods that use static planning for optimization are either ineffective or expensive. The cloud computing system needs to acquire software licenses for all physical servers in a resource pool to run a specific software application. Including all physical servers in the resource pool is not cost effective in terms of the software license cost since not all physical servers need to run the software application at all time. To reduce the software license cost the cloud computing system may limit a number of physical servers in the resource pool by excluding certain physical servers from the resource pool which limits flexible virtual machine reallocation of the cloud computing system because virtual machines running the software application cannot be allocated on the physical servers that is excluded from the resource pool. In contrast the workload optimization of the present invention dynamically reallocates any virtual machine to any physical server which provides flexible and cost effective workload optimization.

In step the SCWB configures the cloud computing system for production normal operation by use of a first group of functional blocks comprising the user interface UI automated operations application programming interface AO API and the bulk data loader interface BDLI of supra. In this specification the first group of functional blocks in the SCWB is referred to as a system configuration module. See description of infra for details of steps performed by the system configuration module for system configuration. After step is completed the cloud computing system starts production normal operation and the SCWB performs steps and concurrently with the production normal operation which are respectively associated with either a human trigger provided by the administrator or an automatic trigger given by the cloud computing system.

In step the SCWB monitors performance of the cloud computing system by use of the monitoring and control module MC of supra and updates content of the ODB with the monitored performance data. See description of infra for details of steps performed by the MC for monitoring performance of the cloud computing system.

In step the SCWB performs maintenance operations for the cloud computing system by use of a second group of functional blocks comprising the monitoring and control module MC and the automation dispatcher interface ADI of supra. In this specification the second group of functional blocks in the SCWB is referred to as a maintenance module. See description of infra for details of steps performed by the maintenance module for maintenance of the cloud computing system.

In step the SCWB optimizes workload of virtual machines within the cloud computing system by use of the workload optimizer WO of supra. See description of infra for details of steps performed for workload optimization.

In step the SCWB reports performance of the cloud computing system based on user request by use of the UI of supra. See description of infra for details of steps performed for reporting of the cloud computing system.

In step the system configuration module identifies virtual machine and hardware manager VMM and physical servers of the cloud computing system according to inputs provided by the administrator. The system configuration module subsequently updates data items corresponding to the VMM and physical servers stored in the object database ODB . Then the system configuration module proceeds with step .

In step the system configuration module defines business policies of the cloud computing system according to inputs provided by the administrator and updates data items corresponding to the business policies of the ODB. Examples of business policies may be inter alia thresholds of virtual machine move frequency etc. Then the system configuration module proceeds with step .

In step the system configuration module defines physical server availability zones physical servers restriction zones and physical servers location pools according to inputs provided by the administrator and updates respective data items corresponding to the physical server availability zones physical servers restriction zones and physical servers location pools of the ODB. Each physical server in the cloud computing system participates in one availability zone and at least one restriction zone. Allocating a virtual machine in a physical server included in a restriction zone of said at least one restriction zone is dynamically managed by the SCWB. Each software license constraint is implemented as a respective restrict zone. Multiple restriction zones may exist within a single availability zone. Then the system configuration module proceeds with step .

In step the system configuration module creates software license pools and respectively defines available licenses and software license cost for each software application within the software license pools according to inputs provided by the administrator. The system configuration module subsequently updates data items respectively corresponding to the created software license pools defined available licenses and software license cost as stored in the object database ODB . Then the system configuration module proceeds with step .

In step the system configuration module defines power cost of the cloud computing system according to inputs provided by the administrator which is defined as a sum of respective electrical power cost for all physical servers of the cloud computing system. The system configuration module subsequently updates a data item corresponding to the defined power cost in the ODB. Then the system configuration module proceeds with step .

In step the system configuration module defines and identifies virtual machines VM of the cloud computing system according to inputs provided by the administrator. The system configuration module subsequently updates data items respectively corresponding to each VM in the ODB. Then the system configuration module proceeds with step .

In step the system configuration module defines installed licenses per virtual machine VM according to inputs provided by the administrator. The system configuration module subsequently updates data items respectively corresponding to installed license number for each VM in the ODB. Then the system configuration module proceeds with step .

In step the system configuration module defines a VM topology which specifies a respective mapping between each VM and an associated physical machine in which each VM is running according to inputs provided by the administrator. The VM topology is also determined by VM affinity rules and VM anti affinity rules. The VM affinity rules define groups of virtual machines that may be allocated in a same physical server and the VM anti affinity rules define groups of virtual machines that should not be allocated in a same physical server. The system configuration module subsequently updates a data item corresponding to the defined VM topology in the ODB. Then the system configuration module terminates as completing system configuration and the cloud computing system starts production normal operation. The SCWB proceeds with at least one step selected from steps and according to inputs provided by the administrator.

The MC performs steps through described below for each monitoring cycle predetermined by the administrator.

In step the MC collects performance data from virtual machines and or physical servers as the virtual machines process workloads of the cloud computing system during the production normal operation. Then the MC proceeds with step .

In step the MC determines whether the cloud computing system performs optimally based on the performance data collected in step . If the MC determines that the cloud computing system performs optimally then the MC proceeds with step for further monitoring. If the MC determines that the cloud computing system does not perform optimally then the MC proceeds with step . Wherein the performance data from step indicates that the cloud computing system reaches a peak usage of any physical server of that there exist a failed physical server the MC determines that the cloud computing system does not perform optimally and needs optimization.

In step the MC collects power usage data from each physical server in the cloud computing system during the production normal operation. Then the MC proceeds with step .

In step the MC monitors real time availability of the virtual machines and the physical servers. Then the MC proceeds with step .

In step the MC updates objects database ODB with data collected in steps and . Then the MC terminates a cycle of monitoring.

In step the MC triggers workload optimization by invoking the workload optimizer WO step of supra. Then the MC terminates a cycle of monitoring.

In step the maintenance module changes system VM configuration parameter values stored in the ODB according to inputs provided by the administrator. See descriptions of the ODB in supra for specific data items comprising the system configuration parameter. Then the management module proceeds with step .

In step the maintenance module manages physical server according to a physical server management operation provided by the administrator by interacting with the virtual machine and hardware manager VMM of the cloud computing system. A value of the physical server management operation is selected from add delete suspend wherein add operation adds a new physical server to a current pool of physical servers and subsequently marks the added physical server as available for running virtual machines wherein delete operation removes a physical server from the pool and subsequently turns the removed physical server off and wherein suspend operation temporarily turns off a physical server and marks the physical server as unavailable for running virtual machines. The physical server management operations result in updating the ODB. Then the management module proceeds with step .

In step the maintenance module manages virtual machines VMs according to a VM management operation provided by the administrator by interacting with the virtual machine and hardware manager VMM of the cloud computing system. A value of the VM management operation is selected from add delete suspend wherein add operation instantiates a new virtual machine in a physical server and subsequently marks the new virtual machine as available for running a software application wherein delete operation removes a virtual machine from a pool of virtual machines and wherein suspend operation temporarily put a virtual machine in a suspended state such that the virtual machine does not consume any resources neither the software licenses nor physical resources. The VM management operations result in updating the ODB. Then the management module proceeds with step .

In step the maintenance module triggers workload optimization by invoking the workload optimizer WO . Then the maintenance module terminates and the SCWB proceeds with the WO performing step of supra.

In step the WO retrieves data items necessary for optimization from the objects database ODB . Then the WO proceeds with step .

In step the WO determines a new VM topology by calculating minimum total cost and minimum number of VM relocation. In one embodiment of the present invention the WO employs two phase calculation using quadratic programming QP enabled solvers. See description of infra for steps performed in determining the new VM topology. Then the WO proceeds with step .

In step the WO turns on physical servers necessary for the new VM topology as determined in step supra. Then the WO proceeds with step .

In step the WO relocates virtual machines VM among physical servers pursuant to the new VM topology. Then the WO proceeds with step .

In step the WO adjusts status information of relocated VMs pursuant to the new VM topology by use of a respective VM management operation selected from add delete suspend. Then the WO proceeds with step .

In step the WO turns off physical servers not used for virtual machines in the new VM topology. Then the WO proceeds with step .

In step the WO updates the ODB with data items reflecting the new VM topology. Then the WO terminates a cycle of workload optimization and the cloud computing system continues workload production pursuant to the new VM topology.

The workload optimizer WO performs steps and based on data retrieved from the object database ODB of the SCWB. Step and step is mathematically modeled by use of mathematical optimization techniques such as quadratic programming QP and quadratically constrained quadratic program QCQP which is implemented by use of a QP and QCQP enabled solver.

In step the WO minimizes a total cost of cloud computing TC for all software running on VMs on each physical servers as a first phase of the two phase VM topology calculation subject to constraints comprising each VM being associated to only one physical server a threshold limiting the number of physical relocation the amount of available resources per physical server affinity and anti affinity rule for each pair of two VMs and amount of software license usage within licensed limit. In the first phase of step the WO discovers a minimum total cost TC without limiting a total number of VM relocations. Then the WO proceeds with step for a second phase of the two phase VM topology calculation.

The objective function of the total cost TC as a sum of software cost for all running software and electrical power cost for all running physical servers is formulated as Formula A .

The constraints of the total cost TC are formulated as Formulae B C D E F G H I J and K respectively as below.

Formula B is a first group of constraints and is defined for each i th VM. It indicates that i th virtual machine VM is associated with j th physical server ensuring that each VM is associated with exactly one physical server within the cloud computing system.

Formula C is a second group of constraints that is defined respective to i th VM which represents a predefined threshold for a number of physical server relocation in one optimization cycle.

Formula D is a third group of constraints defined for a respective physical server to ensure amount of memory in the respective physical server is sufficient to run all virtual machines assigned to the respective physical server after optimization.

Formula E is a fourth group of constraints defined for a respective physical server to ensure a number of CPU in the respective physical server is sufficient to run all virtual machines assigned to the respective physical server after optimization.

Formula F is a fifth group of constraints defined for a respective physical server to ensure input output I O capacity in the respective physical server is sufficient to run all virtual machines assigned to the respective physical server after optimization.

Formula G is a sixth group of constraints defined for each pair of virtual machines that have predefined affinity rules stored in the ODB to force that said pair of two virtual machines VMand VM having the predefined affinity rules run in a same physical server.

Formula H is a seventh group of constraints defined for each pair of virtual machines that have predefined anti affinity rules stored in the ODB to avoid that said each pair of virtual machines having the predefined anti affinity rules run in a same physical server.

Formulae I J and K are an eighth group of constraints defined for each software to ensure that software licenses are used in compliance with a software license policy respectively associated with each software application.

In Formula J VMis the fourth binary variable that has value one 1 if i th VM will run on j th physical server after workload optimization and that has value zero 0 if i th VM will not run on j th physical server after workload optimization as defined in Formula B supra SVMis a seventh binary parameter that has value one 1 if i th VM requires s th software s and that has value zero 0 if i th VM does not require s th software and BigK indicates a constant very larger than estimated number of software licenses required.

In step the WO maximizes a number of virtual machines that are not relocated from a current physical server after the workload optimization as the second phase of the two phase VM topology calculation. In the second phase the WO searches for a minimum number of relocations when taking the TC calculated from the first phase of step into account. Then the WO terminates the second phase of the two phase VM topology calculation and proceeds with step of supra.

Formula M is another constraint of the second phase to ensure that a new total cost does not significantly vary from the TC calculated in the first phase of step pursuant to Formula A .

In step the WO receives a request for report from the admin via the User interface UI . Then the WO proceeds with step .

In step the WO configures a report based on the received request from step . Then the WO proceeds with step .

In step the WO extracts data items necessary for the configured report from objects database ODB and subsequently generated the configured report. Then the WO proceeds with step .

In step the WO communicates the generated report comprising extracted data items to the admin via the UI. Then the WO terminates reporting and the SCWB proceeds with the WO performing another cycle of optimization.

The computer system comprises a processor an input device coupled to the processor an output device coupled to the processor and memory devices and each coupled to the processor . In this specification the computer system represents any type of programmable data processing apparatus.

The input device is utilized to receive input data into the computer system . The input device may be inter alia a keyboard a mouse a keypad a touch screen a scanner a voice recognition device a sensor a network interface card NIC a Voice video over Internet Protocol VOIP adapter a wireless adapter a telephone adapter a dedicated circuit adapter etc. The output device is utilized to communicate results generated by the computer program code to a user of the computer system . The output device may be inter alia a printer a plotter a computer screen a magnetic tape a removable hard disk a floppy disk a NIC a VOIP adapter a wireless adapter a telephone adapter a dedicated circuit adapter an audio and or visual signal generator a light emitting diode LED etc.

Any of the components of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to a process for optimizing workload by dynamically reallocating virtual machines of the cloud computing system of the present invention. Thus the present invention discloses a process for supporting computer infrastructure comprising integrating hosting maintaining and deploying computer readable code into a computing system e.g. computing system wherein the code in combination with the computing system is capable of performing a method for optimizing workload by dynamically reallocating virtual machines of the cloud computing system.

In another embodiment the invention provides a method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a process for optimizing workload by dynamically reallocating virtual machines of the cloud computing system of the present invention. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

While shows the computer system as a particular configuration of hardware and software any configuration of hardware and software as would be known to a person of ordinary skill in the art may be utilized for the purposes stated supra in conjunction with the particular computer system of . For example the memory devices and may be portions of a single memory device rather than separate memory devices.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. In this specification the term memory device represent a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. The term computer program instructions is interchangeable with the term computer program code in this specification. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable storage medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable storage medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

