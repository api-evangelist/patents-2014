---

title: Video game application state synchronization across multiple devices
abstract: Techniques for a method for automatically synchronizing application state of a video game across multiple devices are disclosed herein. The method includes running an instance of the video game application at a first electronic device, detecting a presence of a second electronic device based on a proximity of the second electronic device to the first electronic device, identifying an installation of another instance of the video game application on the second electronic device, saving a current state of play of the instance of the video game application running on the first electronic device and transmitting the application state data to the second electronic device. The application state data of the video game application enables another instance of the video game application to resume the current state of play of the video game application at the second electronic device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08764555&OS=08764555&RS=08764555
owner: Nextbit Systems Inc.
number: 08764555
owner_city: San Francisco
owner_country: US
publication_date: 20140117
---
This application is a continuation in part of U.S. patent application Ser. No. 13 772 163 filed on Feb. 20 2013 entitled APPLICATION STATE SYNCHRONIZATION ACROSS MULTIPLE DEVICES and U.S. patent application Ser. No. 14 043 034 filed on Oct. 1 2013 entitled APPLICATION STATE BACKUP AND RESTORATION ACROSS MULTIPLE DEVICES both of which claim the benefit of U.S. Provisional Patent Application No. 61 708 794 filed on Oct. 2 2012 entitled CLOUD COMPUTING INTEGRATED OPERATING SYSTEM which are incorporated by reference herein in their entirety.

At least one embodiment of the present invention pertains to cloud computing and more particularly to automatic synchronization of application states across multiple devices using cloud storage.

Application state data are data used to record the running status of a computer application. One example of application state data is a game save for a game application. A game save is a piece of digitally stored information about the progress of a user operating the game application. The game save can be reloaded later so that the user can continue where he stopped. The user instructs the game application to generate a game save i.e. save the game to prevent the loss of progress in the game especially when he is interrupted or ending a game session.

Sharing game saves among users has been common for many years. Originally by swapping memory cards with game saves users could help each other to unlock features in a game application. With the growing popularity of the Internet users start to upload their game saves from their devices to Internet servers. By downloading a game save from an Internet server a user can continue the progress of the game on the device on which he played the game or another device such as a computer game console or smart phone. However to achieve the goal of continuing the progress on another device the user needs to deliberately instruct the device to save the game progress i.e. game save and to upload the game save to a server or a memory card. Then the user needs to download the game from the server or the memory card to the other device and then instructs the other device to load the game save. The whole process is tedious and requires many user interventions. Furthermore the process only works for game applications that are specifically designed with game saving functionalities.

Techniques introduced here provide an automatic mechanism for synchronizing application state across multiple devices. In accordance with the techniques introduced here a method includes steps running an instance of a computer application at an electronic device and automatically determining a sync event that occurs in the electronic device. The sync event suggests a synchronization of application state data and the application state data represent an application state of the computer application at the sync event. The method further includes transmitting the application state data of the computer application to a storage server in response to the sync event. The application state data of the computer application enable another instance of the computer application to resume the application state at the sync event at another electronic device.

The synchronization proceeds automatically on the background of the operating system of the device and is transparent to the user as well as the application. The user can stop operating on an instance of an application running on one device and resume another instance of the application running on another device at where he left off. The application state synchronization is achieved at the operating system level of the devices. There is no special treatment or design needed for the computer application itself. Any computer application capable of running on such an operating system can take advantage of the application state synchronization functionality.

In accordance with the techniques introduced here therefore a method for synchronizing application state across multiple devices based on the proximity of the devices to each other is provided. The method includes running an instance of a computer application at a first electronic device where the first electronic device belongs to a group of electronic devices associated with a user. The method includes detecting a presence of a second electronic device based on a proximity of the second electronic device to the first electronic device where the second electronic device belongs to the group of electronic devices.

The method includes identifying an installation of another instance of the computer application or another computer application similar to the computer application on the second electronic device. The method further includes transmitting an application state data to the second electronic device where the application state data is associated with the instance of the computer application running at the first electronic device.

The application state data represents an application state of the computer application at the first electronic device at the detection of the presence of the second electronic device. The application state data of the computer application enables another instance of the computer application at the second electronic device to resume running the computer application from the transmitted application state. Further the transmission of the application state data is performed at a background of an operating system of the first electronic device without any user intervention.

In accordance with the techniques introduced here therefore a method for synchronizing application state of a video game application across multiple devices based on the proximity of the devices to each other is provided. The method includes running an instance of the video game application at a first electronic device where the first electronic device belongs to a group of electronic devices associated with a user. The method includes detecting a presence of a second electronic device based on a proximity of the second electronic device to the first electronic device where the second electronic device belongs to the group of electronic devices.

The method includes identifying an installation of another instance of the video game application or another video game application similar to the video game application on the second electronic device. The method includes saving a current state of play of the instance of the video game application running on the first electronic device. Saving of the current state of play is performed by utilizing an in game save feature included within the video game application where the in game save feature saves an application state data representing the current state of play of the instance of the video game application running on the first electronic device.

The method further includes transmitting the application state data to the second electronic device where the application state data of the video game application enables another instance of the video game application to resume the current state of play of the video game application at the second electronic device. Other aspects of the technology introduced here will be apparent from the accompanying figures and from the detailed description which follows.

References in this specification to an embodiment one embodiment or the like mean that the particular feature structure or characteristic being described is included in at least one embodiment of the present invention. Occurrences of such phrases in this specification do not all necessarily refer to the same embodiment however.

A method of application state synchronization across devices is described herein. For example a user plays a game on his smart phone and stops playing and turns off the screen of his smart phone. The state of the game application is synchronized between his smart phone and other electronic devices via a cloud system. He can pick up his tablet computer and continue to play the game from where he left off. The synchronization is not necessarily directly triggered by a user intervention. For instance the synchronization can be automatically triggered when the screen of the smart phone is turned off or the user closes the game on his smart phone. The synchronization proceeds automatically on the background and is transparent to the user. Furthermore the cloud system can analyze various information including device profile user profile and user history to determine state of which application is to be synchronized and which device the state is synchronized to.

Another method of application state synchronization across devices based on proximity of the devices to each other is described herein. A user may own multiple electronic devices that together form a group of devices the user switches between to perform various tasks. Each device belonging to the group can be configured to share their location with each other either directly transmitting the information to each other or storing the information in the cloud from where each of the devices can access the information. The location information can include the identity of the network connection a given device is connected to a geo location information of the given device etc.

Each of the devices can utilize the location information to determine their proximity to the other devices in the group. For instance when two devices of the group are both connected to a local area network e.g. a home WiFi network which requires the devices to be within a certain radius for the devices to be able to connect to the network the connection of the two devices to the local area network can be used to conclude that the devices are within a threshold proximity to perform application state synchronization across each other.

The proximity analysis of any two given devices of the group of devices can be carried out at either the devices themselves or in the cloud where a server periodically or in response to an action by the devices perform the proximity analysis. Once a proximity of two devices has been detected a decision can be made whether to synchronize the application state data across the two devices. The synchronization is not necessarily directly triggered by a user intervention.

In some instances a device usage pattern analysis of the user can be used to automatically determine whether to synchronize the application state data across the two devices. The synchronization itself proceeds automatically on the background and is transparent to the user. For example if a user prefers to use an iPad every time the iPad is available application state data from the user s iPhone can be transmitted and synchronized with the iPad whenever the iPad is in the proximity of the user s iPhone.

Other such device usage pattern analysis of the user discussed later can be utilized to further fine tune when the application state data is synchronized amongst the group of devices in close proximity to each other. Further the synchronization of application state data can be carried out either directly from one device to another or through a cloud system from where each of the devices can access the data as needed.

The following example illustrates how the method of application state synchronization across devices based on proximity can be utilized to sync state for a video game across devices. In the example a user can play a video game on his smart phone when on the road. When the user arrives home and connects the smart phone to the home WiFi network the various electronic devices belonging to the user e.g. user s tablet smart phone etc. can detect each other based on their respective network connection to the home WiFi network.

If the user has exhibited a tendency to use the tablet to play the video game whenever the tablet was available to the user then the state of the video game application is synchronized between the user s smart phone and the tablet. The synchronization can be performed either directly between the devices using the home WiFi network or via a cloud system. As discussed above the synchronization is not necessarily directly triggered by a user intervention. The proximity of the devices and the user s usage pattern can be periodically analyzed either by the devices or in the cloud system to trigger the synchronization.

Any save feature in the video game that allows the user to save the current state of play of the video game can be utilized to gather the application state data associated with the current state of play of the video game. By using such save features the application state data can be gathered without any specialized knowledge of the video game.

For example many first person shooter video games allows a player to save the current state of play as the game is being played allowing the player to resume play from the last saved state of play in the event the player dies in the game before finishing all the levels. The player will not have to start playing the game again from level one. The information associated with the saved state of play is usually stored as log files that can be easily copied and replicated across other devices to allow the player to resume playing the video game in anther device from the saved state of play. The user can pick up the tablet computer and continue to play the game from where the user left off.

A cloud synchronization interface can also be included to receive data to be stored in the cloud storage service. The cloud synchronization interface can include network communication hardware and network connection logic to receive the information from electronic devices. The network can be a local area network LAN wide area network WAN or the Internet. The cloud synchronization interface may include a queuing mechanism to organize the received synchronization data to be stored in the cloud storage service . The cloud synchronization interface can communicate with the cloud storage service to send requests to the cloud storage service for storing application state data and retrieving data.

An electronic device includes an operating system to manage the hardware resources of the electronic device and provide services for running computer applications . The computer application stored in the electronic device require the operating system to properly run on the device . The electronic device can backup application states of the computer applications to the cloud storage service . The electronic device includes at least one local storage device to store the computer applications application data and user data. The electronic device can synchronize the application state data with the cloud storage service via the cloud synchronization interface . The electronic device or can be a desktop computer a laptop computer a tablet computer an automobile computer a game console a smart phone a personal digital assistant or other electronic devices capable of running computer applications as contemplated by a person having ordinary skill in the art.

The computer applications stored in the electronic device can include applications for general productivity and information retrieval including email calendar contacts and stock market and weather information. The computer applications can also include applications in other categories such as mobile games factory automation GPS and location based services banking order tracking ticket purchases or any other categories as contemplated by a person having ordinary skill in the art.

The operating system of the electronic device includes a state synchronization module to backup application state information from the local storage. The state synchronization module can operate to keep the application state data from the electronic device in synchronization with the cloud storage service and other devices.

Similarly another electronic device can also synchronize the application state with the cloud storage service . The electronic devices and can synchronize the application states between each other via the cloud storage service . For instance the electronic device can synchronize the application state of a computer application to the cloud storage service . The cloud storage service communicates with the electronic device to know that the electronic device also contain this computer application and the application state of this computer application is not updated on the electronic device . In turn the cloud storage service sends the application state data to the electronic device . Thus the application state of this computer application is synchronized between the electronic devices and .

In one embodiment the synchronization for backups from the electronic devices and to the cloud storage service may take place on a configurable periodic basis such as an hour or a day. In other words the synchronization is scheduled to take place on a periodic basis. The scheduled synchronization can also check for updates that can be sent from the cloud storage service to the electronic devices and .

Another type of synchronization can be a triggered when an event occurs on the electronic device or and then the state synchronization module can initialize the application state data synchronization with the cloud storage service . The triggered synchronization does not need the intervention from the user. For instance a user turns off the screen of the electronic device . The screen turning off event can trigger an application state data synchronization with the cloud storage service as well as other electronic devices. However the user does not need to specifically instruct the device to synchronize the user does not even need to realize that the synchronization occurs.

In one embodiment the sync event can be any of the following events the screen of the electronic device being turned off the instance of the computer application being closed the instance of the computer application being paused the instance of the computer application having been run continuously for a preconfigured period of time the instance of the computer application being switched by another application the instance of the computer application being switched from the foreground to a background of the operating system a battery level of the electronic device being below a preconfigured value the electronic device turning off the electronic device switching to standby mode a clock of the electronic device reaching a preconfigured time of day and the electronic device being in a preconfigured location

In one embodiment the synchronization can be a delta synchronization where the electronic device or detects a change i.e. delta of application state data and only the changed data or difference are synchronized to the cloud storage device .

Any electronic device running an operating system having the state synchronization module can initialize the application state synchronization. In addition the cloud storage service can also initialize the application state synchronization. In one embodiment the cloud storage service may analyze the electronic devices to determine which device is to be synchronized and state data of which application are to be synchronized.

At step a sync event is determined to occur at the electronic device. The operating system of the electronic device automatically determines the sync event without the intervention from the user. The user does not specifically instruct the sync event. The user does not even need to realize the sync event. There is no need for a sync button a sync gesture a sync menu item or a sync command. In other words the operating system of the device makes the determination of a sync event. For instance the operating system may recognize an event of the screen being turned off as a sync event. The operating system may also recognize an event of a running application being closed or being switched by another application as a sync event. The operating system may further recognize an event of a system standby as a sync event. The operating system of the device can determine other types of sync events as contemplated by a person having ordinary skill in the art.

Once the operating detects a sync event the operating system of the electronic device uploads the application state data of the computer application onto the cloud storage system at step . The operating system of the device may decide to immediately start uploading the application state data after the sync event or start the upload a certain amount of time after the sync event. For instance if the electronic device detects that there is another electronic device of the same user in a very close proximity the operating system of the device may decide to start the upload immediately because of a high possibility that the user will start using the other device soon. In another embodiment the electronic device may decide to start the upload at a certain time of day or at certain location. For instance the electronic device may decide to start the upload at midnight 12 AM and at the user s home determined by GPS location or WiFi location so that the upload of the application state data does not intervene with normal operation of the device.

In one embodiment the developer of the computer application does not need to specifically write any implementation for uploading the application state data. For example there are no API calls embedded in the computer application for the application state data. The state synchronization module of the operating system is responsible for monitoring collecting and uploading the application state data. In some embodiments the state synchronization module compares the current application state on the device and the application state already stored in the cloud storage service. If the current application state is newer than the application state stored in the cloud storage service the state synchronization module determines a difference i.e. delta between the current application state data and the application state data stored in the cloud storage service. In this way the state synchronization module only needs to upload the difference to the cloud storage service. The cloud storage service is responsible for incorporating the difference into the application state data already stored.

At step the cloud storage system performs an analysis on the device profile user profile and user history to determine which device the state is synchronized to. For instance in one embodiment the cloud storage system determines the devices that the same user is using e.g. the devices which have established the user s user account . In another embodiment the analysis is based on usage pattern. For example the cloud storage service can determine to synchronize the application state to devices that the user has been frequently used during a specific time period e.g. a week. Or the cloud storage service can determine to synchronize the application state to devices on which the user has been running that computer application. In yet another embodiment the analysis is based on a proximity algorithm. For example the cloud storage service can determine to synchronize the application state to devices that are physically close to the device in step . The proximity may be determined by GPS locations WiFi network locations cellular networking locations or the combination thereof. In still another embodiment the analysis is based on the types of applications installed on the devices. For example the cloud storage service can determine to synchronize the application state to devices that have instances of that application installed or devices that have similar applications installed. Furthermore the analysis can be determined by a combination of the above techniques as well as any other device or user information as contemplated by a person having ordinary skill in the art.

The same types of analysis disclosed in the previous paragraph are used in determining the priority of synchronization. For instance if there are application state data for multiple applications in the cloud storage service to be synchronized. The cloud storage service may determine to synchronize the state data for one application because the user has been frequently using that application during a recent time period e.g. a week. In one embodiment the cloud storage service decides a priority list including a reference to the application state data for the computer application wherein the priority list regulates the order of transmitting the application state data for the computer application and data for other applications based on the analyzing of the user profile and the hardware profiles of electronic devices.

In some embodiments the analysis is performed after the cloud storage system receives application state data from a device. In some other embodiments the analysis can be performed before the cloud storage system receives any application state data or before the sync event occurs.

At step the cloud storage system sends the application state data to one or more devices that is identified by the analysis. The identified devices receive the application state data. Therefore the instances of the application running on the devices are synchronized with the most up to date state. A user can run an instance of the application on any of these devices and the instance of the application resumes from the most up to date state. In one embodiment the cloud storage system further sends an instruction to each of the identified devices to run an instance of the computer application by resuming the application state at the sync event at step .

In one embodiment the application state data of a computer application may include application memory data application local storage data hardware configuration data and user account configuration data. The state synchronization module of the operating system is capable of collecting these data and uploading the data as included in the application state data to the cloud storage service. Based on the application state data an operating system of another electronic device can recreate the same environment and status of the application on the other electronic device.

In some embodiments the electronic devices are capable of synchronizing application state data between each other via a network such as a WiFi network Bluetooth network or a cellular phone network. Each of the electronic devices contains a network component configured to directly synchronize the application state data with another electronic device.

A state synchronization module runs on top of the kernel . The state synchronization module monitors the information from the intervening sources of the kernel and records state data according the information. In the example of a computer application includes a binary executable code that can run on top of the operating system . The computer application can further include static and dynamic libraries that are referenced by the binary executable code during application running. In one embodiment the state synchronization module runs in a user space file system e.g. FUSE on top of a Linux kernel. In another embodiment the state synchronization module runs in a kernel file system.

The application state data may further include hardware configuration data . For instance the state synchronization module may record the current device sound volume level and the screen brightness level when the application is running. These device sound volume level and the screen brightness level are recorded as part of the hardware configuration data and will be uploaded to the cloud storage service. Therefore after another device is synchronized with the application state data and starts to resume running the application the other device automatically adjusts the sound volume level and screen brightness level as on the previous device. Moreover the application state data may include user account configuration data . The user account configuration data may include the user s preferences and choices regarding the computer application and the operating system environment for running the computer application. For instance the user account configuration data may include information about the user s language preference. Assuming the computer application is a game supporting both English and Chinese languages for user interface in the game the user has selected the English language as the preferred language. The state synchronization module records the user s language preference as a part of the user account configuration data . The user account configuration data is synchronized to another device via the cloud storage service. When the other device starts to resume running the application the application will use the English language for the game interface as indicated by the user account configuration data .

In some embodiments a user can define a synchronization scheme to control the way how and when the synchronization process performs. illustrates an example of an application state synchronization process based on a user defined synchronization scheme. At step a cloud storage service receives an instruction of a synchronization scheme from a user. The synchronization scheme includes rules of how and when the synchronization process performs. For example in one embodiment the synchronization scheme can define a synchronization rule between two electronic devices a smart phone and a tablet computer for application state of a game application. The synchronization rule specifies that one of the electronic devices start attempting to synchronize application state to the other device as soon as the game application being closed or the screen of the device being turned off.

Assuming the smart phone is the current device running the game application at step the operating system of the smart phone checks whether the game application is closed by the user. If the game application is closed the process continues to step . Otherwise at step the operating system of the smart phone continues to check whether the screen of the smart phone is turned off. If the screen is turned off the process continues to step . Otherwise the process goes back to check the status as in steps and in a predetermined time period.

At step the smart phone uploads application state data of the game application to the cloud storage system. The schedule of the uploading can depend on a type and a speed of a connection between the smart phone and the could storage system. For instance the schedule can be determined so that the uploading is delayed to use a WiFi connection to avoid the uploading using a cellular data connection e.g. 3G or LTE . At step the cloud storage system reads the synchronization scheme defined by the user. At step the cloud storage system checks whether the other device i.e. the tablet computer is currently being connected with the cloud storage system. If the tablet computer is connected with the cloud storage system the system sends the application state data to the tablet computer according to the synchronization scheme at . Otherwise the cloud storage system continues to check the connection with the tablet computer on a periodic basis.

At step when the user starts to use the tablet computer the tablet computer starts to run an instance of the game application by resuming the application state recorded in the synchronized application state data.

The processor s is are the central processing unit CPU of the server and thus control the overall operation of the server . In certain embodiments the processor s accomplish this by executing software or firmware stored in memory . The processor s may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs trusted platform modules TPMs or the like or a combination of such devices.

The memory is or includes the main memory of the server . The memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. In use the memory may contain a code containing instructions according to the techniques disclosed herein.

Also connected to the processor s through the interconnect are a network adapter and a storage adapter . The network adapter provides the server with the ability to communicate with remote devices over a network and may be for example an Ethernet adapter or Fibre Channel adapter. The network adapter may also provide the server with the ability to communicate with other computers. The storage adapter allows the server to access a persistent storage and may be for example a Fibre Channel adapter or SCSI adapter.

The code stored in memory may be implemented as software and or firmware to program the processor s to carry out actions described above. In certain embodiments such software or firmware may be initially provided to the server by downloading it from a remote system through the server e.g. via network adapter .

The techniques introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware or entirely in special purpose hardwired circuitry or in a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more application specific integrated circuits ASICs programmable logic devices PLDs field programmable gate arrays FPGAs etc.

Software or firmware for use in implementing the techniques introduced here may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable storage medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine a machine may be for example a computer network device cellular phone personal digital assistant PDA manufacturing tool any device with one or more processors etc. . For example a machine accessible storage medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

The term logic as used herein can include for example programmable circuitry programmed with specific software and or firmware special purpose hardwired circuitry or a combination thereof.

In addition to the above mentioned examples various other modifications and alterations of the invention may be made without departing from the invention. Accordingly the above disclosure is not to be considered as limiting and the appended claims are to be interpreted as encompassing the true spirit and the entire scope of the invention.

