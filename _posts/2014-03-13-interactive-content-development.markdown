---

title: Interactive content development
abstract: Techniques for developing and deploying software applications in a virtualized computing environment are described. A developer user is presented with a user interface providing options for accessing a software development project. Inputs are provided to the software development project. The inputs may include data and selection of a software component. A plurality of predefined data objects are accessed and an executable software application is generated. The application executes on virtual machine instances of the virtualized computing environment and is accessible by a plurality of end-users. The executable software application is developed within the multi-user computing and network services platform via the web-based user interface and is hosted by the multi-user computing and network services platform for use by end-users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09134962&OS=09134962&RS=09134962
owner: Sanctum Solutions, Inc.
number: 09134962
owner_city: Houston
owner_country: US
publication_date: 20140313
---
This application claims benefit under 35 U.S.C. 119 e of U.S. Provisional Patent Application No. 61 792 002 filed Mar. 15 2013 the entire contents of which are incorporated herein by reference.

A service provider such as an entity that operates a provider network may offer computing resources such as computing instances and storage resources to customers who may also be referred to as entities or users . A customer may be any person or entity who accesses computing resources of a service provider. The service provider may for example provide a computing and network services platform. Multiple customers may access the computing and network services platform via a computing node and issue instructions to the web services platform. The computing and network services platform may be also be referred to as a multi tenant computing and network services platform to denote that multiple customers may access the platform. The computing and network services platform may respond to instructions by performing computing operations on one or more of a plurality of computing nodes that make up the computing and network services platform.

Cloud computing refers to a computing environment for enabling on demand network access to a pool of computing resources. As used herein a cloud or cloud infrastructure may refer to any digital based environment that allows for the storage of digital assets and the execution of processes or binary code on a networked array of computing device s . A cloud can provide additional features such as database access web access network access process instantiation and or instancing and any other form of digital processing manipulation communication storage that occurs within the cloud infrastructure.

Many cloud computing services involve virtualized resources and may take the form of web based tools or applications that users can access and use through a web browser as if the virtualized resources were programs installed locally on their own computers. The data stored for users of such systems are typically hosted in computing systems located in a computing data center. A data center is a facility that houses computer systems and various networking storage and other related components. Data centers may for example provide computing services to businesses and individuals as a remote computing service or to provide software as a service. To facilitate utilization of data center resources virtualization technologies may allow a single physical computing machine to host one or more instances of virtual machines that appear and operate as independent computer machines to a connected computer user. With virtualization the single physical computing device can create maintain or delete virtual machines in a dynamic manner.

Disclosed herein are methods and systems for developing and deploying software applications in a virtualized computing environment hosted by a multi user computing and network services platform. In some embodiments a web based user interface providing one or more options for accessing a software development project hosted by the multi user computing and network services platform is presented to a developer user of the multi user computing and network services platform. The multi user computing and network services platform receives via the user interface inputs to the software development project. The inputs comprise at least one of data and a selection of a software component usable to form a software application.

In response to receiving the inputs a plurality of predefined data objects available within the multi user computing and network services platform is accessed. The predefined data objects are usable to build the software application. Using the plurality of predetermined data objects an executable software application is automatically generated. The executable software application is configured to execute on one or more virtual machine instances of the virtualized computing environment and accessible via the multi user computing and network services platform to a plurality of end users.

The multi user computing and network services platform provides access to instances of the executable software application to the plurality of end users. A plurality of requests from the plurality of end users to access the instances of the executable software application is processed. The executable software application is developed within the multi user computing and network services platform via the web based user interface and is hosted by the multi user computing and network services platform for use by end users.

The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

The embodiments of the invention and the various features and advantageous details thereof are explained more fully with reference to the non limiting embodiments and examples that are described and or illustrated in the accompanying drawings and detailed in the following description. It should be noted that the features illustrated in the drawings are not necessarily drawn to scale and features of one embodiment may be employed with other embodiments as the skilled artisan would recognize even if not explicitly stated herein. Descriptions of well known components and processing techniques may be omitted so as to not unnecessarily obscure the embodiments of the invention. The examples used herein are intended merely to facilitate an understanding of ways in which the invention may be practiced and to further enable those of skill in the art to practice the embodiments of the invention. Accordingly the examples and embodiments herein should not be construed as limiting the scope of the invention which is defined solely by the appended claims and applicable law. Moreover it is noted that like reference numerals represent similar parts throughout the several views of the drawings.

Software development is typically viewed as an activity associated with individual developers or groups of developers. Since desktop computing has become widely available software development has been associated with activity on a workstation or a desktop computer. Software development projects typically use client centric development applications. Recently computational resources such as cloud computing services and network bandwidth have increased dramatically. As the scale of software development increases and the capabilities of available computational resources improve in particular the capability to collaborate via network of computers the view that software development is a desktop based client centric activity is no longer applicable.

Because software development teams need to coordinate activities related to software projects some parts of the software development process have shifted to a client server network environment to enable the use of a network of computational resources to process and coordinate the activities of multiple developers and teams. Such need for coordinating software development activity exists even on a standalone computer. Software development solutions that focus on a typical integrated development environment provide limited direct support for coordinating software development activity. As a result much of the software development work is implemented in an ad hoc manner with each team recreating its own process and tools which can lead to inefficiencies security issues and errors. For example the process of bringing together various components of a software application project developed on different computers or on the same computer but at different times also can be error prone and require an inordinate amount of effort by the developers. Correct builds require complex build environments to be replicated as closely as possible on many different desktops. However many of the dependencies between the software components and the environment e.g. registry entries versions etc. in which the software components are built are implicit and hard to enumerate in order to replicate the environment wholly during the build process.

Furthermore software development teams must consider security of the software during development as well as during production. Copies of software may be present in multiple locations and computers each of which must be secured from unauthorized access. After finalization of the software build distribution of the master build must ensure against theft and piracy.

Thus there is a need for an improved software development model where software development activities can be provided in an efficient and secure manner. While the above example is provided in the context of software development the same concerns exist for any endeavor where a digital data product is developed and made available to others.

To address these issues the present disclosure describes a cloud based development environment where the entire process of initiating developing and deploying a software application may be provided by an integrated development and deployment environment that is entirely provided by a provider network such as a cloud computing provider. More generally the disclosure describes at least an apparatus systems and methods for content development and providing an application development tool for creating interactive content of all types. Specifically apparatus systems and methods are described herein for providing a virtual project environment wherein content can be created constructed programmed and or edited in a visual environment.

In at least some embodiments software applications may be developed and deployed in a virtualized computing environment hosted by a multi user computing and network services platform. For example content such as videos audio applications etc. may be created that allow a user when accessing the content to have one or more interactions with the content. In some aspects a virtual project environment provides a platform for developers to build a unique application by uploading and editing content including adding interactive options. As used herein a developer refers to any person company or other entity that has registered with the virtual project environment system and has been granted access to tools to create content. In some aspects sponsors which can include any person company or other entity that would like to provide statistical data gathering and analysis marketing monetary or any other services may also be granted access to all or part of the virtual project environment. In many embodiments described herein the system may be cloud based thereby reducing some of the bandwidth concerns associated with both editing and viewing interactive content. Developers wishing to create content may access the systems described herein and create any type of content. For example one developer may wish to create an interactive computer application while another developer may wish to create an interactive video.

Turning now to a high level system diagram of a system is illustrated where one or more aspects of the disclosure may be implemented. System may comprise one or more end user devices for viewing listening or otherwise accessing content developed via components of system such as for example video content audio content computer applications video games etc. The end user devices may include a computer. The end user devices may communicate via one or more communication links with an application development environment over a network such as a cloud network. The network may include a computer. One or more developer devices may also be configured to communicate with the application development environment via one or more communication links and the network to create interactive content that can be reproduced by the end user devices . Each developer may create different types of content if desired. The end user devices may be configured to reproduce the interactive content in the form of displayed images sound etc.

In accordance with some aspects one or more sponsors may also be configured for communicating with the application development environment via one or more communication links and the network . Sponsors may be any person company or other entity that may provide for example statistical data gathering and analysis marketing monetary or any other services that can provide additional content or services.

User interface component may also include a developer component configured to provide a visual editing interface control which may facilitate the construction of application data logic or any other editing related task. In some aspects the developer component of the user interface component may provide a default editor that provides a core set of action objects that can be extended modified and used together to define a content project. For example the developer component of the user interface component may provide an interface for developer devices to create interactive content such as for example interactive video and or audio e.g. a music video a movie clip a video audio streaming segment and or the like . For example a developer component of the user interface component may be configured to present options for uploading content to be edited and to add one or more interactive components to the content.

In addition user interface component may include a sponsor component which may be configured to provide a visual editing interface control open to sponsors. In some aspects a developer may define what action objects can be exposed to a sponsor as well as what components of said action objects are exposed. A sponsor may user sponsor component of user interface component to access interface and development libraries to define a set of behaviors to perform upon specific data sets of the exposed action objects and may return the results. For example an advertising sponsor may via the sponsor component monitor content a user is experiencing the path a user takes in experiencing the content etc. and may offer incentives such as award points based on the user s interactions.

A publishing component may also be provided for publishing content in various digital formats. In some aspects the digital formats may be specific to the cloud application. An end user may view the published data through the end user component of the user interface. A storage component may also be provided for storing content both during the editing process and after the editing is complete.

Environment may include development tools that in some embodiments may include a set of software libraries and tools that a software developer may use to construct additional configuration data that defines an application as well as additional developer tools that might be configured to allow editing of the application s data.

In one embodiment environment may include a project visual editor which may be a visual editing interface control configured to facilitate the construction of application data logic and other programming or editing related tasks in a cloud application. The project visual editor may include a set of action objects that can be extended modified and used together to define a cloud application or to define digital assets created by the cloud application by a developer sponsor or end user. The configuration of the action objects and any additional digital asset used in conjunction with the action objects may be saved as project data that can be stored on digital media available to the application instances and defined by either the default or developer specific data s settings.

In one embodiment the action objects may be digital objects that contain programming logic and or data that define a behavior and can invoke other action objects or communicate to the application cluster. The programming logic can be further defined as any form of scripting or programming language constructed through the use of software libraries provided with the development tools.

In one embodiment environment may include application input output data and source code which may comprise developer unique data and source code constructed from libraries provided by the development tools. The application input output data and source code may define how digital assets provided by or constructed by the developer cloud application is viewed displayed and interacted with. The application input output data and source code may provide input and output streams to facilitate the visual and user interaction handling of the cloud application. The data may be coalesced and compiled during publishing of the cloud application in order to provide the final client and any additional functionality the developer might provide.

In one embodiment environment may include published cloud application data that may comprise compacted and compiled digital assets that have been previously defined by project data created by environment . The published cloud application data can be provided in various digital formats specific to the cloud application. End users may view the published cloud application data using a developer defined client interface. Additional encryption and security measures can be incorporated by the developer. The environment may also apply default encryption and security measures to the final published data.

The environment may include a cloud application input output client that may be a set of predefined digital assets that define how data used by the cloud application is viewed and or interacted with by the end user. The client action tracking system may facilitate in the tracking of user interactions with content provided by the client interface. The tracking of interactions may be captured within client action tracker sent from the client action tracker to the client action tracking system and communicated to other systems of environment . The client action tracker may be a subsystem within cloud application project input output client that is the published version of the data. The client action tracker may comprise methods and or processes defined through cloud application project sponsor interface and may be specific to and or required by the cloud application project input output client . The tracked interactions may be used for example for gathering statistics monetary or credit based exchanges and any other possible uses from the gathered data. The type of data that is collected as well as how the data is utilized may be defined through the cloud application project sponsor interface .

The cloud application project sponsor interface may be a visual editing interface control configured to facilitate the construction of application data logic and any other programming or editing related tasks in a visualized manner. The editor for the cloud application project sponsor interface may provide limited access to developer defined exposed action objects in order to allow for the tracking of end user interactions within the cloud application project input output client . The developer may define what action objects can be exposed to the sponsor as well as what components of the action objects are exposed. The sponsor may use the cloud application project sponsor interface and development libraries to define a set of behaviors and methods that are performed on specific data sets of exposed action objects and return the results of the behaviors and methods to the client action tracking system where the sponsor can define how the data is stored. The developer can expose additional methods and or procedures for the sponsor to use in conjunction with the default methods and or procedures provided by the development tools.

A sponsor may be a person company or any other entity that provides statistical data gathering and analysis marketing monetary or any other possible services that can provide additional content or services for the cloud application. A developer may be a person company or any other entity that is allowed granted their own cloud instance for example instance in by environment and development tools to build their own unique cloud based application that runs within their granted instance running on the cloud application infrastructure. The end user may be any person who uses the developed cloud based application via for example an end user computing device to view interact edit content provided by developer or sponsor .

The input output abstraction layer may be a set of code methods procedures that integrates with content management solution in order to expose the content management solution s specific input and output related data and code methods procedures in a standardized way allowing for more simplistic and unified cloud application development. Command manager may include a set of code methods procedures and digital data which define a common command object language CCOL that can be expanded upon by a cloud application developer in order to achieve a task action or processing of digital assets that is unique to the developer s application. The command manager may be configured to handle the processing of commands when invoked by the developer s cloud application. The command manager may translate commands to some form of service process procedure result that can be understood or broken down to a format that the content management solution can process.

Command object base layer may be a default command object that provides data and methods procedures for creating a common format for the communication of command objects and any developer defined derivation between the developer s cloud application and the server instance. Developer defined command objects may be expanded extended instances of the default command object. Developer defined command objects server side may include methods procedures and data that extend existing methods procedures and data of the command object base layer in order to handle the server side processing of the developer modified command object. Developer command object definition client side may include methods procedures and data that extend the methods procedures and data of the command object base layer in order to handle the client side processing of the developer modified command object.

As illustrated in after accessing e.g. logging into the application development environment for example via the developer component of the user interface component and selecting an option to create a new project an empty project node may be loaded. The empty project node may include an option to select content e.g. video from a content list e.g. video list . The content list may be provided on the developer device for example as a drop down list a menu list and the like. The content list may comprise content previously uploaded by the user or by another user who has made the content available. In some aspects an option may be presented for the user to upload new content.

Turing now to as illustrated at editing of the content frame representing the content can be locked once the user is satisfied with a selection. Once the content frame has been locked a content engine core node may be created wherein the user can select content frames to be produced e.g. displayed . As illustrated in after locking the start and stop times for a content engine core node one or more additional nodes can be created with an action identified between the nodes. Adding content engine core nodes can be used to define run time nodes for e.g. video segments. Moreover as illustrated in text can be associated with a particular portion of e.g. a video. In some aspects the text may be a hyperlink to a webpage providing more information about the selection.

In response to uploading receiving a selection of content the selected content may be loaded into a content player as well as the empty project node as illustrated at . For example where the content is video a video play may be loaded with the selected video. Initially the video may be in the paused state in both the content player and the now populated project node. As illustrated at a selection of a frame representing the content may be received. In some aspects a scrub bar marker on the content player may be used to select the frame. As illustrated at the selected frame representing the content may be loaded into the project node and the project node may be locked.

As illustrated at in response to receiving an option to lock the project node a first content engine core node may be created. The content engine core node may be provided for selecting frames or portions of frames of the uploaded content for editing. Editing may include for example replacing the selected frames with other content such as for example other content frames such as video or audio frames universal records locator URL test HTML code etc. As illustrated at the system may receive a start frame and an end frame for editing in the first content engine core. In some aspects the start and end frames are selected using the scrub bar marker provided in the content player. As illustrated at a selection may be received to create another content engine core node for editing another portion of the uploaded content. In some aspects multiple child content engine core nodes may be associated with a parent content engine core node and options may be provided for indicating rules for selecting which node to play following a parent node.

Operation may be followed by operation . Operation illustrates receiving by the multi user web services platform via the user interface inputs to the software development project. In one embodiment the inputs may comprise data and or a selection of a software component. The software component may be usable to form a software application. Operation may be followed by operation . Operation illustrates accessing a plurality of predefined data objects available within the multi user computing and network services platform. The predefined data objects may be usable to build the software application.

Operation may be followed by operation . Operation illustrates automatically generating using the plurality of predetermined data objects an executable software application. The software application may be configured to execute on one or more virtual machine instances of the virtualized computing environment. The software application may also be accessible via the multi user computing and network services platform to a plurality of end users.

Operation may be followed by operation . Operation illustrates providing by the multi user computing and network services platform access to instances of the executable software application to the plurality of end users. Operation may be followed by operation . Operation illustrates processing a plurality of requests from the plurality of end users to access the instances of the executable software application. The executable software application is developed within the multi user computing and network services platform via the web based user interface and is hosted by the multi user computing and network services platform for use by end users.

In some embodiments a system may be implemented. The system may be configured to develop and deploy software applications in a virtualized computing environment hosted by a multi user web services platform. The system may comprise a memory storing computer instructions that when executed by one or more processors of the system cause the system to implement a developer editor. The developer editor may be configured to present a web based user interface providing options for accessing a software development project hosted by a multi user web services platform. The developer editor may also be configured to receive inputs to the software development project. The inputs may comprise at least one of data and a selection of a software component usable to form a software application. The inputs may be received from a developer user of the multi user web services platform.

The memory of the system may further comprise a computer instructions that when executed by the processors of the system cause the system to implement a developer editor. The development environment may be configured to access a plurality of predefined data objects available within the multi user web services platform in response to receiving the inputs. The predefined data objects may be usable to build the software application. The development environment may be also configured to automatically generate using the plurality of predetermined data objects an executable software application. The executable software application may be configured to execute on one or more virtual machine instances of the virtualized computing environment. The executable software application may further be accessible via the multi user web services platform to a plurality of end users.

The memory of the system may further comprise a computer instructions that when executed by the processors of the system cause the system to implement an end user client. The end user client may be configured to provide access to instances of the executable software application to the plurality of end users. The end user client may further be configured to process a plurality of requests from the plurality of end users to access the instances of the executable software application.

Generally guest operating systems through can include any operating system such as for example operating systems from Microsoft Apple the open source community etc. The guest operating systems can include user kernel modes of operation and can have kernels that can include schedulers memory managers etc. A kernel mode can include an execution mode in a logical processor that grants access to privileged processor instructions. Each guest operating system through can have associated file systems that can have applications stored thereon such as terminal servers e commerce servers email servers etc. or the guest operating systems themselves. Guest operating systems through can schedule threads to execute on virtual processors through and instances of such applications can be effectuated.

The computing resources provided by data centers may be enabled by one or more individual data centers. Data centers may be facilities utilized to house and operate computer systems and associated components. Data centers may include redundant and backup power communications cooling and security systems. Data centers may also be located in geographically disparate locations.

The customers and other consumers of data centers may access the computing resources provided by data centers over a network . It should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects data centers to remote consumers may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

A user computer may be a computer utilized by a customer or other consumer of data centers . For instance user computer may be a server computer a desktop or laptop personal computer a thin client a tablet computer a wireless telephone a personal digital assistant PDA an e reader a game console or any other computing device capable of accessing data centers .

User computer may be utilized to configure aspects of the computing resources provided by data centers or access services provided by data centers . For example data centers may provide a Web interface through which aspects of its operation may be configured or accessed through the use of a Web browser application program executing on user computer . Alternatively a stand alone application program executing on user computer might access an application programming interface API exposed by data centers for accessing the computing resources or performing the configuration operations. Other mechanisms for configuring the operation of data centers including deploying updates to an application or accessing the computing resources might also be utilized.

A computer as used in this disclosure means any machine device circuit component or module or any system of machines devices circuits components modules or the like which are capable of manipulating data according to one or more instructions such as for example without limitation a processor a microprocessor a central processing unit a general purpose computer a super computer a personal computer a laptop computer a palmtop computer a smart phone a cellular telephone a tablet a web book a notebook computer a desktop computer a workstation computer a server a cloud or the like or an array of processors microprocessors central processing units general purpose computers super computers personal computers laptop computers palmtop computers notebook computers desktop computers workstation computers servers or the like.

A network as used in this disclosure means any combination of software and or hardware including any machine device circuit component or module or any system of machines devices circuits components modules or the like which are capable of transporting signals from one location to another location where the signals may comprise information instructions data and the like. A network may include but is not limited to for example at least one of a local area network LAN a wide area network WAN a metropolitan area network MAN a personal area network PAN a campus area network a corporate area network a global area network GAN a broadband area network BAN or the like any of which may be configured to communicate data via a wireless and or a wired communication medium.

A server as used in this disclosure means any combination of software and or hardware including at least one application and or at least one computer to perform services for connected clients as part of a client server architecture. The at least one server application may include but is not limited to for example an application program that can accept connections to service requests from clients by sending back responses to the clients. The server may be configured to run the at least one application often under heavy workloads unattended for extended periods of time with minimal human direction. The server may include a plurality of computers configured with the at least one application being divided among the computers depending upon the workload. For example under light loading the at least one application can run on a single computer. However under heavy loading multiple computers may be required to run the at least one application. The server or any of its computers may also be used as a workstation.

A communication link as used in this disclosure means a wired and or wireless medium that conveys data or information between at least two points. The wired or wireless medium may include for example a metallic conductor link a radio frequency RF communication link an Infrared IR communication link an optical communication link or the like without limitation. The RF communication link may include for example Wi Fi Wi MAX IEEE 802.11 DECT OG 1G 2G 3G or 4G cellular standards Bluetooth and the like. One or more communication links may be used in an environment shown in to allow sufficient data throughput and interaction between end users such as e.g. agents consumers insurance carriers estate planners financial providers web host providers and the like . Techniques for implementing such communications links are known to those of ordinary skilled in the art.

In at least some embodiments a computer that implements a portion or all of one or more of the technologies described herein may include a general purpose computer system that includes or is configured to access one or more computer accessible media. illustrates such a general purpose computing device . In the illustrated embodiment computing device includes one or more processors and or which may be referred herein singularly as a processor or in the plural as the processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other device or devices attached to a network or networks such as other computer systems or devices as illustrated in for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface . Portions or all of multiple computing devices such as those illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

A network set up by an entity such as a company or a public sector organization to provide one or more services such as various types of cloud based computing or storage accessible via the Internet and or other networks to a distributed set of clients may be termed a provider network. Such a provider network may include numerous data centers hosting various resource pools such as collections of physical and or virtualized computer servers storage devices networking equipment and the like needed to implement and distribute the infrastructure and services offered by the provider network. The resources may in some embodiments be offered to clients in units called instances such as virtual or physical computing instances or storage instances. A virtual computing instance may for example comprise one or more servers with a specified computational capacity which may be specified by indicating the type and number of CPUs the main memory size and so on and a specified software stack e.g. a particular version of an operating system which may in turn run on top of a hypervisor .

A number of different types of computing devices may be used singly or in combination to implement the resources of the provider network in different embodiments including general purpose or special purpose computer servers storage devices network devices and the like. In some embodiments a client or user may be provided direct access to a resource instance e.g. by giving a user an administrator login and password. In other embodiments the provider network operator may allow clients to specify execution requirements for specified client applications and schedule execution of the applications on behalf of the client on execution platforms such as application server instances Java virtual machines JVMs general purpose or special purpose operating systems platforms that support various interpreted or compiled programming languages such as Ruby Perl Python C C and the like or high performance computing platforms suitable for the applications without for example requiring the client to access an instance or an execution platform directly. A given execution platform may utilize one or more resource instances in some implementations in other implementations multiple execution platforms may be mapped to a single resource instance.

The terms including comprising having and variations thereof as used in this disclosure mean including but not limited to unless expressly specified otherwise.

The terms a an and the as used in this disclosure means one or more unless expressly specified otherwise.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

Although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of the processes methods or algorithms described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device or article may be used in place of a single device or article. Similarly where more than one device or article is described herein it will be readily apparent that a single device or article may be used in place of the more than one device or article. The functionality or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality or features.

A computer readable medium as used in this disclosure means any medium that participates in providing data for example instructions which may be read by a computer. Such a medium may take many forms including non volatile media volatile media and transmission media. Non volatile media may include for example optical or magnetic disks and other persistent memory. Volatile media may include dynamic random access memory DRAM . Transmission media may include coaxial cables copper wire and fiber optics including the wires that comprise a system bus coupled to the processor. Transmission media may include or convey acoustic waves light waves and electromagnetic emissions such as those generated during radio frequency RF and infrared IR data communications. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EEPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying sequences of instructions to a computer. For example sequences of instruction i may be delivered from a RAM to a processor ii may be carried over a wireless transmission medium and or iii may be formatted according to numerous formats standards or protocols including for example Wi Fi Wi MAX IEEE 802.11 DECT OG IG 2G 3G or 4G cellular standards Bluetooth or the like.

The present disclosure is not to be limited in terms of the particular embodiments described in this application which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure in addition to those enumerated herein will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims. The present disclosure is to be limited only by the terms of the appended claims along with the full scope of equivalents to which such claims are entitled. It is to be understood that this disclosure is not limited to particular methods reagents compounds compositions or biological systems which can of course vary. It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.

There is little distinction left between hardware and software implementations of aspects of systems the use of hardware or software is generally but not always in that in certain contexts the choice between hardware and software can become significant a design choice representing cost vs. efficiency tradeoffs. There are various vehicles by which processes and or systems and or other technologies described herein can be effected e.g. hardware software and or firmware and that the preferred vehicle will vary with the context in which the processes and or systems and or other technologies are deployed. For example if an implementer determines that speed and accuracy are paramount the implementer may opt for a mainly hardware and or firmware vehicle if flexibility is paramount the implementer may opt for a mainly software implementation or yet again alternatively the implementer may opt for some combination of hardware software and or firmware.

One skilled in the art will appreciate that for this and other processes and methods disclosed herein the functions performed in the processes and methods may be implemented in differing order. Furthermore the outlined steps and operations are only provided as examples and some of the steps and operations may be optional combined into fewer steps and operations or expanded into additional steps and operations without detracting from the essence of the disclosed embodiments.

While the invention has been described in terms of exemplary embodiments those skilled in the art will recognize that the invention can be practiced with modifications in the spirit and scope of the appended claims. These examples given above are merely illustrative and are not meant to be an exhaustive list of all possible designs embodiments applications or modifications of the invention.

