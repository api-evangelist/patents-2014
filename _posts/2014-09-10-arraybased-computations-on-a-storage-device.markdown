---

title: Array-based computations on a storage device
abstract: An instruction from an application server to perform a computation is received at a network-attached storage (NAS) device. The computation uses arrays of data that are stored by the NAS device as inputs. The instruction includes remote procedure calls that identify operations that are included in the computation, including a first remote procedure call that will cause the NAS device to perform a read operation on a first file containing an array of data to be used as an input for the computation, and a second remote procedure call that will cause the NAS device to perform an array operation using the array of data. The operations are executed on the NAS device to produce a result that is stored in a second file in a location in a file system managed by the NAS device and accessible to the application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509773&OS=09509773&RS=09509773
owner: Futurewei Technologies, Inc.
number: 09509773
owner_city: Plano
owner_country: US
publication_date: 20140910
---
 Big data is a commonly used term that refers to very large data sets that are a byproduct of rapid advances in data collection and storage. While the data itself has importance it is also important to be able to identify relevant data within the data sets and to use analytics to create value from the relevant data. The ability of a business to analyze large data sets and understand and apply the results can be key to increasing competitiveness productivity and innovation. However as the amount of data continues to grow current systems may find it difficult to keep pace.

A distributed or shared storage system e.g. a network attached storage NAS system or cluster typically includes a number of NAS devices that provide file based data storage services to other devices clients such as application servers in the network. An NAS device is generally speaking a specialized computer system configured to store and serve files. Accordingly an NAS device has less capability compared to a general purpose computer system such as an application server. For example an NAS device may have a simpler operating system and a less powerful processor and may also be lacking other components such as a keyboard and display.

An application server can retrieve data stored by an NAS system over a network using a data sharing or file sharing protocol such as Network File System NFS or Common Internet File System CIFS . After retrieving the data the application server can analyze it as mentioned above.

The conventional approach in which an NAS system supplies data to an application server which then analyzes the data is problematic for very large data sets big data . Generally speaking it can take a relatively long time and can consume a relatively large amount of bandwidth and other resources to deliver big data from NAS devices to application servers. For example multiple remote procedure calls are defined for the NFS protocol including read lookup readdir and remove. In the NFS protocol file or directory objects are addressed through opaque file handles. Any read call is preceded by a lookup to locate the object to be read. The read call is then invoked iteratively the number of times is it invoked depends on the NFS configuration and the size of the object to be fetched. With the larger data sets associated with big data the read call will have to be invoked many times to fetch the data for a single object. Thus operations such as a read call over a distributed storage system can be very expensive in terms of the amount of computational resources and bandwidth that are consumed.

In overview in embodiments according to the present invention data sharing and file sharing protocols such as but not limited to NFS and CIFS are extended to steer computations toward and onto data storage nodes e.g. NAS devices and away from computation nodes e.g. application servers . To accommodate the relatively sparse resources available on NAS devices computations are separated into different operations which are then performed using for example relatively lightweight virtual machines sometimes known as virtualization containers that are capable of being executed on NAS devices.

In embodiments according to the invention standard protocols such as NFS and CIFS are modified to support new remote procedure calls that specify data operations or semantics along with pointers to the data to be operated on. In an embodiment an instruction from a client e.g. an application server to perform a computation is received at an NAS device. In an embodiment the instruction is or includes one or more of the new remote procedure calls to identify where data for the computation can be obtained and also to identify the operations included in the computation. In an embodiment a single operation is associated with each remote procedure call. In an embodiment the request also includes a fully qualified name for a file to which the computation results are to be written.

The computation is translated into separate array operations e.g. add multiply inverse and transpose . In an embodiment the operations are performed using respective virtual machines executing on the NAS device to get a result. In an embodiment each virtual machine is configured to perform a single operation. The operations can be pipelined they can be performed asynchronously in series or in parallel as allowed or required.

The computation results are stored in a file that is accessible to the client. In an embodiment the computation results are sent to the client. In another embodiment information indicating a location of the file containing the results is sent to the client the location may be the fully qualified file name referred to above if one is included in the client request .

Embodiments according to the present invention reduce latency and increase available bandwidth in a network because it is not necessary to transfer large data sets big data across a network from storage nodes to application servers. The storage nodes perform calculations on data sets particularly the larger data sets associated with big data accordingly application servers do not need to iteratively invoke read calls to fetch the data. Reducing latency can also improve the accuracy and or relevancy of computation results because the computation can be based on data sets that are more current. Also by offloading computations to storage nodes application servers are available to perform other tasks. Conversely resources on storage nodes are more effectively utilized.

These and other objects and advantages of the various embodiments of the present disclosure will be recognized by those of ordinary skill in the art after reading the following detailed description of the embodiments that are illustrated in the various drawing figures.

Reference will now be made in detail to the various embodiments of the present disclosure examples of which are illustrated in the accompanying drawings. While described in conjunction with these embodiments it will be understood that they are not intended to limit the disclosure to these embodiments. On the contrary the disclosure is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the disclosure as defined by the appended claims. Furthermore in the following detailed description of the present disclosure numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. However it will be understood that the present disclosure may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the present disclosure.

Some portions of the detailed descriptions that follow are presented in terms of procedures logic blocks processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application a procedure logic block process or the like is conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those utilizing physical manipulations of physical quantities. Usually although not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system. It has proven convenient at times principally for reasons of common usage to refer to these signals as transactions bits values elements symbols characters samples pixels or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present disclosure discussions utilizing terms such as receiving translating performing executing storing sending transmitting indicating identifying. generating separating accessing obtaining adding multiplying inverting transposing reading or the like refer to actions and processes e.g. flowcharts and of respectively of a computer system or similar electronic computing device or processor e.g. system of system of . The computer system or similar electronic computing device manipulates and transforms data represented as physical electronic quantities within the computer system memories registers or other such information storage transmission or display devices.

Embodiments described herein may be discussed in the general context of computer executable instructions residing on some form of computer readable storage medium such as program modules executed by one or more computers or other devices. By way of example and not limitation computer readable storage media may comprise non transitory computer storage media and communication media. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or distributed as desired in various embodiments.

Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electrically erasable programmable ROM EEPROM flash memory or other memory technology compact disk ROM CD ROM digital versatile disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can accessed to retrieve that information.

Communication media can embody computer executable instructions data structures and program modules and includes any information delivery media. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above can also be included within the scope of computer readable media.

The application servers and of also generally represent computing devices or systems configured to provide various services and or run certain software applications. The network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet.

As illustrated in one or more network attached storage NAS devices L may be directly attached to the application server . Similarly one or more NAS devices N may be directly attached to the application server . The NAS devices L and the NAS devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions such as the computing device of .

The NAS devices L and the NAS devices N are configured to communicate with the application servers and using various protocols such as but not limited to Network File System NFS or Common Internet File System CIFS . The NAS devices L and the NAS devices N may be arranged into logical redundant storage containers or RAID redundant array of independent disks arrays.

The application servers and may be referred to as clients of the NAS devices L and the NAS devices N . The application servers and may also be connected to a storage area network SAN fabric not shown which in turn may be coupled to other storage devices not shown .

Generally process VMs or VCs can be used to allow a group of processes to execute securely or to provide platform independence to user applications. The VCs 1 5 provide a specialized stack at the operating system level for application execution on the NAS device . One such approach of providing a specialized stack at the operating system level utilizes an exokemel where the kernel is limited to extending resources to sub operating systems called library operating systems libOSs .

VCs 1 5 provide isolation of a single operation or task into separate containers an operation or task per VC. Execution inside the NAS device can be applied with a template manifest based on parameters included in an instruction or request from the application server to the NAS device. The instruction includes one or more remote procedure calls issued by the client s application server application programming interface API . Thus the use of VCs accommodates the relatively sparse resources available on NAS devices. Also the VCs can be specialized according to the task or operation they will perform. Furthermore there can be redundant VCs more than one VC that can perform a particular task or operation this means that if one VC is busy responding to one instruction or request then another VC is available to perform the same operation in response to another instruction or request.

In embodiments according to the invention data sharing and file sharing protocols including but not limited to NFS and CIFS are extended to steer computations toward and onto the NAS device and away from the application server . More specifically data sharing and file sharing protocols are modified to support new remote procedure calls. The new remote procedure calls specify data operations or semantics along with pointers to the data to be operated on. Essentially the operation logic and semantics behind the fetching of data from an NAS device is embedded into protocols such as NFS and CIFS allowing data operations to be performed at the NAS device which can store the results in a manner that is accessible to the application server thereby saving the cost of moving large amounts of data from the NAS device to the application server.

In an embodiment three new remote procedure calls are added to the client s API. In general these remote procedure calls can be used to identify where to obtain data for a computation and to also identify the operations included in the computation. In an embodiment the instruction also includes a fully qualified name for the file to which the computation results are to be written.

Specifically the first of the new remote procedure calls is referred to herein as array compute expr1 where expr1 identifies an operation to be performed and the data to be used for the operation. The operation can include but is not limited to addition e.g. add two arrays multiplication e.g. multiply two arrays inverse e.g. invert an array or transpose e.g. transpose an array . The output of this remote procedure call is the result of the operation performed. In an embodiment multiple arrays or multiple data files containing array data are read and the output is an array. An example is described below in conjunction with .

The second of the new remote procedure calls is referred to herein as array from filename1 where filename1 refers to a fully qualified file name that contains the data for an operation. In an embodiment an array is read from a data file and the output is an array.

The third of the new remote procedure calls is referred to herein as array compute save expr2 filename2 where expr2 identifies an operation to be performed and the data to be used for the operation and filename2 identifies a fully qualified file name where the computation results will be written to stored. In an embodiment multiple arrays or multiple data files containing array data are read. In an embodiment the array compute save procedure call outputs status information indicating whether the computation is completed and or whether or not it was successful for example.

In operation an instruction from a client application server to perform a computation is received at the NAS device . In an embodiment the instruction is or includes one or more of the new remote procedure calls. In an embodiment the instruction also includes a fully qualified name for the file to which the computation results are to be written.

The computation is then translated into separate operations e.g. add multiply inverse and transpose . The operations are performed using respective virtual machines VCs 1 5 executing on the NAS device to get a result. In an embodiment each virtual machine is configured to perform a single operation. The operations can be pipelined they can be performed asynchronously in series or in parallel as required.

The computation results are stored in a file that is accessible to the client application server and also to end user devices e.g. the end user devices of . In an embodiment the computation results are sent to the application server which in turn can send the results to an end user device. In another embodiment information indicating a fully qualified file name containing the results is sent to the application server an end user device can use the fully qualified file name to access the results.

Thus embodiments according to the invention introduce a mechanism to offload computations e.g. array based computations in big data applications to a storage node an NAS device . User applications such as database queries and big data computations can be mapped to algebraic or matrix computations that are performed on the storage node. Consider an example of a recommendation system in which data is used to tabulate consumers ratings about multiple products. An M N array or matrix where M is the number of consumers and N is the number of products can be stored and used for analyses such as per product rating etc. As the array grows in size over time the computation becomes more and more complex. In a large scale data processing model such as map reduce the computation can be reduced by the application server to matrix operations array operations on the set of arrays. Mapping shuffling and reducing phases can be reduced to array operations. The array operations can then be specified using the new remote procedure calls described herein. The array operations can be performed by leveraging the framework and configuration of the VCs on the storage node the NAS device to manipulate data to the granularity of the parameters in the instruction from the application server to the NAS device.

Another example of an array based computation is R statistical language and tool chain for data manipulation. Typically these statistical languages allow array based computation operation at language level. This is feasible through compiler level support to manipulate the arrays. In embodiments according to the invention compiler level services are provided using light weight user level VMs VCs at the storage node the NAS device .

The instruction thereby identifies the following operations and the locations for the data to be read and operated on 

Generally speaking the operations are performed in the sequence implicit in the instruction . The operations can be pipelined they can be performed asynchronously in series or in parallel as required or allowed. For example the operations Op1 and Op2 can be performed in parallel and the operation Op4 can be performed in parallel with the operations Op1 and or Op2 or in parallel with the operation Op3.

The operation Op1 is performed by VC1 the operation Op2 is performed by VC2 the operation Op3 is performed by VC3 the operation Op4 is performed by VC4 and the operation Op5 is performed by VC5. That is each of the VCs 1 5 performs a single task or operation. Significantly the NAS device performs the computation using data e.g. FileA FileB and FileC that resides on the NAS device so that the data does not have to be transferred across the network in order to perform the operations. That is the NAS device can both read the data from its storage devices see and operate on that data.

Continuing with reference to the kernel communication module is configured to provide Indirection of a remote procedure call to the virtualization container VC1 at the user level. The virtualization container VC1 is configured to run an operation included in the instruction as described in conjunction with . The kernel communication module creates an inter process communication IPC channel between the kernel address space and user address space to forward the procedure call to the virtualization container VC1. The kernel communication module also converts translates or parses the operations in the instruction into objects e.g. C objects .

Continuing with reference to a user level application thread is configured to receive the request parameter from the kernel communication module to configure the virtualization container. The user communication module registers a process identifier PID to the kernel communication module to establish a communication channel with the kernel.

A VM template in the virtualization container VC1 is configured using configuration files according to one of the operations specified in the remote procedure call in the instruction .

Depending on the number of other operations included in the instruction one or more other virtualization containers e.g. VCs 2 5 may be similarly controlled configured and executed. The result of each operation from each virtualization container that is executed can be joined as in the example of .

In an embodiment the final result of the computation is sent to the application server where it can be accessed by end user devices. Alternatively the computation results can be written to a file that is stored on the NAS device the fully qualified file name for the file that is a path to the file can be sent to the application server and or to end user devices. In either case it is not necessary to send large amounts of data from the NAS device to the application server and or to end user devices.

The example of utilizes kernel user indirection. The approach could instead be implemented through user level indirection.

In block an instruction or request from a client e.g. the application server to perform a computation is received at an NAS device e.g. the NAS device . In an embodiment the instruction Is or includes one or more of the new remote procedure calls to identify where to obtain data for the computation and to also identify the operations included in the computation. In an embodiment the instruction also includes a fully qualified name for the file to which the computation results are to be written.

For example the remote procedure calls can include a first remote procedure call that causes the NAS device to perform a read operation on a first file containing an array of data to be used as an input for the computation and a second remote procedure call that causes the NAS device to perform an array operation using the array of data.

In block the computation is then translated into separate array operations e.g. add multiply inverse and transpose .

In block in an embodiment the operations are performed using respective virtual machines virtualization containers executing on the NAS device to get a result. The operations can be pipelined they can be performed asynchronously in series or in parallel as required.

In block the computation results are stored in a file that is accessible to the client e.g. application server . In an embodiment the computation results are sent to the client. In another embodiment information indicating a location of the file containing the results is sent to the client. In an embodiment information indicating a status of the computation is also sent to the client. For example the NAS device can inform the client that the computation is completed.

The application server identifies a computation to be performed on an array of data stored by an NAS device. As mentioned previously herein the computation can be reduced to a sequence of operations. For example the computation may include an array operation to be performed on the array of data and a read operation to be performed on a first file containing the array of data

In block an instruction is generated by the application server and then sent to the NAS device instructing the NAS device to perform a computation that uses arrays of data that are stored by the NAS device as inputs. The instruction includes remote procedure calls that identify operations that are included in the computation. For example the remote procedure calls can include a first remote procedure call operable for causing the NAS device to perform the read operation on the first file containing the array of data to be used as an input for the computation and a second remote procedure call operable for causing the NAS device to perform the array operation using the array of data.

In block subsequent to execution of the operations by the NAS device the application server can access a result of the computation.

Embodiments according to the present invention thus reduce bus and network latency and increase available bandwidth in a network by offloading computations to the storage node as a result it is not necessary to transfer large data sets big data across a network from storage nodes to application servers. Reducing latency can also improve the accuracy and or relevancy of computation results because the computation can be based on data sets that are more current. Also by offloading computations to storage nodes application servers are available to perform other tasks. Conversely resources on storage nodes are more effectively utilized.

With reference first to the computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. In its most basic configuration the computing system may include at least one processor and a system memory .

The processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments the processor may receive instructions from a software application or module. These instructions may cause the processor to perform the functions of one or more of the example embodiments described and or illustrated herein.

The system memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation RAM ROM flash memory or any other suitable memory device. Although not required in certain embodiments the computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example the storage device .

The computing system may also include one or more components or elements in addition to the processor and the system memory . For example in the example of the computing system includes a memory controller an input output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . The communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device.

The memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of the computing system . For example the memory controller may control communication between the processor system memory and the I O controller via the communication infrastructure .

The I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example the I O controller may control or facilitate transfer of data between one or more elements of the computing system such as the processor system memory the communication interface the display adapter the input interface and the storage interface .

The communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between the example computing system and one or more additional devices. For example the communication interface may facilitate communication between the computing system and a private or public network including additional computing systems. Examples of the communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In one embodiment the communication interface provides a direct connection to a remote server via a direct link to a network such as the Internet. The communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

The communication interface may also represent a host adapter configured to facilitate communication between the computing system and one or more additional network or storage devices via an external bus or communications channel. The communication interface may also allow the computing system to engage in distributed or remote computing. For example the communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in the computing system may also include at least one display device coupled to the communication infrastructure via a display adapter . The optional display device generally represents any type or form of device capable of visually displaying information forwarded by the display adapter . Similarly the display adapter generally represents any type or form of device configured to forward graphics text and other data from the communication infrastructure or from a frame buffer as known in the art for display on the display device .

As illustrated in the computing system may also include at least one input device coupled to the communication infrastructure via an input interface . The input device generally represents any type or form of input device capable of providing input either computer generated or human generated to the computing system . Examples of the input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in the computing system may also include a storage device . The storage device generally represents any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example the storage device may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. The storage device may be a part of the computing system or may be a separate device accessed through another interface system.

The computing system can execute an application that allows it to perform operations e.g. the operations of . A computer program containing the application may be loaded into the computing system . For example all or a portion of the computer program stored on a computer readable medium may be stored in the memory . When executed by the processor the computer program can cause the processor to perform and or be a means for performing the functions of the example embodiments described and or illustrated herein. Additionally or alternatively the example embodiments described and or illustrated herein may be implemented in firmware and or hardware.

With reference next to the computing system also broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. In its most basic configuration the computing system may include at least one processor and a system memory such as that described above.

The computing system may also include one or more components or elements in addition to the processor and the system memory . For example in the embodiment of the computing system includes a memory controller an input output I O controller and a communication interface each of which may be interconnected via a communication infrastructure such as those described previously herein.

As illustrated in the computing system also includes storage devices . The storage devices generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example the storage devices may be magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. The storage devices may be part of the computing system or may be separate devices accessed through another interface system. The storage devices may be arranged into logical redundant storage containers or RAID redundant array of independent disks arrays.

The computing system can execute an application that allows it to perform operations e.g. the operations of . A computer program containing the application may be loaded into the computing system . For example all or a portion of the computer program stored on a computer readable medium may be stored in the memory . When executed by the processor the computer program can cause the processor to perform and or be a means for performing the functions of the example embodiments described and or illustrated herein. Additionally or alternatively the example embodiments described and or illustrated herein may be implemented in firmware and or hardware.

Many other devices or subsystems may be connected to the computing systems and . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . The computing systems and may also employ any number of software firmware and or hardware configurations. For example the example embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered as examples because many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various example methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these example embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. These software modules may configure a computing system to perform one or more of the example embodiments disclosed herein. One or more of the software modules disclosed herein may be implemented in a cloud computing environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a Web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

Embodiments according to the invention are thus described. While the present disclosure has been described in particular embodiments it should be appreciated that the invention should not be construed as limited by such embodiments but rather construed according to the below claims.

