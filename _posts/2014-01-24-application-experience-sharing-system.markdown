---

title: Application experience sharing system
abstract: Described herein is a system generating and sending shortcuts from a sending device to a receiving device. In one implementation, the sending device generates shortcut reference data (SRD) which includes application data indicative of a state of an application and a hash based on the application data. The SRD is sent to a shortcut server, while shortcut delivered data (SDD) which includes the hash value is sent to a recipient device. The recipient device may use the hash value of the SDD to request and receive the application data from the shortcut server. Once received, an application installed on the recipient device recreates on the recipient device the state of the application as originally presented on the sending device. As a result, a user at the sending device may share their experience with a user at the receiving device. Fees associated with the use of the system may be calculated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09491229&OS=09491229&RS=09491229
owner: Google Inc.
number: 09491229
owner_city: Mountain View
owner_country: US
publication_date: 20140124
---
A wide variety of data is accessible using the internet or other networked systems. Organizations and individuals use the data for entertainment commerce education communication and so forth. One of the many advantages in having data available online is the prospect of one user sharing that data with another user.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

Increasingly users access data with computing devices which are portable or mobile. The computing devices may include tablets smartphones wearable computers in vehicle computers and so forth. Application modules or apps may execute at least in part on these computing devices to provide the user with access to data. For example an application module may provide a user interface which allows the user to access travel information.

As computing capabilities grow both on the computing device and on servers and other devices which support data access the richness of data which is accessible to the user and which the user may interact with also grows. For example using a smartphone a user may engage in a complete set of transactions ranging from research about a vacation to booking flights reserving accommodations making dinner reservations and so forth using one or more application modules.

As rich as these capabilities are until now there has been a significant limitations in sharing application experiences with other users. An application experience is the particular point in an interaction of the application module and corresponding backend systems such as data servers. The application experience may include a particular image of a user interface as presented on a display particular audio being presented by speakers and so forth. Continuing the above example the application experience may comprise a user interface showing several flights which have been painstakingly selected by the user after navigating through several searches setting different options and so forth. In another example the application experience may be information presented in a user interface resulting from a process which is not directed by a user such as after selecting a surprise me or random pick option. Regardless of how the particular application experience has been arrived at the user may wish to store that application experience for later use to share with another user or group of users and so forth. Continuing the earlier example the user may wish to share the application experience containing the information about flights with other users. Furthermore they may wish to share this application experience without the effort involved in signing into an account saving the itinerary navigating a user interface to select who to send the itinerary to and so forth. Additionally the user may find it desirable to share the application experience such that the recipient has the same or very similar application experience. This may enable the sending user and the recipient user to more easily communicate with one another about the information presented in the application experience as they are literally starting on the same page with respect to what they are experiencing with the respective application modules executing on the respective computing devices.

The application experience may be expressed in some implementations as state data which is associated with the application module at that particular point. For example the application experience may be thought of as a snapshot or capture of the application module. The application experience may be the result of several specific interactions serendipity or a combination thereof. The application experience may include variable or changeable content such as advertisements banners and so forth.

Traditionally limited sharing of information has been possible by using uniform resource locator URL based bookmarks. However URL bookmarks may become quite long making them unsuitable for easy transmission manual entry verbal distribution and so forth. For example a user may have significant difficulty is manually entering a URL such as the following which includes 149 characters 

Shortened URL services partially alleviate length issues associated with an end application experience but may introduce other problems such as linkrot abuse by spammers or other illicit parties reference to an underlying full length URL with the associated drawbacks and so forth. Furthermore URLs are subject to several underlying issues which limit the ability for a URL to effectively convey the application experience. In one example the use of URL bookmarks is limited to sharing information between web browsers or applications which are able to parse the URL. In another example URL bookmarks do not support sufficient information to provide for high fidelity sharing of the application experience. URL lengths may be constrained by various specifications maximum character lengths restrictions on which characters may be used restrictions on where a particular character or combination of characters may be used web browser engine capability server capability and so forth. For these and other reasons URLs are thus unable to provide for the storage and sharing of an application experience across application modules which execute as native applications markup language applications hybrid applications or browser based applications.

Described in this disclosure are systems and techniques which support storage and distribution of an application experience between computing devices using shortcuts generated and processed by shortcut function modules. At compile time such as when an application is compiled into an executable form by a compiler application an application module is configured to incorporate or include static links to shortcut function module libraries. For example the shortcut function modules may be provided as a software development kit SDK for use by software developers. The shortcut function modules provide functions which may be called by the application module. These functions may include one or more of creating a shortcut sharing a shortcut retrieving a shortcut preventing duplicate shortcuts generating hash values adding information to an existing shortcut and so forth as described below in more detail. By integrating the shortcut function modules at compilation time of the application module executable the functions are available for use by the application module in situations where security constraints in an operating system restrict exchange of data between the application module and other application modules. In other implementations where the operating system permits exchange of data between application modules a shortcut handler module which is separate from the application module may operate to process shortcuts.

The application module or the shortcut handler module may generate shortcuts. The generation of the shortcuts may be automatic initiated by the user or a combination thereof. Generation of a shortcut includes the acquisition of application data associated with the application module. The developer s of the application module may define the contents of the application data. This allows for maximum flexibility on the part of the developer. The application data may include state data screenshots or other information. For example the state data may comprise a device identifier a user identifier geographic location data date and time query terms datastore referents user interface settings communication state information and so forth. The state data is information associated with the application module contemporaneous to a point in time at which the shortcut is generated. In some implementations the state data may be the application module state prior to the point in time at which the shortcut is generated. For example the state a few seconds earlier. The state data may be retrieved from the application module the operating system under which the application module is executing or both.

In some implementations log data may also be included when generating the shortcut. The log data may include current state of UIView classes UIWebview classes network data and so forth. The log data may be continuously or periodically acquired prior to generation of the shortcut such that information leading up to the point in time of the shortcut generation may be captured. Recipients providing technical support or assistance to the sender may use the log data to aid in troubleshooting. For example a user at a sending computing device may generate a shortcut after encountering a problem. The support engineer receiving the shortcut may use the application data and the log data to attempt to troubleshoot the problem.

Hash data may be used to identify a particular shortcut or application experience. The hash data may include an application identifier which indicates a particular application module which generated the shortcut and a hash value. The hash value is generated by applying using at least a portion of the application data as input to a hashing function. For example the device identifier state data date time and so forth may be used as an input to generate the hash value. In some implementations the hashing function may be configured to produce a hash value with a maximum length or which is limited to include particular characters. For example the hashing function may be configured to produce hash values which only include letters or numbers omit special characters or punctuation marks and have a maximum length of four characters.

A sending device comprising a first computing device which generates a shortcut is configured to send shortcut reference data SRD to a shortcut server. The SRD comprises application data and may include hash data log data or other data. In implementations where the SRD omits the hash data the shortcut server may be configured to generate the hash data.

The sending device or another device such as the shortcut server may then send shortcut delivered data SDD to a recipient device comprising a second computing device. In some implementations the SDD may be sent to the same computing device but provided to a different account logged into that same computing device. The SDD comprises hash data and may include link data. The hash data provide information which is indicative of the application module associated with the shortcut while the hash value uniquely identifies a particular application experience or shortcut. The link data may include a uniform resource identifier URI which may be used to initiate installation of the application module should the recipient device not have the application module installed.

The recipient device receives the SDD. Based on the hash data such as the application identifier therein a particular application module associated with that application identifier is provided with the hash value. In some implementations this may include a manual operation such as presenting the hash data to the user for manual input to the corresponding application module. In other implementations the SDD or a portion of the information therein may be provided automatically to the particular application module.

The application module on the recipient device uses the shortcut function modules to retrieve the application data from the shortcut server which is associated with the hash data. For example the application module may provide the shortcut server with the hash data and the shortcut server may return the application data to the recipient device. As with the generation of the application data the developer of the application module defines the use of the application data.

In some situations the recipient device may lack the application module associated with the SDD. For example the sending device may have the application module for the application Playzes2Go installed while the recipient device may not. The recipient device may initiate installation using the information provided in the link data. Continuing the example the user may select or activate a URI in the link data to open an application store application which is configured to distribute the Playzes2Go application module to the recipient device. Once installed the application module may use the shortcut function modules to retrieve the application data using the hash data. Once retrieved the application data may be used to recreate the application experience of the sending device.

The application experience sharing system may be configured to receive remuneration for providing the functionality described in this disclosure. In one implementation the system may assess a fee for each application module distribution which is attributed to a shortcut. For example an application distributor may be charged 1 for each application module which was referred to the application store by the link data in the SDD. In another implementation the system may assess a fee based on a percentage of sales associated with use of the application data. Continuing the earlier travel example a percentage of the sales associated with the travel itinerary as booked which is associated with the shortcut may be assessed. In another implementation the system may assess a fee based on each retrieval of application data from the shortcut server. For example 0.05 may be billed each time the application data is sent to a recipient device. In still another implementation the system may assess a fee based on each access to the application data including access to application data which has been previously transferred by the shortcut server and is stored within a cache on the recipient device. Finally a combination of fees including those described above or other fees may also be assessed.

Use of the system described in this disclosure improves application experiences while interaction with application modules by enabling robust storage and sharing of application experiences. Users may send application experiences to one another using the shortcuts described herein. This improves collaboration by allowing different users to start on the same page . Furthermore the application developers may easily integrate the shortcut functionality into existing applications while retaining control as to what application data to send how to format the application data and so forth.

Additionally use of the system may improve distribution of application modules to computing devices which have not previously installed the application module. For example as senders send shortcuts to recipients the functionality provided by the link data provides a low friction path to begin application installation. As a result more application modules may be distributed compared to traditional systems. Finally overall sales associated with the application modules may be increased as users are more easily able to collaborate and share application experiences.

The computing device may be configured to provide a user interface . The user interface may include one or more of a graphical user interface GUI character user interface CUI audible user interface or haptic user interface. In particular an application module may provide information which is used by another module executing on the computing device such as an operating system module to provide the user interface .

The application module may be configured to provide one or more functions including but not limited to data retrieval data storage data processing and so forth. For example the application module may be configured to provide a user interface which allows the user to access information about airline travel hotels and so forth. In another example the application module may be configured to present content such as audio video webpages and so forth. The application module may be colloquially known as an app .

The computing device may store and execute at least in part the application module . For example the application module may include one or more server side components in which at least a portion of the application module functionality executes on a remote computing device. In another example the application module or portions thereof may be stored on external storage devices such as a remote storage server distributed across another computing device and so forth. The computing device may store execute or store and execute a plurality of application modules . The plurality of application modules may be provided or developed by a plurality of entities. For example application module may be produced by Alpha Corp. while application module may be produced by Beta Inc. .

The application module as illustrated here integrates one or more shortcut function modules . The shortcut function modules may be integrated with the application module during compiling of an executable. The shortcut function modules may include one or more libraries. The integration is discussed in more detail below with regard to and elsewhere in the disclosure.

The shortcut function module provides functionality associated with sharing an application experience by way of a shortcut. The application may call on the functions provided to perform one or more operations including but not limited to creating a shortcut sharing a shortcut retrieving a shortcut adding to a shortcut deleting a shortcut and so forth. Details about these operations are discussed in more detail elsewhere in the disclosure.

The system described in this disclosure provides a mechanism by which an application experience or a portion thereof may be expressed by a shortcut which may be stored for later use or shared with others. In some implementations the application experience may be considered a particular point in an interaction of the application module and corresponding backend systems such as data servers. The application experience may include a particular image of the user interface as presented on a display a particular portion of audio being presented by speakers and so forth.

The shortcut function module may be configured to generate shortcut reference data SRD . The SRD may include one or more of application data hash data log data or other data.

The application data may include state data screenshots or other information. The application data may be processed by an application module executing on a recipient computing device to configure the recipient computing device to re create or closely approximate the state of the application module at the time the shortcut was generated. The application data is discussed in more detail below with regard to as well as elsewhere in this disclosure.

The hash data may be used to identify a particular shortcut distinguishing one shortcut from another. The hash data may include an application identifier which indicates a particular application module which generated the shortcut and a hash value. The hash value is generated by applying a hashing function to at least a portion of the application data . For example a device identifier state data date time and so forth may be used as input to generate the hash value. The hash data is discussed in more detail below with regard to as well as elsewhere in this disclosure.

In some implementations the hashing function may be configured to produce a hash value with a maximum length which is limited to include particular characters involves a particular arrangement of those particular characters and so forth. For example the hashing function may be configured to produce hash values which only include letters or numbers omits special characters or punctuation marks forms mnemonic constructs and so forth.

In some implementations the log data may be included in the SRD . The log data may include current state of UIView classes UIWebview classes network data information from an operating system console and so forth. The log data is described in more detail below with regard to as well as elsewhere in the disclosure. The log data may be used in situations where the recipient is attempting to debug or troubleshoot a problem encountered by the computing device generating the shortcut.

In some implementations the shortcut function module may provide link data . The link data may include a uniform resource identifier URI . Should the shortcut be provided to a computing device which lacks a compatible application module the link data may be used to initiate installation of the application module . For example the link data may include a URI which invokes an application store application module at a predetermined address from which the application module may be obtained from an application store service. In another example the link data may comprise a script or other information configured to install the application module which has been previously stored in the memory of but not installed on the computing device . The link data is described in more detail below with regard to as well as elsewhere in the disclosure.

For ease of illustration not necessarily as a limitation the computing device which generates SRD may be known as a sender . Similarly the computing device which receives a shortcut may be known as a recipient . In some implementations the sender and the recipient may be the same computing device . For example a first user may be logged into the computing device using a first user account and may generate SRD corresponding to a shortcut. Continuing the example a second user may then log into the computing device using a second user account and access the shortcut.

The shortcut function modules of the sender may be configured to generate the SRD automatically upon user input or both. For example the SRD may be generated at periodic time intervals upon occurrence of particular events within the application module and so forth. In another example the SRD may be generated upon activation by a user control such as a virtual button presented on a touchscreen device. Continuing this example the button may be provided in the user interface .

The computing devices may be configured to connect to one or more networks . The one or more networks may comprise public networks private networks or combinations thereof such as the Internet. For example the public network may comprise a cellular data network while the private network comprises a local area network. A shortcut server may also connect to the one or more networks such that the computing devices may communicate with the shortcut server .

The shortcut server may include a shortcut processor module . The shortcut server may also store or have access to shortcut data . The shortcut processor module is configured to receive SRD as provided by the sender . Once received the SRD or a portion thereof is stored within the shortcut data . The shortcut data may include information indicative of the sender the hash data the application data associated with the hash data log data if provided link data and so forth. The shortcut data is discussed in more detail below with regard to and elsewhere in this disclosure.

The shortcut processor module is also configured to respond to shortcut requests . As described elsewhere in more detail the recipient may send a shortcut request to the shortcut server . The shortcut request may include the hash data . Based at least in part on the hash data the shortcut processor module may be configured to retrieve corresponding application data from the shortcut data . The shortcut processor module may perform other operations as described elsewhere in this application.

The computing devices may communicate with one another by way of the network . For example the computing devices and may have established a peer to peer local area network by way of a wireless networking interface such as Wi Fi or Bluetooth .

In some situations the computing devices may use an intermediary such as a communication server to communicate. For example the communication server may be provided by a telecommunication carrier and may be configured to provide short message service SMS to the computing devices by way of a wireless cellular communication network. In another example the communication server may comprise an instant messaging server email server file transfer service and so forth operated by a network service provider. In still another example the communication server may comprise a web service such as a social media website social networking website and so forth. The communication server may include a data interchange module . The data interchange module is configured to exchange information between the computing devices . Continuing the example above the data interchange module may be configured to accept an SMS message from the computing device and deliver the SMS message to the computing device by way of the wireless cellular communication network. The data interchange module may store message data . The message data comprises information associated with the transfer of data. For example the message data may include a sender identifier recipient identifier billing information message contents and so forth.

An application distribution server may also connect to the network and may thus be in communication with the computing device . The application distribution server may execute a distribution module configured to provide the application module to the computing device . For example the distribution module may receive an application installation request and may distribute the application module to a computing device . In one implementation the distribution module may be a portion of an application store operated by a merchant. Users may access the application store by way of the computing devices . The application distribution server may maintain distribution data . The distribution data may include a recipient identifier indicative of a user account or computing device which received the application module information associated with the request for distribution and so forth. For example the distribution data may include the hash data associated with a request for distribution of the application module from a computing device which requested installation of the application module .

The sender may send shortcut delivered data SDD to the recipient . As described above the sender may communicate the SDD to the recipient . The communication may be by way of the network and may include direct communication such as in the case of a peer to peer connection between the computing devices and or by way of an intermediary device such as the communication server . For example the sender may send the SDD to the recipient using a Bluetooth connection. In another example the sender may send the SDD to the recipient as an SMS instant message posting to social networking website and so forth.

The SDD comprises the hash data and in some implementations may include the link data . The recipient processes the SDD . In a first implementation the processing may be performed by the application module as described above which includes the integrated shortcut function modules and is thus able to process the SDD . In a second implementation an application module may not include the shortcut function module s . In this implementation a separate shortcut handler module may be configured to process the SDD . For example the shortcut handler module may comprise an operating system plug in service daemon and so forth configured to process the SDD . The shortcut handler module may comprise the shortcut function modules and additional modules. In one implementation the shortcut handler module may be configured to pass the hash data the application data or both to the application module associated with the SDD .

For ease of illustration and not by way of limitation the application module may be considered operationally equivalent to the application module and the shortcut handler module . Unless otherwise indicated herein the combination of the application module and the shortcut handler module may be used interchangeably in place of the application module having the integrated shortcut function module .

Furthermore the shortcut function modules as executing on different computing devices may include different functionality or feature sets. For example the shortcut function module of the application module may include the ability to generate SRD but may omit the ability to receive or process SDD . Conversely the application module may include the ability to receive and process the SDD but may omit the ability to generate the SRD .

In either the first or second implementations described above the recipient processes the SDD . The processing may include determination as to whether the application module is installed on the recipient . For example the application identifier in the hash data may be inspected and compared to determine if the application module which is associated with the shortcut is available for execution on the recipient . If the application module is unavailable a request for installation of the application module may be made to the application distribution server . For example in one implementation the link data as included in the SDD may be used to initiate installation of the application module which is associated with the hash data . Use of the link data allows for a low friction application experience in which the application module may be readily installed and then used.

The processing also includes sending the shortcut request as described above. For example the shortcut function modules may be used to generate the shortcut request which includes the hash data as received in the SDD .

As described elsewhere in this disclosure the shortcut request is processed by the shortcut server . Responsive to hash data in the shortcut request the shortcut processor module retrieves from the shortcut data the application data associated with the hash data . At least a portion of the application data may then be provided to the recipient .

The application module or the shortcut handler module of the recipient may accept the application data and may configure the application module or the application module using the application data . For example the application module of the recipient may be configured with the application data to re create the state of the application module of the sender at the time the SRD was generated. Thus the application experience of the sender is recreated for the recipient .

In some implementations fees may be calculated and assessed based on the operation of the system . For example fees may be assessed for one or more of the processing of the SRD by the shortcut server delivery of the SDD distribution of the application module responsive to the link data and so forth. Fees may include a transfer of remuneration from one party to another. The remuneration may include currency points virtual currency or other value keeping units.

For ease of illustration not necessarily as a limitation the servers described in this disclosure are discussed in terms of a single device. However it is understood that the servers may be implemented as a plurality of different hardware devices virtual servers executing on one or more hardware devices and so forth. The servers may be physically located in one or more geographic locations. For example the shortcut server may comprise a plurality of devices at multiple data centers located in different cities.

The system may serve to enhance the distribution of the application module to computing devices which do not previously have the application module installed thereon. For example as use of the application module takes place and users began sending shortcuts to other users the link data is used to easily install the application module on the recipient devices. Sending users thus have the convenience of being able to easily share the application experience while the recipient users are easily able to acquire the application module and partake in the application experience sent to them.

In addition to enhanced distribution the ability to share the application experience by way of the shortcuts may also increase utilization of the application module as well as increasing revenues associated with the application module . For example users may be more inclined to make a purchase of a product or service which is associated with the shortcut from a friend compared to finding the product or service from scratch on their own.

Additionally the ability to share the application experience may improve user satisfaction with the application module by providing enhanced support options. The enhanced support options may use the application experience sharing provided by the shortcuts to provide information to software support personnel at a help desk responsible for mobile application performance monitoring. For example the SDD may include the log data as described in this disclosure. The SDD or the SDD may be provided to the software support personnel in the event of an unexpected or undesired occurrence while using the application module on the sender device. By using the system users are able to quickly and easily provide meaningful information to the software support personnel which may be used to address the unexpected or undesired occurrence. Thus instead of a long chat or telephone call with the software support personnel the user may simply send a shortcut. This process may improve the user s overall experience with the application. This improved experience may be reflected in ratings or reviews made by the users of the application module and so forth.

The screenshot may comprise one or more images acquired during presentation of a user interface by the sender . The screenshot may comprise an image set of images or video which record images as generated for presentation by a display device. The screenshot may be acquired by reading data from a memory location used by a graphics subsystem.

The other application data may include browser cookies state information acquired from external devices such as sensors a user identifier and so forth.

The software developer of the application module may populate the application data with information of their choosing. This information may be at whatever level of granularity the software developer chooses to provide in the application experience. For example a first software developer of the application module may choose to store as application data background colors of the user interface . In comparison a second software developer of the application module may choose to store several kilobytes of information including information indicative of queries provided to an external server processor register data query results received and so forth. In some implementations the shortcut function module may be configured to accept information expressed as a string and generate the SRD from the string.

The hash data may comprise an application identifier and a hash value . The application identifier comprises information indicative of a particular application module which generated the SRD . The application identifier may be configured to use particular characters such as letters and numbers have a maximum length and so forth. For example as shown in this illustration the application identifier may comprise the four characters PL2G which are associated with the application module titled Playzes2Go . The application identifier may incorporate one or more mnemonic devices to aid the user in remembering the application identifier . In some implementations other well known values may use the application identifier such as a stock ticker identifier.

The hash value is generated by using at least a portion of the application data as input to a hashing function. For example a portion of the state data may be used as input to the hashing function. The hashing function may be configured to produce a hash value subject to one or more constraints. These constraints may include but are not limited to one or more of a minimum length maximum length inclusion of particular characters exclusion of particular characters particular arrangements of characters and so forth. For example the hashing function may be configured to produce a hash value which only includes letters and has a minimum length of four characters.

The hashing function may process the inputs at an individual bit level character level by interpreting a string is an array of integers and so forth. The hashing function may include cyclic redundancy checks checksum functions cryptographic hash functions or a combination thereof. For example the hashing function may implement a cyclic redundancy check CRC Pearson hash Fowler Noll Vo hash Java hashCode hash Jenkins hash MD6 hash SHA 512 hash and so forth.

The hash data is configured to provide a unique reference to the application data . The level of uniqueness used in operation system may be such that a particular combination of application identifier and hash value is unique. For example the hash data PL2Gb98z may be unique compared to BOBOb98z . In some implementations the hash data may be expired allowing for reuse of previously issued hash values .

The hash data is illustrated in this disclosure as a string in which the application identifier is followed by the hash value . However in other implementations the application identifier may be positioned after the hash value in the hash data straight. In another implementation the application identifier may be distributed before and after the hash value or the application identifier and hash value may be otherwise interspersed with one another. For example the hash data may alternate positions used by the application identifier and the hash value such that the hash data in this example would be expressed as PbL928 Gz .

As described elsewhere in some implementations the SRD may include log data . The log data may include information which is acquired by an operating system of the sender the application module generating the SRD another application module executing on the sender and so forth. The log data may comprise information indicative of the operation of the sender the interaction of the sender with other devices interactions between the modules executing on the sender and so forth.

The log data may include one or more of UIView data UIWebView data network data or other log data . The UIView data comprises information about a UIView class in use by the application module . For example such as may be used to define an area on a display for presentation of content. The UIWebView data comprises information about a UIWebView classes in use by the application module . For example such as may be used to embed web content within the application module . The network data may include information associated with a network communication stack executing on the sender . For example the network data may include capture of at least a portion of network traffic to and from the sender . The other log data may include crash dumps console output heap size utilization hardware utilization statistics and so forth.

The log data may be continuously or periodically acquired prior to generation of the SRD . The periodic acquisition may be triggered by a timer or occurrence of one or more events. For example the events may include application startup application termination initiation of a communication session with an external device and so forth. The log data may be discarded in a last in last out fashion allowing for ongoing capture of information leading up to the point in time at which the generation of the SRD was initiated.

The SRD may include other data . For example the other data may include information such as preferred encryption settings for communication screen brightness touch sensor sensitivity volume level and so forth.

As described elsewhere the SRD is provided to the shortcut server . The SDD is provided to the recipient s . As illustrated in this figure the SDD may comprise the hash data and the link data . Alternatively the SDD may comprise the hash value and may include one or more of the application identifier or the link data .

In one implementation the application identifier may be omitted. Instead the link data may be used in place of the application identifier as well as to initiate installation should installation be called for.

In another implementation the SDD may comprise the hash data . The recipient may determine based at least in part on the application identifier that the application module is not installed on the recipient . In this implementation the shortcut request may include a request for the link data . The link data may then be included in a response by the shortcut server . Once received by the recipient the link data may be used to initiate installation of the application module from the application distribution server .

The link data may be configured to provide traceability of origin such that a determination may be made of the number of distributions resulting from the SDD . For example link data may refer to a particular URI which differs from a URI associated with browsing an application store to acquire the application module .

The link data may be configured for operation with particular operating systems. For example the link data may comprise an Apple launch URL compatible with iOS .

The shortcut function modules may be provided as a software development kit or set of libraries which may be incorporated into the application module during compile of the application module by a compiler application. As illustrated in application module source code is provided to a compiler . The shortcut function modules are also provided to the compiler . For example the shortcut function modules may be provided as a software development kit SDK for use by the software developers.

During compilation the shortcut function modules may be incorporated within the executable application module or may be referenced using static links to the shortcut function modules or libraries storing these modules. As a result the operations provided by the shortcut function modules are integrated with the application module as provided by the developer and the functionality associated with sharing the application experience is available in the operating system which uses sandboxes or other security measures.

The shortcut function modules provide functions which may be called by the application module . By way of illustration not necessarily as a limitation the functions may include 

The createShortcutFromString function is configured to access at least a portion of the application data and generate at least a portion of the hash data . For example the function may determine the application identifier generate the hash value and concatenate the two to form the hash data .

The addResultToShortcut function is configured to allow the inclusion of additional information to or update an existing SRD . In one implementation this function may be used to produce a hash value which is based on query results which have been received from an external server responsive to query conditions expressed in the state data . In another implementation the hash data may remain unchanged while the application data is modified or appended to.

The shareShortcut function is configured to provide the SRD to the shortcut server the SDD to the recipient or both. For example the function may be configured to establish a communication channel with the shortcut server .

The retrieveShortcutFromString function is configured to convert the application data to the hash data . The application data may be expressed as a string in some implementations.

The retrieveStringFromShortcut function is configured to convert the hash data to the application data . The application data may be expressed as a string in some implementations.

The deleteShortCut function is configured to allow the application module to delete an existing shortcut. In one implementation this function may remove the corresponding entry in the shortcut data stored on the shortcut server . In another implementation this function may be used to refresh or update data associated with the SRD .

One of the functions which may be provided by the shortcut function modules is de duplication. De duplication prevents the generation of SRD which is duplicative or has been previously generated. For example the hash data may be compared with previously generated hash data to look for identical values. Upon determining that an identical value exists the more recent information associated with a pending SRD may be discarded in the generation of the pending SRD may be discontinued.

The shortcut function modules may also be configured to provide data compression encryption and so forth. For example the application data may be compressed and de compressed using a GZIP algorithm.

In another implementation where the operating system permits exchange of data between application modules the shortcut handler module may operate to process the SDD and provide associated functionality. The shortcut handler module may be implemented as an operating system plug in service daemon and so forth. In this implementation the shortcut handler module may exchange information with the application module using one or more features of the operating system such as an inter process communication IPC .

The computing device may include one or more input output I O interface s to allow the computing device to communicate with other devices. For example the I O interface s may be configured to provide a universal serial bus USB connection.

The computing device may include one or more input output I O interface s to allow the processor or other portions of the computing device to communicate with other devices. The I O interfaces may comprise inter integrated circuit I2C serial peripheral interface bus SPI Universal Serial Bus USB as promulgated by the USB Implementers Forum RS 232 one or more media interfaces such as High Definition Multimedia Interface HDMI as promulgated by HDMI Licensing LLC and so forth.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a camera a microphone a touch sensor a button fingerprint reader motion sensor magnetometer and so forth. The I O devices may also include output devices such as one or more of a display audio speakers haptic output devices and so forth. In some embodiments the I O devices may be physically incorporated with the computing device or may be externally placed.

The computing device may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the computing device and other devices such as other computing devices routers access points servers and so forth. The communication interfaces may be configured to couple wired or wirelessly to one or more networks such as PANs LANs WANs personal area networks and so forth. For example the communication interfaces may be configurable to connect to Ethernet Wi Fi Bluetooth 3G 4G LTE and so forth.

The computing device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the computing device .

The computing device includes one or more memories . The memory comprises one or more computer readable storage media CRSM . The CRSM may be any one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the computing device .

The memory may include at least one operating system OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . The OS module may implement one or more of iOS from Apple Corp. of Cupertino Calif. Windows Mobile from Microsoft Corp. of Redmond Wash. Android from Google Inc. of Mountain View Calif. and its derivatives from various sources Palm OS from Palm Computing Inc. of Sunnyvale Calif. and its derivatives from various sources BlackBerry OS from Research In Motion Ltd. of Waterloo Ontario Canada or other operating systems such as VxWorks from Wind River Systems of Alameda Calif. In cases where the OS module implements a version of iOS any version of iOS may be supported including iOS 1.x 2.x 3.x 4.x 4.x 6.x 7.x or higher versions including any version of iOS for the iPhone iPad iPod Touch or any other compatible derivative or related device. In cases where the OS module implements a version of Android any version of Android may be supported including but not limited to versions 2.3.x Gingerbread 4.0.x Ice Cream Sandwich 4.1.x Jelly Bean and so forth. In some implementations the OS module may be configured to sandbox applications.

Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks services daemons and so forth.

A communication module may be configured to provide communication with devices external to the computing device using the communication interfaces . The communication module may be configured to support hypertext transport protocol HTTP file transfer protocol FTP WebSockets WS secured socket layer SSL transport layer security TLS and so forth. The communications may be authenticated encrypted and so forth.

User interface module is configured to provide the user interface . The user interface module may be configured to provide output using one or more of the I O devices such as the display speakers or haptic output device. The user interface module may also be configured to accept input using or more of the I O devices such as the touch sensor.

The memory may store one or more of the application module with the integrated shortcut function module the shortcut function module s the application module or the shortcut handler module .

The application module may be configured to provide one or more functions including but not limited to data retrieval data storage data processing and so forth. The application module may incorporate the shortcut function modules . As described with regard to the shortcut function modules may be integrated with the application module at compile time.

The shortcut function modules provide functions associated with generating processing and using the shortcuts. In some implementations the shortcut function modules may be implemented as one or more libraries which may be statically linked to the application module at compile time.

In some implementations the application module may omit the integration of the shortcut functional modules . In this implementation a shortcut handler module may be used to process the shortcuts.

Other modules may also be stored in the memory such as speech recognition modules cryptographic modules and so forth.

The memory also includes a datastore to store information for operations of the computing device . The datastore may comprise a database array structured list tree scripts executable code or other data structure to store information. The datastore may store one or more of the SRD the link data or the SDD . Other data may also be stored such as user preferences configuration settings SRD processing rules SDD processing rules and so forth. For example the SRD processing rules may set forth conditions under which the SRD may be generated. Continuing the example the application module may implement rules prohibiting generation of the SRD within certain portions of the application module user interface . In another example the SDD processing rules may set forth conditions which determine how the SDD is processed. Continuing this example the SDD from particular senders may be automatically processed while SDD from others may prompt for user confirmation before utilizing.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard mouse scanner and so forth. The I O devices may also include output devices such as one or more of a display audio speakers and so forth. In some embodiments the I O devices may be physically incorporated with the shortcut server or may be externally placed.

The shortcut server may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the shortcut server and other devices such as the computing devices routers access points and so forth. The communication interfaces may be configured to communicate with the network including personal area networks PANs local area networks LANs wide area networks WANs and so forth.

The shortcut server may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the shortcut server .

As shown in the shortcut server includes one or more memories . The memory comprises one or more CRSM as described above. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the shortcut server .

The memory may include at least one OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . The OS module may implement a variation of the Linux operating system as promulgated by Linus Torvalds the FreeBSD operating system the Windows Server operating system from Microsoft Corporation of Redmond Wash. and so forth.

Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons services and so forth.

A communication module may be configured to provide communication with devices external to the shortcut server using the communication interfaces . The communication module may be configured to support HTTP FTP WS SSL TLS and so forth. The communications may be authenticated encrypted and so forth. For example the communication module may be configured to exchange information with the computing device the communication server the application distribution server and so forth.

A user interface module is configured to provide one or more interfaces with which the shortcut server may interact with other devices. In one implementation of the user interface module may implement an HTTP server such as the Apache Web server. In another implementation the user interface module may provide one or more application programming interfaces API which may be accessed by the other devices such as the computing devices .

The shortcut processor module may also be stored in the memory . The shortcut processor module is configured to receive SRD as provided by the sender . Once received the SRD or a portion thereof is stored within the shortcut data .

The shortcut processor module may provide additional processing on the SRD or the contents thereof in some situations. For example implementations where the SRD omits the hash data the shortcut processor module may generate the hash data from the application data .

The shortcut processor module may also be configured to generate the hash data and compare this locally generated information with the hash data as received in the SRD . This comparison may be used to determine if the SRD has been corrupted or modified while in transit. For example a difference in the hash data included in the SRD and hash data generated by the shortcut processor module based on the application data may indicate the SRD has been tampered with.

The shortcut processor module is also configured to respond to shortcut requests . The shortcut request may be received from the recipient . The shortcut request may include the hash data . Based at least in part on the hash data the shortcut processor module may be configured to retrieve corresponding application data from the shortcut data .

A datastore management module may be configured to respond to requests made by the shortcut processor module or other modules to store or retrieve information. For example the database management module may comprise a database management system such as MySQL PostgreSQL SQLite Microsoft SQL Server Oracle SAP IBM DB2 and so forth.

An accounting module may be configured to calculate fees associated with the use of the shortcut server . For example the accounting module may be configured to retrieve information indicative of the number of application modules which have been distributed by the application distribution server responsive to link data . Continuing the example based on this information the accounting module may assess a fee.

Other modules may also be present in the memory . For example a payment processing module may be configured to initiate transfers of the fees assessed by the accounting module .

The memory may also include a datastore to store information. The datastore may comprise a database array structured list tree scripts executable code or other data structure to store information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including other servers network attached storage devices and so forth.

The datastore may store the shortcut data fee data billing data other data and so forth. The fee data may include rate schedules compensation matrices and so forth which are indicative of fees to be assessed for services provided by the shortcut server . The accounting module may access the fee data and use this information to determine the fees. The billing data may comprise information indicating what dollar values are to be billed or assessed to particular entities. For example the billing data may indicate that the software developer is assessed a 25 fee for 50 distributions of the application module by the application distribution server which were initiated by the link data . The other data may include user preferences configuration files and so forth.

The shortcut data may also include hash data application data link data and the log data . Additional information may also be stored as the shortcut data . For example the shortcut data may include distribution permissions associated with the SRD . A particular sender identifier may have specific permission to provide shortcuts to specific user accounts computing devices or various groups or combinations thereof. Continuing the example the sender identifier associated with a child may be configured such that the shortcut request will only be responded to when received from recipient devices designated as having permission to open the shortcut. In some implementations these permissions may be based on contractual or legal considerations. For example in some situations application experience sharing with others in a country may be permitted while sharing with those outside of the country may not be.

In some implementations the hash data may serve as a primary key or unique identifier within the shortcut data to identify a particular shortcut or application experience. In another implementation a combination of the hash data and the sender identifier may be used as the primary key.

In some implementations one or more of the SRD the SDD and so forth may be encrypted. The shortcut data may be used to store cryptographic keys associated with a particular shortcut.

The shortcut data is depicted as a table by way of illustration and not necessarily as a limitation. The shortcut data may be stored in non tabular data structures such as arrays lists object databases and so forth. Similarly other tables depicted in this disclosure are illustrative and the data described therein may be stored using other data structures.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard mouse scanner and so forth. The I O devices may also include output devices such as one or more of a display audio speakers and so forth. In some embodiments the I O devices may be physically incorporated with the computing device or may be externally placed.

The communication server may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the communication server and other devices such as the computing devices routers access points and so forth. The communication interfaces may be configured to communicate with the network including PANs LANs WANs and so forth.

The communication server may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the communication server .

As shown in the communication server includes one or more memories . The memory comprises one or more CRSM as described above. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the communication server .

The memory may include at least one OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . The OS module may implement a variation of the Linux operating system the FreeBSD operating system the Windows Server operating system and so forth.

Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons services and so forth.

A communication module may be configured to provide communication with devices external to the communication server using the communication interfaces . The communication module may be configured to support hypertext transport protocol HTTP file transfer protocol FTP WebSockets WS secured socket layer SSL transport layer security TLS and so forth. The communications may be authenticated encrypted and so forth. For example the communication module may be configured to exchange information with the computing device the application distribution server and so forth.

A user interface module is configured to provide one or more interfaces with which the communication server may interact with the other devices. In one implementation of the user interface module may implement an HTTP server such as the Apache Web server. In another implementation the user interface module may provide one or more APIs which may be accessed by other devices such as the computing devices .

The data interchange module may also be stored in the memory . The data interchange module is configured to receive transfer messages with the computing devices . The data interchange module may receive a message from the sender and provide the message to the recipient . As described in this disclosure the message may include the SDD . For example the data interchange module may comprise an email service configured to route email messages. In another example the data interchange module may comprise a social networking website at which users may post information. The data interchange module may be configured to maintain and access the message data .

A datastore management module may be configured to respond to requests made by the data interchange module or other modules to store or retrieve information. For example the database management module may comprise a database management system such as MySQL PostgreSQL SQLite Microsoft SQL Server Oracle SAP IBM DB2 and so forth.

An accounting module may be configured to calculate fees associated with the use of the communication server . For example the accounting module may be configured to access the message data indicative of the number of messages including SDD which have been distributed by to recipients . Continuing the example based on this information the accounting module may assess a fee.

Other modules may also be present in the memory . For example a payment processing module may be configured to initiate transfers of the fees assessed by the accounting module .

The memory may also include a datastore to store information. The datastore may comprise a database array structured list tree scripts executable code or other data structure to store information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including other servers network attached storage devices and so forth.

The datastore may store the message data fee data billing data other data and so forth. The message data may comprise one or more of the sender identifier a recipient identifier or the SDD . The recipient identifier may provide information indicative of a particular computing device a particular user account logged into or otherwise associated with the computing device or a combination of both which provided the SRD . For example the recipient identifier may comprise a media access control MAC address associated with one or more of the communication interfaces a universally unique identifier UUID assigned to the computing device and so forth.

The message data may also include other information such as network routing information network addresses a geographic location associated with the sending computing device the receiving computing device and so forth.

The fee data may include rate schedules compensation matrices and so forth which are indicative of fees to be assessed for services provided by the communication server . The accounting module may access the fee data and use this information to determine the fees. The billing data may comprise information indicating what dollar values are to be billed or assessed to particular entities. For example the billing data may indicate that the user account associated with the sender is assessed a 0.05 fee for transmission of an SMS message. In some implementations the fee data may vary based on the type of message. For example a message which includes the SDD may be delivered at no charge or at a different cost then another message. In another example fees assessed for delivery of the message which includes the SDD may be shifted to another party. For example the software developer of the application module for the SDD may choose to pay for the delivery of messages which include the SDD to encourage use of the shortcuts in the application module .

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard mouse scanner and so forth. The I O devices may also include output devices such as one or more of a display audio speakers and so forth. In some embodiments the I O devices may be physically incorporated with the computing device or may be externally placed.

The application distribution server may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the application distribution server and other devices such as the computing devices routers access points and so forth. The communication interfaces may be configured to communicate with the network including PANs LANs WANs and so forth.

The application distribution server may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the application distribution server .

As shown in the application distribution server includes one or more memories . The memory comprises one or more CRSM as described above. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the application distribution server .

The memory may include at least one OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . The OS module may implement a variation of the Linux operating system the FreeBSD operating system the Windows Server operating system and so forth.

Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons services and so forth.

A communication module may be configured to provide communication with devices external to the application distribution server using the communication interfaces . The communication module may be configured to support HTTP FTP WS SSL TLS and so forth. The communications may be authenticated encrypted and so forth. For example the communication module may be configured to exchange information with the computing device the shortcut server the communication server and so forth.

A user interface module is configured to provide one or more interfaces with which the application distribution server may interact with the other devices. In one implementation of the user interface module may implement an HTTP server such as the Apache Web server. In another implementation the user interface module may provide one or more APIs which may be accessed by other devices such as the computing devices .

The distribution module may also be stored in the memory . The distribution module is configured to provide the application module or the application module the shortcut handler module and so forth to the computing device . The distribution module may be a portion of or support operation of an application store operated by a merchant. Users may access the application store by way of the computing devices . Once accessed the users may initiate distribution of the desired application module.

Initiation of distribution of the application module may be facilitated by the link data . For example the recipient may process the SDD to determine a URI which accesses the distribution module with regard to a particular application module . The distribution module may be configured to accept a request using the URI to begin a process which may result in the installation of the application module . Continuing the example the distribution module may provide using the user interface module a set of terms of service which may be accepted by the user and in turn may lead to transmission of installation files associated with the application module .

A datastore management module may be configured to respond to requests made by the distribution module or other modules to store or retrieve information. For example the database management module may comprise a database management system such as MySQL PostgreSQL SQLite Microsoft SQL Server Oracle SAP IBM DB2 and so forth.

An accounting module may be configured to calculate fees associated with the use of the application distribution server . For example the accounting module may be configured to access the distribution data indicative of a number of applications distributed to recipients . Continuing the example based on this information the accounting module may assess a fee for these distributions.

Other modules may also be present in the memory . For example a payment processing module may be configured to initiate transfers of the fees assessed by the accounting module .

The memory may also include a datastore to store information. The datastore may comprise a database array structured list tree scripts executable code or other data structure to store information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including other servers network attached storage devices and so forth.

The datastore may store the distribution data fee data billing data other data and so forth. The distribution data may comprise one or more of the recipient identifier the hash data a date time of distribution information indicative of the application distributed sales associated with or resulting from the distributed application module and so forth. The information indicative of the application distributed may comprise one or more of an application serial number application title version number build number or other information. In some implementations the application distributed may be broken down by operating system of the recipient version of the application module distributed and so forth. The sales associated with or resulting from distributed application module may comprise information indicative of sales made using the application module as distributed originating from an interaction on the recipient device which is associated with the shortcut and so forth. For example the sender may receive remuneration for sending a shortcut which results in a purchase.

The distribution data may also include other information such as a geographic location associated with the recipient count of the number of times the same application module has been distributed to the same computing device and so forth.

The fee data may include rate schedules compensation matrices and so forth which are indicative of fees to be assessed for services provided by the application distribution server . The accounting module may access the fee data and use this information to determine the fees. The billing data may comprise information indicating what dollar values are to be billed or assessed to particular entities. For example the billing data may indicate that the account associated with the software developer is assessed a 1.00 fee for each distribution of the application module .

The other data may include user preferences configuration files blacklisted computing devices and so forth. For example a particular computing device which is continuously downloading the same application module may be blacklisted and prevented from further distribution of the application module .

After or contemporaneously with the generation of the SRD block as executed on the sender sends a message comprising the SDD to the recipient . For example the message may comprise an SMS message email social network post and so forth. In implementations where the message is delivered using the communication server block as executed on the communication server delivers the message to the recipient .

Block as executed on the recipient stores the SDD . In the event the application module associated with the SDD is not installed or otherwise unavailable the application distribution process may proceed. The event the application module associated with the SDD is installed or otherwise available the process may proceed to block .

The application distribution process includes blocks through . Block as executed on the recipient requests an application module for distribution based on the link data . For example the recipient may use a URI in the link data to connect to the application distribution server and request distribution of the application module . Responsive to this request block as executed on the application distribution server distributes the application module . Block as executed on the recipient installs the application module .

Block as executed on the recipient requests the application data associated with the hash data in the SDD . For example the shortcut function module of the recipient may send the shortcut request to the shortcut server . Block as executed on the shortcut server provides the application data associated with the hash data to the recipient . For example the shortcut processor module may retrieve the application data using the hash data as a key value for retrieval to uniquely identify the particular application data associated with the shortcut.

Block as executed on the recipient receives the application data from the shortcut server and sets the application module using the application data . For example the application data may overwrite or replace the current state of the application module presently executing on the recipient .

At a message is received which includes SDD comprising the hash data . For example an SMS message may be received by a messaging client module.

At the hash data is presented with a first user interface of a first application module. Continuing the example the messaging client module may present the first user interface which shows the message including the hash data on the display device of the computing device .

At the hash data is received with second user interface of a second application such as the application module . For example the user may copy and paste the hash data from the first application to the second application or may remember and then manually enter the hash data .

At the application data associated with the hash data is received from the shortcut server . For example the recipient may send a shortcut request to the shortcut server and receives the application data in response.

At following the receipt of the application data the second application is configured using the application data . Continuing the example the application data may replace the current state of the application module . In another example such as where the application data includes the screenshot the screenshot may be presented on the display device of the computing device .

At a message is received which includes SDD comprising the hash data . For example an SMS message may be received by a messaging client module.

At a control associated with the hash data is presented with a first user interface of a first application module. Continuing the example the messaging client module may present the first user interface which shows the message and the control . In some implementations the hash data or an indication associated with the hash data such as a particular icon may be presented on the display device indicating availability of a shortcut. In this illustration the control is presented as a zone on the display associated with the hash data .

In some implementations the control may be omitted or preconfigured. In a first implementation the SDD may be processed automatically without receiving user input or confirmation. For example all incoming SDD may be processed by the shortcut function modules . In a second implementation processing of the SDD may incorporate rules. The rules may designate one or more of a particular sender identifier particular application module date time message delivery mechanism e.g. SMS email instant message social network post etc. or other. For example the rules may specify that SDD sent by a particular sender identifier such as associated with the recipient user s parent may be automatically processed while other SDD s sent by other senders such as determined by device identifier user identifier or both result in a prompt for manual approval.

At the control is activated. For example the user may touch the control enter a verbal command which is recognized by speech recognition module or provide other input which activates the control .

At the application data associated with the hash data is received from the shortcut server . For example the recipient may send a shortcut request to the shortcut server and receives the application data in response.

At following the receipt of the application data the second application module is configured using the application data . Continuing the example the application data may replace the current state of the application module . In another example such as where the application data includes the screenshot the screenshot may be presented on a display device.

Block accesses the application module source code . For example the compiler may open the application module source code as stored in the memory .

Block accesses one or more shortcut function modules . For example the compiler may open the shortcut function modules as stored in the memory .

Block generates the application module with integrated shortcut function modules . In one implementation the generation may comprise compiling the source code and including one or more static links to the one or more shortcut function modules . In another implementation the generation may comprise including the shortcut function modules into the code of the application module source code and compiling this combined source code.

Block executes an application module on a computing device . For example a user may initiate execution of the application module . In one implementation the application module may comprises one or more of a shortcut function module incorporated at compilation of the application module source code or a link to a static library incorporated at compilation of the application module source code . In another implementation the application module may operate in conjunction with a shortcut handler module which may include one or more of the shortcut function modules .

Block presents a user interface of the application module . In some implementations the user interface may be based at least in part on the application data . In some implementations this block may be omitted. For example the application module may be headless such that it does not provide the user interface to the user but instead may provide information which is used by another application module which may provide the user interface .

Block stores application data of the application module . In some implementations the application data may be associated with the presentation of the user interface . For example the application data may include information which includes what is presented within the user interface as well as state data which has configured the application module to arrive at the state which is represented by the user interface .

Block generates hash data comprising a hash value . The hash value may be based at least in part on applying a hash function to at least a portion of the application data . The hash data may also comprise the application identifier indicative of the application module which is associated with the generation or use of the shortcut. In some implementations the process may determine the application identifier indicative of the application module. For example the shortcut function module may retrieve an application identifier from the application module .

In some implementations the application module of the sender and the application module of the recipient may differ. For example the application module may be compiled for execution on an Android device while the application module may be compiled for execution on an iOS device. In another example the application modules and of the sender and the recipient may be provided by different entities provide different sets of functions and so forth. However the shortcut function modules used by both the sender and the recipient are configured to operate on the application data such that the application experience provided to the user is consistent.

Furthermore in some implementations the shortcut processor module may be configured to translate the application data provided by the sender into a form which is suitable for use by the recipient . For example state information may be converted from an integer object as used on the sender to a string object as used on the recipient .

In some implementations the process may include performing one or more operations on the SRD . The operations may include one or more of encrypting at least a portion of the application data compressing at least a portion of the application data preventing generation of duplicate SRD and so forth.

Block sends to a first external device the SRD comprising at least a portion of the application data and the hash data . For example the first external device may comprise the shortcut server .

Block generates the SDD . The SDD comprises the hash data and may also comprise the link data . The link data may comprise a URI indicative of a network location from which installation of the application module or may be initiated.

Block sends to a second external device the SDD . For example the second external device may comprise the recipient or the communication server which will deliver the SDD to the recipient . The sending of the SDD may include one or more of transmitting an SMS message comprising the SDD transmitting an email message comprising the SDD posting a file comprising the SDD to a web server and so forth.

In some implementations a block not illustrated may receive at a user input device an input. For example the user may touch a touch sensor speak verbal input which is acquired by a microphone and so forth. The sending of the SDD to the second external device may be responsive to receiving the input. Continuing the example the input may initiate sending the shortcut. In some implementations the input may also trigger presentation of the user interface configured to accept information designating the recipient .

Block executes an application module on a computing device . For example the application module may be automatically executed on startup of the computing device . In one implementation the application module may comprise one or more of a shortcut function module incorporated at compilation of the application module source code or a link to a static library incorporated at compilation of the application module source code . In another implementation the application module may operate in conjunction with a shortcut handler module which may include one or more of the shortcut function modules .

Block requires the log data of the computing device . For example the shortcut function modules may retrieve information from the OS module .

Block presents a user interface of the application module . In some implementations the user interface may be based at least in part on the application data .

Block stores application data of the application module . In some implementations the application data may be associated with the presentation of the user interface . For example the application data may include information which includes what is presented within the user interface as well as state data which has configured the application module to arrive at the state which is represented by the user interface screenshots and so forth.

Block generates hash data comprising a hash value . The hash value may be based at least in part on applying a hash function to at least a portion of the application data . The hash data may also comprise the application identifier indicative of the application module which is associated with the generation or use of the shortcut. In some implementations the process may determine the application identifier indicative of the application module . For example the shortcut function module may retrieve an application identifier from the application module .

As described above in some implementations the application module of the sender and the application module of the recipient may differ. However the shortcut function modules used by both the sender and the recipient are configured to operate on the application data such that the application experience provided to the user is consistent.

In some implementations the process may include performing one or more operations on the SRD . The operations may include one or more of encrypting at least a portion of the application data compressing at least a portion of the application data preventing generation of duplicate SRD and so forth.

Block sends to a first external device the SRD comprising at least a portion of the application data and the hash data . For example the first external device may comprise the shortcut server .

Block generates the SDD . The SDD comprises the hash data and may also comprise the link data . The link data may comprises a URI indicative of a network location from which installation of the application module or may be initiated.

Block sends to a second external device the SDD . For example the second external device may comprise the recipient or the communication server which will deliver the SDD to the recipient . The sending of the SDD may include one or more of transmitting an SMS message comprising the SDD transmitting an email message comprising the SDD posting a file comprising the SDD to a web server and so forth.

In some implementations a block not illustrated may receive at a user input device of the computing device an input. For example the user may touch a touch sensor speak verbal input which is acquired by a microphone and so forth. The sending of the SDD to the second external device may be responsive to receiving the input. Continuing the example the input may initiate sending the shortcut. In some implementations the input may also trigger presentation of the user interface configured to accept information designating the recipient .

Block receives using the communication interface shortcut SDD comprising the hash data . The hash data includes a hash value and may also include an application identifier . The hash value may be based at least in a part on applying one or more hashing functions to data indicative of one or more of a device identifier of a sending device an application identifier of an application module executing on the sending device application data indicative of a state of the application module on the sending device a user identifier of a user associated with the sending device and so forth.

Block determines an application module associated with the SDD . In one implementation this determination may include comparing the application identifier with information stored in the memory . The information may be configured to associate a particular application identifier with a particular application module . For example a look up table may store the information indicating the application identifier PL2G refers to the Playzes2Go travel application while the application identifiers BOBO refers to the FlyMeAway aircraft charter application.

When block determines the application module associated with the SDD is installed and directs the process to block . Block sends using the communication interface a request for application data to an external device. For example the shortcut request may be sent to the shortcut server . As described above the request may comprise the hash data .

Block receives using the communication interface application data from the external device. For example the shortcut server may return the application data . The application data may comprise one or more of information state data indicative of a state of the application module as executed at least in part by a sending device or a screenshot acquired during presentation of a user interface on the sending device . As described above the user interface may be a GUI CUI audible user interface or haptic user interface.

Block configures the application module using the application data . For example the shortcut function modules may load the application data into one or more memory locations used by the application module .

Returning to block when the application module associated with the SDD is determined to not be installed the process proceeds to block . Block sends a request to an external device for distribution of the application module . In a first implementation the SDD may comprise the link data . In a second implementation the link data may be provided to the recipient responsive to providing the hash data . The request for distribution of the application module may comprise utilization of the link data . For example the shortcut function modules may open the URI of the link data to establish a connection. Continuing the example the URI may be opened using an application installation application module such as an application configured to access the application store.

Block receives installation data for the application module . For example the installation data may comprise further URIs or other information used to install the application module on the recipient . Block installs the application module .

In some implementations installation of the application module may be responsive to user acceptance of a prompt provided in a user interface . For example the user interface may present the user with the option install this application An affirmative response may permit the installation.

Block receives SRD from a sender device. The SRD includes application data and may also include hash data which is associated with the application data .

Block stores at least a portion of the SRD in a datastore . For example the application data and the hash data may be stored in the shortcut data . In some implementations the SRD may further comprise the log data . The log data may comprise one or more of UIView data of an application module executed at least in part by the sender device UIWebView data of the application module executed at least in part by the sender device network data or other information. The network data may include information indicative of traffic sent received or sent and received by a communication interface of the sender device .

Block receives hash data from a recipient device. For example the shortcut function module executing on the recipient may send a shortcut request .

Block retrieves the application data from the datastore using the hash data which was received from the recipient device . For example the hash data may be used as the search term to retrieve the associated application data stored in the shortcut data .

Block sends the application data to the recipient device . The application data may comprise information indicative of a state of an application module such as state data as executed at least in part by the sender device one or more screenshots acquired during presentation of a user interface on the sender device or both. In some implementations the application data may be expressed as a string.

Block calculates a fee based at least in part on the sending the application data to the recipient device . In one implementation a fee may be assessed for each time the application data is provided to the recipient device . The fee may be assessed to an account associated with the recipient or to a third party such the software developer or software distributor.

Block accesses the shortcut data . Shortcut data may be based at least in part on the SRD . The SRD may include the hash data .

Block accesses the distribution data . In some implementations the distribution data may comprise the hash data associated with distribution of an application module to a recipient device .

Block determines based on correspondence between the hash data in the shortcut data and the hash data of the distribution data one or more distribution statistics of the application module . For example the hash data which appears in both the shortcut data and the distribution data may be used as a common key to determine what distributions were associated with shortcuts. The distribution statistics may include but are not limited to quantity of distributions of the application module sales associated with the distributed application module and so forth.

Block calculates a fee based on one or more of the distribution statistics. For example the software developer of the application module may be assessed a fee of 1.00 per distributions which resulted from the shortcut.

Block accesses message data . The message data may comprise SDD and information about access to the SDD .

Block determines a count of times the SDD has been provided to unique computing devices . For example the sender may post the SRD to a social networking website. Continuing the example fifty users may download the SRD . Ten of those users may use the SDD to send shortcut requests . The count of times would reflect the fifty downloads.

Block calculates a fee based at least in part on the count of times. For example the fee may be 0.01 assessed each time the SDD is downloaded and regardless of use. Continuing the example above the fee assessed would be 50 0.01 or 0.50.

The fee assessments as described in this disclosure may be used in combination with one another. In other implementations other fees may be assessed with the usage or performance of the system .

The phrases configured to and operable to is used in this disclosure may indicate one or more computer executable instructions stored in CRSM which are executable on one or more hardware processors.

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above may be eliminated combined or performed in an alternate order. Any steps or operations may be performed serially or in parallel. Moreover the methods described above may be implemented as one or more software programs for a computer system and may be encoded in a computer readable storage medium as instructions executable on one or more processors.

Embodiments may be provided as a computer program product including a non transitory computer readable storage medium having stored thereon instructions in compressed or uncompressed form that may be used to program a computer or other electronic device to perform processes or methods described herein. The computer readable storage medium may be one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. For example the computer readable storage media may include but is not limited to hard drives floppy diskettes optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs flash memory magnetic or optical cards solid state memory devices or other types of physical media suitable for storing electronic instructions. Further embodiments may also be provided as a computer program product including a transitory machine readable signal in compressed or uncompressed form . Examples of machine readable signals whether modulated using a carrier or unmodulated include but are not limited to signals that a computer system or machine hosting or running a computer program can be configured to access including signals transferred by one or more networks. For example the transitory machine readable signal may comprise transmission of software by the Internet.

Separate instances of these programs can be executed on or distributed across any number of separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations. Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art. It is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

