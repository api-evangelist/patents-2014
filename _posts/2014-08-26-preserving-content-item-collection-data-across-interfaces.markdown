---

title: Preserving content item collection data across interfaces
abstract: Systems, methods, and computer-readable storage media for preserving collection data across interfaces are disclosed. The system can generate, for a collection of content items stored in multiple user accounts in a synced online content management system, an index of the content items in the collection. The index can store, a content item identifier and a file location, for each content item. Upon detecting that a content item in the collection is moved to a new file location, the system can retrieve a collection identifier from metadata associated with the content item. The system can then locate the index for the collection associated with the collection identifier based on the collection identifier retrieved from the metadata associated with the content item. The system can then update the file location stored at the index for the content item to identify the new file location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298797&OS=09298797&RS=09298797
owner: Dropbox, Inc.
number: 09298797
owner_city: San Francisco
owner_country: US
publication_date: 20140826
---
The present patent application is a continuation of and claims the benefit of U.S. Non Provisional application Ser. No. 13 772 071 filed Feb. 20 2013 which is a continuation of and claims the benefit of U.S. Non Provisional application Ser. No. 13 725 861 filed Dec. 21 2012. Said application is expressly incorporated herein by reference in its entirety.

The present technology pertains to content item collections and more specifically pertains to preserving content item data across interfaces by preserving content item tags.

Media recording capabilities such as photographing and video recording have been integrated with remarkable regularity in a score of common everyday devices. The ubiquity of such media recording capabilities has prompted a growing demand for media applications. In particular users are interested in applications to access media stored on different devices and to share media with other users. The Internet has further fueled the demand for media applications by greatly expanding the amount of media available to users and providing an ever widening audience for conveniently sharing media.

Numerous browser based tools and client applications have emerged that allow users to share and access media from any Internet connected device. For example image search engines allow users to search the Web for image content and browse the searched photos through a web browser. Other browser based tools and services such as social networking sites similarly allow users to view and share photos through a web browser. Similar functionality also exists in native client applications.

Given the wide availability of media users can typically access media files stored across multiple interfaces such as a web interface and a desktop interface from one or more user devices. To make sense of the numerous media files users can create albums to organize and view groups of media files based on shared characteristics. For example a user can create an album for an event and add the different photos associated with that event to the album. Thus the album contains pointers to the locations in data storage where the corresponding files or content items are stored. This way the user can access the photos related to the event from a single place the album by accessing the pointers without having to browse through different folders and or interfaces where the specific photos are stored and without having to navigate through photos that are not related to the event.

However as time passes the user can manipulate or rearrange the photos and folders that store the photos moving and copying photos and adding and deleting photos from folders. But many times the user forgets to manually update the album to reflect the changes made to the photos and or folders. Moreover the albums do not automatically update themselves based on the changes and therefore fail to preserve album data when the user makes such changes. Accordingly these changes to the photos and or folders cause the album to break or fail to load display all of the album data that the user expects. For example the user may create an album based on photos in a first and second folder. The user may subsequently move a photo from the first folder to a third folder. If the user does not manually update the album to change the location of the photo from the first folder to the third folder the album will not be able to find and display the photo as it will continue to look for the photo in the first folder. As a result the album will break or at a minimum fail to load and display the moved photo. And as the user manages a greater number of photos folders and albums it becomes increasingly difficult to update the albums to preserve the album data.

Features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out hereinafter. These and other features of the disclosure will become more fully apparent from the following description and accompanying drawings or can be learned by the practice of the principles set forth herein.

The approaches set forth herein can be used to preserve data related to collections of content items such as albums of photos via collection tags so that collections persist even after files are moved or otherwise manipulated via various file interfaces. Each content item in a collection can be associated with a respective tag which can be preserved throughout the life of the item even if the content item is copied moved and or modified. The tag can include a collection identifier to identify which collection the item has been associated with. An item can be associated with more than one collection and by extension more than one tag. When the collection item is copied renamed moved and or modified an index of items associated with the collection identified by the tag can be automatically updated to note the correct location and or address of the item after the change. The collection can then reference the index of items to keep track of the location of the items in the collection and the changes made to those items. This way the collection can preserve the collection data even after the user makes changes to the data and or the directory. Moreover the user does not have to update the collection manually to change the location of the item in order to prevent the collection from breaking or encountering missing item and addressing errors.

Disclosed are systems methods and non transitory computer readable storage media for preserving collection data. The system generates for a collection of content items stored in multiple user accounts in a synced online content management system an index of the content items in the collection wherein the index stores for each content item in the collection a content items identifier and a file location wherein the collection is associated with a collection identifier and wherein metadata for each content item in the collection stores the collection identifier. Upon detecting that a content item in the collection is moved to a new file location the system can retrieve the collection identifier from the metadata associated with the content item. The system can detect that the content item in the collection was moved to a new file location when the content item is moved and or renamed when a parent folder is moved and or renamed or when the address associated with the content item in the collection changes in any way. In other words moving a content item to a new file location can mean moving and or renaming the photo moving and or renaming a parent folder and or changing an address path associated with the content item in the collection. For example the system can retrieve the collection identifier from the metadata associated with the content item upon detecting that a uniform resource locator URL uniform resource identifier URI uniform resource name URN containing folder and or file system path associated with the content item in the collection has changed.

Next the system can locate the index for the collection associated with the collection identifier based on the collection identifier retrieved from the metadata associated with the content item. The system can then update the file location stored at the index for the content item to identify the new file location. The system can also display the content item in the collection based on the new file location identified in the index for the content item. For example when displaying a photo in an album the system can refer to the index for the photo to obtain the new file location and display the photo in the album by accessing the photo at the new file location.

The metadata for each content item can include a file tag. The file tag can include a respective collection identifier. The file tag can also include a respective content item identifier. The file tag can be created and or associated with a content item when the content item is added to the collection for example. Moreover the file tag can be a persistent file tag. For example each content item can be configured to preserve the file tag when the file location changes and or the content item has been modified. This way the file tag can be used to identify the content item and or the collection even as the content item is copied moved renamed etc. The file location can change when the content item is moved to a different location when the content item is copied to a different location when the content item is renamed when a parent folder is moved and or renamed when an address associated with the content item changes etc. Further the system can detect when a content item in the collection the collection and or a folder associated with the content item changes. For example the system can detect that the content item in the collection has been moved to the new file location and or the address of the content item has changed to the new file location.

In some embodiments the system can perform one or more steps synchronously. For example the system can synchronously retrieve the collection identifier from the metadata associated with the content item locate the index for the collection associated with the collection identifier and or update the file location stored at the index for the content item. In one variation the system synchronously detects that the content item in the collection was moved to the new file location and updates the file location stored at the index for the collection.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the art will recognize that other components and configurations may be used without departing from the spirit and scope of the disclosure.

The present disclosure provides a way to preserve data related to collections of content items such as albums of photos via collection tags so that collections persist even after files are moved or otherwise manipulated via various file interfaces. Each content item in a collection can be associated with a respective tag which can be preserved throughout the life of the item even if the content item is copied moved and or modified. The tag can include a collection identifier to identify which collection the item has been associated with. An item can be associated with more than one collection and by extension more than one tag. When the collection item is copied renamed moved and or modified an index of items associated with the collection identified by the tag can be automatically updated to note the correct location and or address of the item after the change. The collection can then reference the index of items to keep track of the location of the items in the collection and the changes made to those items. This way the collection can preserve the collection data even after the user makes changes to the data and or the directory. Moreover the user does not have to update the collection manually to change the location of the item in order to prevent the collection from breaking or encountering missing item and addressing errors.

An exemplary system configuration is shown in wherein electronic devices communicate via a network for purposes of exchanging content and other data. The system can be configured for use on a wide area network such as that illustrated in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system via a client side application installed on client device . In some embodiments the client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser that resides on client device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content. Furthermore content management system can make it possible for a user to access the content from multiple client devices . For example client device can upload content to content management system via network . The content can later be retrieved from content management system using the same client device or some other client device .

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as documents text files audio files video files etc. from one or more client devices authorized on the account. The content can also include folders of various types with different behaviors or other mechanisms of grouping content items together. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes via a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include a communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

In some embodiments content management system can include a content item management module for maintaining a content directory. The content directory can identify the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. In some embodiments the content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a uniform resource locator URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 1 or true after generating a URL to the content item.

In some embodiments sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 1 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL. Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 1 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

While content management system is presented with specific components it should be understood by one skilled in the art that the architectural configuration of system is simply one possible configuration and that other configurations with more or less components are also possible. For example content management system can include a collection updater module and or a tag database.

The disclosure now turns to a discussion of preserving collections of content items such as albums of photos via tags. A person skilled in the art will recognize that while the disclosure frequently uses albums of photos to illustrate the technology a content item can be of any file type organized in any collection without parting from the spirit and scope of the disclosure. For example the collection of content items can be a playlist of music or a collection of documents.

In photos A D are stored in photo library . Photo library can be stored in a network based storage that is accessible via a desktop interface and or a web interface for instance. Photo library can include photo units A D which store photos A H. For example first unit A contains photos A B and E. First unit A contained photo B at one point but photo B has since been moved to second unit B. Second unit B stores photos F and B which was moved from first unit A. Third unit C stores photos C and G and fourth unit D stores photos D H and a second instance of photo C which was copied from third unit C. As illustrated photos A D in album are stored across multiple photo units A D. Thus album can include photos from multiple photo units. In some variations album can also include photos stored in multiple photo libraries devices or both. Units A D can represent actual or logical directories or folders in a hierarchical storage schema.

For album to properly include display and or access photos A D in album the system can obtain the location of photos A D from index which maintains updated records of the location of photos A D in album . Thus if any of photos A D are renamed moved and or copied to a different location album will still be able to include display and or access photos A D as it will know the location of photos A D from the locations recorded in index . For example when photo B is moved from first unit A to the second unit B the system can intercept that move operation and update index to include the new location of photo B at record B which is associated with photo B. The system can intercept or monitor file operations that modify a photo in an album such as move rename or delete and update index accordingly. In one variation the system can update index simultaneously with performing the operation but the system can alternatively update index upon successful completion of the operation. Similarly when photo C is copied from third unit C to fourth unit D index can be updated to include both locations of photo C at record C which is associated with photo C. Accordingly index can track the location of photos A D in album as photos A D are copied and or moved to different locations.

In some embodiments when a photo is copied to a different file location index can store multiple file locations associated with the photo. Here index can store the original file location of the photo and the destination of the copied photo. In one variation when index includes multiple file locations associated with a photo album only presents a single instance of the photo based on one of the file locations.

In some embodiments index does not include more than one file location for a single photo. Here if a photo is copied to a different location index can store the original file location or replace the original file location with the file location associated with the destination of the copied photo. Although shows the album index and photo library as single elements those of skill in the art can understand that the album index and or photo library can include multiple elements. Moreover some embodiments can include multiple albums indexes and or photo libraries.

Users can view photos A E and modify photos A E and or photo units A C from desktop interface and or web user interface . Any changes to photos A E and or photo units A C can get pushed to web user interface and vice versa in order to maintain desktop interface and web user interface synchronized. Users can also view photos A B and D E from album . Users can access album from web user interface and or desktop interface . Album can include photos A B and D E which are stored at photo units A C. Users can view photos A B and D E from album as if photos A B and D E were stored at a single place even though photos A B and D E are stored in various photo units. Album has an index which can store a record for each photo in album . Index can be a database a file a table a list etc. Index can include records associated with photos A B D E in album .

Each record in index can be associated with a specific photo in album . A record can store the photo identifier of the associated photo the album identifier of the album associated with the photo and the location of the photo. If the location of the photo changes system can automatically update the record associated with the photo to indicate the new location of the photo. For example when photo B is moved from first photo unit A to second photo unit B system can update the record associated with photo B to indicate that photo B was moved to second photo unit B. As another example when photo A is copied from first photo unit A to third photo unit C system can update the record associated with photo A to indicate that photo A was copied to third photo unit C.

System can update index synchronously when it detects a change to the address associated with photos A B D E and or photo units A C. In some embodiments system can detect changes based on synchronization updates sent from desktop interface to web user interface . Based on the detected changes system can send an update to index to ensure that the information in index is current. For example when photo B is moved from first photo unit A at desktop interface to second photo unit B desktop interface can send a synchronization update to web user interface indicating that photo B was moved. Web user interface can use the synchronization update to update photo units A and B at web user interface to reflect this change. System can also use the synchronization update to detect that photo B has been moved and send an update to index to indicate that photo B has been moved to second photo unit B and record the new file location of photo B. This way index reflects the current information for photos A B and D E in album . Album can thus obtain the current location of photos A B and D E from index in order to preserve the album data even as the album data is moved and or modified.

To preserve album data each of photos A E can have a tag that indicates the album identifier of the album s the photo is associated with. The tags can help identify the album s associated with a photo which can be used to identify which index should be updated when the photo is modified copied renamed moved etc. For example photo B has a tag that includes an album identifier that identifies album as being associated with photo B. This association can then be used to identify index as the index that should be updated when photo B is modified moved renamed copied etc. Thus when photo B is modified moved renamed copied etc. the album identifier in the tag can be used to identify both album and index so the change can then be stored in the appropriate index. The tags on photos A E can be preserved through the life of photos A E. Here the tags can persist through any changes made to photos A E. Moreover the tags can be part of photo metadata of photos A E.

Having disclosed some basic system components and concepts the disclosure now turns to the example method embodiment shown in . For the sake of clarity the method is described in terms of example content management system as shown in configured to practice the method. The steps outlined herein are illustrative and can be implemented in any combination thereof including combinations that exclude add or modify certain steps.

Content management system can generate for a collection of content items an index of the content items in the collection wherein the index stores for each content item in the collection a content item identifier and a file location wherein the collection is associated with a content item identifier and wherein metadata for each content item in the content item stores the collection identifier . Upon detecting that a content item in the collection is moved to a new file location content management system can retrieve the collection identifier from the metadata associated with the content item . Content management system can detect that the content item in the collection was moved to a new file location when the content item is moved and or renamed when a parent folder is moved and or renamed or when the address associated with the content item in the collection changes in any way. In other words moving a content item to a new file location can mean moving and or renaming the photo moving and or renaming a parent folder and or changing an address path associated with the content item in the collection. For example content management system can retrieve the collection identifier from the metadata associated with the content item upon detecting that a uniform resource locator URL uniform resource identifier URI uniform resource name URN and or file system path associated with the content item in the collection has changed.

Next content management system can locate the index for the collection associated with the collection identifier based on the collection identifier retrieved from the metadata associated with the content item . Content management system can then update the file location stored at the index for the content item to identify the new file location . Content management system can also display the content item in the collection based on the new file location identified in the index for the content item. For example content management system can refer to the index for the content item to obtain the new file location of the content item and display the content item in the collection by accessing the content item at the new file location. This way the collection is always aware of the location of the content items in the collection even as content items are moved and copied to various storage locations. As a result the collection can always load display the content items without encountering errors from missing files and addressing issues caused by changes made to the location of content items.

The metadata for each content item can include a content item tag. The file tag can include a respective collection identifier. The tag can also include a respective content item identifier. The tag can be created modified and or associated with a content item when the content item is added to the collection for example. Moreover the tag can be a persistent tag. For example each content item can be configured to preserve the tag when the file location changes and or the content item is modified. This way the tag can be used to identify the content item and or the collection even as the content item is copied moved modified etc.

The file location of the content item can change when the content item is moved to a different location when the content item is copied to a different location when the folder containing the content item is moved to a different location when the folder containing the content item is renamed when a segment of the path of the content item changes and or is renamed when an address associated with the content item changes etc. Further content management system can detect when a content item in the collection the collection and or a folder associated with the content item changes. For example content management system can detect that the content item in the collection has been moved to the new file location. Content management system can receive an update such as a synchronization update and determine from the update if the file location of the content item has changed. Content management system can also analyze a log of changes made to the content items which can be maintained by content management system or a separate device and determine if the file location of the content item has changed. Moreover content management system can monitor one or more directories of content items to identify when a file operation is performed and determine if the file location of the content item has changed based on the file operation. If the file location of the content item has changed content management system can identify the new file location of the content item from the update log and or file operation and update the index to identify the new file location of the content item.

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

