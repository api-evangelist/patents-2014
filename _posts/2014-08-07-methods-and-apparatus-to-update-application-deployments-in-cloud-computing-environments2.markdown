---

title: Methods and apparatus to update application deployments in cloud computing environments
abstract: Methods, apparatus and systems are disclosed to update application deployments in cloud computing environments. An example method disclosed herein includes identifying an update profile to promote across the plurality of deployment environments, the update profile to update a component of the application, in response to a notification of promotion of the update profile received at a first deployment environment. The example method also includes displaying a user-selectable control in a user interface, the user-selectable control to specify whether to apply the update profile to the component of the application deployed in the first deployment environment, based on selection of the user-selectable control, performing a compatibility check of the first deployment environment and the update profile, and based on an outcome of the compatibility check, applying the update profile to the component of the application deployed in the first deployment environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582261&OS=09582261&RS=09582261
owner: VMware, Inc.
number: 09582261
owner_city: Palo Alto
owner_country: US
publication_date: 20140807
---
Benefit is claimed under 35 U.S.C. 119 a d to Foreign application Serial No. 3122 CHE 2014 filed in India entitled METHODS AND APPARATUS TO UPDATE APPLICATION DEPLOYMENTS IN CLOUD COMPUTING ENVIRONMENTS filed on Jun. 26 2014 by VMware. Inc. which is herein incorporated in its entirety by reference for all purposes.

This disclosure relates generally to virtualized computing environments and more particularly to methods and apparatus to update application deployments in cloud computing environments.

 Infrastructure as a service sometimes referred to as IaaS generally describes a suite of technologies provided by a service provider as an integrated solution to allow for elastic creation of a fully virtualized network and pooled computing platform sometimes referred to as a cloud computing platform . Enterprises may use IaaS as a business internal organizational cloud computing platform sometimes referred to as a private cloud or a private cloud computing platform that gives an application developer access to infrastructure resources such as virtualized servers storage and networking resources. By providing ready access to the hardware resources required to run an application the cloud computing platform enables application developers to build deploy and manage the lifecycle of a virtual application e.g. a web application a networked application etc. at a greater scale and at a faster pace than before. To deploy an application a developer who understands the architecture of the application must coordinate with a system administrator who controls access to computing resources to determine which computing resources e.g. computing networking and or storage and or software services e.g. software packages should be provisioned to support execution of the application.

Numerous tools exist to create and deploy applications in cloud computing environments. For example application provisioning tools enable cloud computing designers to create and standardize application deployment topologies on infrastructure clouds. Some application provisioning tools include graphical user interfaces GUIs that enable designers to generate application deployment topologies called application blueprints. These application blueprints define the structure of an application enable the user of standardized application infrastructure components and or include installation dependencies and or default configurations for custom and packaged enterprise applications. Application blueprints specify logical deployment topologies that are portable across private IaaS clouds e.g. an enterprise cloud based on VMware vSphere Platform or any other suitable private cloud network and across public clouds e.g. Amazon Web Services AWS or any other suitable public cloud network . Cloud providers offer a cloud instance for deployment. The deployment environment provides an environment for the cloud provider.

Application designers e.g. developers can use the GUI provided by the application provisioning tools to create visual application blueprints. These blueprints standardize the structure of the application including software components dependencies and configurations for repeated deployments. After a blueprint is available application designer teams e.g. development teams quality assurance teams release teams etc. can repeatedly deploy a standard blueprint customize configurations as allowed and deploy within deployment environments e.g. enterprise approved deployment environments .

Many applications are developed with a multi tier architecture in which functions such as presentation application processing and data management are logically separate components. For example an enterprise s custom banking application that has a multi tier architecture may use a cluster of application server nodes e.g. JBoss Application Servers to execute in a scalable runtime environment a database node e.g. a relational database management system such as MySQL to store account data and a load balancer node to distribute network traffic for robustness. Deploying a multi tiered application in a cloud computing environment may involve a cloud computing platform provider e.g. VMware providing a deployment environment to provision virtual computing resources e.g. virtual machines VMs in which an enterprise e.g. an organization an agency a corporation etc. can deploy its application. When the application is deployed a large number of deployments of an application may be deployed. Further if the components nodes of an application are deployed across multiple deployment environments making sure the components nodes are up to date for example from security vulnerabilities is a complex and daunting task for an enterprise. Further still the multiple deployment environments may have different deployers e.g. administrators who are responsible for the resources in the deployment environment managed by the administrator. As such some deployers may elect to update a component node while other deployers may not update the component node resulting in different versions of the same application deployed across multiple deployment environments. Updating or patching an application can be a complex risky and time consuming and may include periods of system downtime.

From an application blueprint different application deployments can be created using deployment profiles to for example test prototypes or deploy critical multi tier applications in production environments. From these saved blueprints application deployers can generate execution plans for deploying the application to private and or public clouds. In addition an update process to scale clustered nodes of deployed applications and or change the configuration or code of deployed applications when a new version is available may be initiated. Deployment settings e.g. virtual computing resources cluster size CPU memory networks etc. and an execution plan of tasks having specified computing resources are provisioned and application components are installed configured and started. The deployment profile provides an administrator with a process oriented view of the application blueprint that indicates discrete steps to be performed to deploy the application. The deployment settings can be encapsulated in the deployment profiles separate from the application blueprints. Different deployment profiles may be generated from a single blueprint to test prototypes e.g. new application versions to scale out and or scale in deployments and or to deploy the application to different deployment environments e.g. testing staging production . In addition a deployment profile may be distributed as a local deployment plan having a series of tasks to be executed by virtual machines provisioned from a cloud computing environment.

For example for a load balancer if an administrator is deploying an application to a test environment the administrator may select an internal network for two load balancer network NICs. In contrast when the administrator creates a deployment profile for the production environment the administrator may select an internal network for one load balancer NIC and an external network for the other load balancer NIC.

To protect their systems enterprises may need to periodically update or patch an application or deployment. When a deployed application is updated application provisioning tools may create an update profile that captures new values for the changes required for that update. Updates may also be rolled back to restore a previous update. Saved update profiles may be deployed multiple times to update existing deployments. An update profile may be created by scaling in and or scaling out a cluster of a node or modifying the configurations of existing services and or application components. Update profiles enable application designers to update the components nodes of an application already deployed in the deployment environment. An update profile may be processed to update configuration properties of the components nodes e.g. modify the configurations and or code of existing services in a deployed application e.g. a database node or application components such as SQL modify a port number change passwords certificates scripts change the tasks to be executed by the virtual machines etc. . Update profiles may also be processed to scale in a deployment e.g. free resources from a virtual machine when workloads decrease at the computing node or scale out a deployment e.g. allocating resources e.g. virtual machines networking resources storage resources etc. for use by a virtual machine when workloads increase at the computing node .

To more efficiently update a deployed application as disclosed herein an update profile may be promoted to notify multiple e.g. all deployments of the same application in the available deployment environments that an update is available for deployment. A deployer may promote an existing update profile to update any deployment across multiple deployment environments. For example a deployer can apply a security related configuration update to one or more components of an application on different deployments originating from the same application version. For example an application designer can create an update profile and apply the update to a deployment in a deployment environment e.g. a development deployment environment . If the application designer wishes to update other deployments of the application scattered across multiple deployment environments the application designer may promote the update profile to selected ones of available deployment environments.

In some instances it may be beneficial to rollback an update process. For example if an update process fails to modify a configuration performance problems develop in the updated deployment etc. the rollback process may be initiated to restore that update to the last successful state in its timeline. When rollback of an update process is initiated the rollback process is performed on the services and or components the update process attempted to modify and also on any dependent nodes.

Examples disclosed herein also create a master copy of the update profile to copy and make available e.g. distribute to the selected ones of the deployment environments. In addition examples disclosed herein maintain a log of promoted update profiles including for example which update profiles were updated e.g. a source update profile which deployment environments were selected which copies of the update profiles were made available to the deployment environments which deployment environments accepted the updates etc.

An application may be scattered across multiple deployment environments in which multiple administrators control the resources in the deployment environments managed by the respective administrators. Rather than forcing an update onto each of the deployment environments examples disclosed herein enable each administrator of the selected ones of the deployment environments to accept or reject the updates identified in the promoted updated profile. Examples disclosed herein create a local update profile based on the promoted update profile at a deployment environment when the respective administrator accepts the update. In this manner the administrator is provided control of the resources in the deployment environment managed by the administrator. The administrator may also edit the local update profile based on the needs known to the administrator.

In some examples an update for a first version of an application may not be compatible with a second version of the application. Accordingly examples disclosed herein also perform a compatibility check when an update identified in a promoted update profile is accepted. Some examples may include a check of whether the promoted update is compatible with the target application by checking for example whether updated components nodes are present and executing in the deployment environment whether updated properties or configurations are present in the target application whether the deployment environment includes cluster nodes whether the target application is executing compatible components nodes e.g. a Microsoft Windows update is not being applied to a Linux executing node etc. If an update is determined not to be compatible with the target application the update process may be cancelled and or discarded.

As used herein a node is a virtual machine and or a cluster of virtual machines also referred to as a cluster node . A virtual machine is a software stack comprising one or more operating systems applications and or services. As used herein an application also referred to herein as a virtual application or an appliance is a logical deployment unit that defines the relationship between an operating system one or more application components and or services dependent on the operating system. An application may also define the relationship between application components that can be distributed across multiple virtual machines. As used herein an application component refers to services and or code components. Code components are application specific binaries scripts or processes etc. usually written by a developer and packaged into one or more files to provide logic e.g. relationship definitions for an application. In some examples code components may be a type or format of scripting and application code. Example types of code components include Java Archive JAR files Java Enterprise Archive EAR files Java web application archive WAR files Ruby Gem packages SQL scripts and other suitable modules of scripting logic.

Services as used herein are scripted software that provide a software infrastructure for an application. Services may be reused in multiple applications. Example services include application servers e.g. Rails Apache Tomcat JBoss etc. database servers e.g. GemFire MySQL SQLFire MongoDB Postgress etc. monitoring services e.g. Hyperic SpringInsight etc. web servers e.g. Apache VMWare vFabric Enterprise Ready Server etc. messaging services e.g. RabbitMQ etc. middleware services etc. As used herein the term component generally refers to one or more of application components code components and or services.

In the illustrated example of the developer uses an example application director which may be implemented by one or more virtual machines to orchestrate deployment of the application into the deployment environments . In the illustrated example of the application director includes an example topology generator an example deployment profile generator an example deployment director an example profile promotion handler and an example cloud interface .

In the illustrated example of the example topology generator generates an example application blueprint specifying a logical topology of the application which is to be deployed. The example blueprint maps the structure of the application as a collection of components nodes e.g. an example load balancer node an example application server appserver node and an example database node . Applications such as the application of are typically developed with a multi tier architecture in which functions such as presentation application processing and data management are logically separate components. For example the topology generator may generate a blueprint e.g. a topology map for an online store application specifying a web application executing on an application server e.g. an Apache Tomcat application server that uses a data store as a database e.g. a MongoDB . The example web application may be implemented by a Java web application archive e.g. a WAR file comprising dynamic web pages static web pages Java servlets Java classes and or other properties configuration information and or resource files included in the Java web application. In the illustrated example the blueprint is an abstract representation of the structure of the application including virtual machines and their corresponding application components operating systems dependencies and or configurations. In some examples the blueprint standardizes the structure of an application for repeated deployments in multiple and or diverse deployment environments. The application may alternatively describe for example an entire online store application including application server components and database components rather than just the web application itself.

In the illustrated example of the topology generator retrieves virtual computing resources from an example catalog to assemble the blueprint . For example the catalog may list virtual computing resources e.g. virtual machines networking resources storage resources etc. that may be provisioned from the cloud computing platform provider and corresponding application components e.g. software services scripts code components application specific packages etc. that may be installed on the provisioned virtual computing resources. The example catalog of the illustrated example is pre populated with available virtual computing resources and or application components. In some examples an administrator e.g. an information technology IT administrator a system administrator etc. customizes the catalog by adding and or modifying the available virtual computing resources and or application components listed in the catalog . For example the administrator may enter specifications configurations properties custom tasks etc. about each entry in the catalog . The example blueprint of the illustrated example includes an installation order for the application components during deployment. For example the blueprint may define dependencies between one or more of the application components that controls the installation order. For example the developer may specify a dependency from an Apache service e.g. the example load balancer node to an application code package such as a web application e.g. the example appserver node . In some such examples the dependency may be that the load balancer may not be configured until installation of the web application is complete.

In the illustrated example of the deployment profile generator generates an example deployment profile based on the blueprint . The example deployment profile includes deployment settings e.g. state information such as virtual computing resource cluster sizes processing resources memory networking resources etc. and an execution plan identifying tasks having an order in which virtual computing resources are provisioned and application components are installed configured and started. The deployment profile of the illustrated example is a process oriented view of the blueprint . For example the administrator may follow discrete steps included in the deployment profile to deploy the application . In some examples different deployment profiles may be generated from a single blueprint to test prototypes e.g. new application versions to update application versions to scale e.g. scale out or scale in deployments and or to deploy the application to different deployment environments e.g. the development version deployed in the development deployment environment the testing version deployed in the testing deployment environment the staging version deployed in the staging environment the production version deployed in the production deployment environment etc. . In the illustrated example the deployment profile generator stores deployment profiles such as the example deployment profile in an example profile repository . The example deployment profile generator of stores the deployment profiles for subsequent use e.g. at a deployment time to deploy for example the application .

In the illustrated example the deployment profile generator generates the deployment profile in response to user input e.g. from the developer to initiate a deployment process for the application in a specified deployment environment . In some examples the deployment profile generator allows the administrator to insert one or more custom tasks in the deployment profile . For example custom tasks may be scripts that when executed by a virtual machine perform operations that facilitate deployment of the application including for example monitoring tasks e mail and alert notification tasks operations that pre configure a virtual machine operations performed prior to provisioning a virtual machine and other scripting operations.

The example deployment director of orchestrates execution of the example deployment profile for the application in coordination with the example virtual machines included in the deployment. The example deployment director communicates with the cloud computing platform provider via the example cloud interface to provision and configure the example virtual machines in the deployment environments as specified by the deployment profile . In some examples the deployment director separates the deployment profile into local deployment profiles for each one of the virtual machines . In the illustrated example the deployment director maintains a central state of the deployment process that specifies the dependencies at deployment time between tasks to be performed across the virtual machines in a specified order. For example the deployment director may send a message to one or more of the virtual machines when deployment time dependencies in their respective local deployment profiles are satisfied.

In the illustrated example of the cloud interface provides a communication abstraction layer by which the application director may communicate with for example a heterogeneous mixture of cloud provider s and deployment environment s . In the illustrated example the deployment director provides the virtual machines with a series of tasks specific to the respective virtual machines e.g. a local deployment profile . The tasks may be scripts that are executed by the respective virtual machines to install configure and or start one or more nodes. For example a task may be a script that when executed by the virtual machines causes the respective virtual machines to retrieve and install particular software packages from for example a Git repository a package manager and or other application component resources.

In the illustrated example the deployment director coordinates with the virtual machines to execute the tasks in an order that observes installation dependencies between the virtual machines according to the deployment profile . For example in the development deployment environment the example load balancer node is executed by the virtual machine and the appserver node and the database node are executed by the virtual machine . The virtual machine of the illustrated example is configured based on the deployment profile to coordinate execution of tasks to deploy the load balancer node to run in the development deployment environment . The virtual machine of the illustrated example is configured based on the deployment profile to coordinate execution of tasks to deploy the appserver node and the database node to run in the development deployment environment . Although the appserver node and the database node are shown running on the same virtual machine in other examples separate virtual machines in the development deployment environment may be provided to run a corresponding one of the appserver node and the database node .

To deploy such a multi tier application a developer who understands the architecture of the application must coordinate with a system administrator who controls access to the computing resources to determine which computing resources e.g. computing networking and storage and software services e.g. software packages should be provisioned to support execution of the application . At times it may be necessary to update a deployed application such as the example application . For example a security vulnerability of an application may need to be patched. The developer may create an update profile as described herein to update a deployed application. For example using the deployment profile generator the developer may create an example update profile by modifying properties and or configurations of a deployed application. For example the update profile may be created by changing a port number changing a password changing security certificates changing tasks increasing e.g. scaling out the number of nodes in a node cluster decreasing e.g. scaling in the number of nodes in a node cluster etc.

In the illustrated example while creating the update profile the developer inputs modifications to the deployment profile in the development deployment environment . These modifications are stored in the update profile . Once the update profile is created the developer may apply the update profile to the deployments in a deployment environment to update the application deployment. The developer may also want to apply the update profile to the one or more other deployment environments in which the application is deployed.

In the illustrated example of the profile promotion handler includes an example profile promoter to enable a developer to promote an update profile for deployments in a same deployment environment and or across multiple deployment environments. In the illustrated example the profile promotion handler stores the update profile in an example promotion repository for subsequent use. When an update profile is promoted deployments of the same application e.g. all other deployments are notified of the update profile .

The example profile promoter of facilitates managing update profiles. The example profile promoter of the illustrated example enables a user to promote an update profile across multiple deployment environments. For example after developing the update profile in the development deployment environment the developer may wish to update the application in the testing deployment environment using the update profile . For example the testing deployment environment may enable the developer to more thoroughly test the update profile than what is possible in the development deployment environment such that the update can be validated prior to deployment to the production deployment environment or another deployment environment.

In the illustrated example of the profile promoter stores a master copy of the update profile in the promotion repository and then deploys the update profile to selected ones of the deployment environments . The example profile promoter logs the promotion in a data structure such as a lookup table in the promotion repository . In this manner the profile promoter maintains a log of which update profile is deployed and into which deployment environment the deployment has occurred as well as a copy e.g. the example master copy of the update profile . Promoting an update profile may include rolling back an update process of the deployed application to a stable version. For example when an update profile is applied to the deployed application the update process may result in a bug that was previously unknown to the developer and render the deployed application unusable in one of the deployment environments . Once the update profile e.g. the update profile resulting in the bug was promoted and applied to the selected ones of the deployment environments and the bug is identified the developer may promote a previous version of the update profile or an alternative update profile so that the deployed application rolls back to a stable version that does not include bug.

In the illustrated example the application director and or component s of the application director such as the profile promotion handler may be running in one or more of the virtual machines and may be used by the developer and or the administrator of a deployment environment . When an update profile is promoted to the deployment environment managed by the administrator e.g. by the developer the administrator of the deployment environment receives a notification of the update. To prevent malicious update profiles from being applied to deployments the example profile promotion handler also includes an example promotion deployer to enable an administrator to accept review apply or reject a received update profile prior to deployment of the update profile in the deployment environment managed by the administrator . In this manner an administrator is able to maintain control over the deployments in the deployment environments managed by the respective administrator . For example the administrator may request more information about the update profile before processing the update profile . In other examples the administrator may manually apply the update profile . In still other examples the administrator may accept the update profile but modify the update profile prior to deployment in the deployment environment managed by the administrator . When the administrator decides to review apply and or accept the update profile the promotion deployer creates and stores a local copy of the update profile . By storing a local copy of the update profile the update profile may be edited e.g. changed without affecting the update profile deployed to the other ones of the deployment environments .

When the update profile is reviewed applied and or accepted the example promotion deployer of the illustrated example performs a compatibility check to confirm that the virtual machines in the deployment environments in which the update profile is to be applied are eligible for e.g. compatible with the update profile prior to deploying the deployment profile to the respective deployment environment . For example the deployment profile may include tasks to install configure and start a database node that runs on a Microsoft Windows operating system while the virtual machines in the deployment environment execute a Linux operating system. The example promotion deployer alerts the user e.g. the administrator via for example audio and or visual notifications when the attempts to apply an incompatible deployment profile e.g. the deployment profile to the deployment environment .

As described above depicts the example cloud computing environment in which a deployed application can be updated across multiple deployment environments . The example profile promoter receives selection of the update profile and identifies deployment environments in which to deploy the update profile . The example profile promoter also maintains a log of update profiles including an identification of when the update profile is updated to which deployment environments the update profile is promoted and which version e.g. copy of the update profile was promoted.

When the update profile is promoted the example promotion deployer at each of the selected ones of the example deployment environments makes a decision on whether to accept review apply or reject the example update profile independent of the other deployment environments . For example a developer may develop the update profile in the first deployment environment and using the example profile promoter the developer may promote the update profile to a second and third ones of the deployment environment . The example profile promoter logs the promotion including which version of the update profile was promoted and to which deployment environments the update profile was promoted. The example profile promoter stores a copy of the update profile e.g. the master copy in the promotion repository when the update profile is promoted. A first administrator of the second deployment environment may then accept and apply the update profile to the deployments in the second deployment environment while a second administrator of the third deployment environment may reject the update profile . The example promotion deployer for the example second deployment environment performs a compatibility check with the example update profile and then stores a copy of the update profile e.g. a local copy of the update profile and applies the update profile to the deployments in the second deployment environment . In some examples the promotion deployer stores a local copy of the update profile when the update profile is promoted regardless of whether or not the administrator accepts reviews applies or rejects the update profile .

While an example manner of implementing the application director is illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example topology generator the example deployment profile generator the example deployment director the example profile promotion handler the example cloud interface the example profile promoter the example promotion deployer and or more generally the example application director of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example topology generator the example deployment profile generator the example deployment director the example profile promotion handler the example cloud interface the example profile promoter the example promotion deployer and or more generally the application director of could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . When reading any of the apparatus or system claims of this patent to cover a purely software and or firmware implementation at least one of the example topology generator the example deployment profile generator the example deployment director the example profile promotion handler the example cloud interface the example profile promoter and or the example promotion deployer is are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware. Further still the example application director of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

As discussed above when the example developer develops the application blueprint for the application the developer may specify one or more dependencies between application components to declare a relationship between the application components. Dependencies may be used to plan deployment of the application by defining a deployment order for application components e.g. that indicates whether deployment tasks for one item will wait to run until the tasks for the other item has finished .

Dependencies are identified by the developer by for example defining them in the catalog . A dependency may be an intra node dependency or an inter node dependency. A dependency between application components may be defined between application components in the same node e.g. an intra node dependency to represent that at that node tasks for one application component are performed after tasks for the other application component. In the illustrated example intra node dependencies are illustrated by solid directional lines between two tasks. Alternatively dependencies between application components may be defined between application components in different nodes e.g. inter node dependencies such that tasks for an application component at a first node are performed after tasks of an application component at a second node have been completed. In the illustrated example inter node dependencies are illustrated by dashed directional lines between two tasks.

In the illustrated example of the deployment plan of specifies that a task does not begin execution until a preceding task as indicated by solid directional lines has been completed. For example a virtual machine labeled as database executes action scripts for installing e.g. MySQL INSTALL configuring e.g. MySQL CONFIGURE and starting e.g. MySQL START a MySQL database service. Because of the dependency implied between the MySQL database and SQL script e.g. the SQL script may not be executed before the MySQL database is deployed the example task B for executing the init db script SQL script e.g. init db script INSTALL is placed after the last task for deploying the MySQL database e.g. MySQL START e.g. the example task A has been completed. Similarly the example task D for deploying the bank application e.g. Bank App INSTALL is placed after the last task for deploying the application server e.g. JBossAppServer START e.g. the example task C has been completed.

In the illustrated example of the deployment plan also specifies inter node dependencies between the nodes as indicated by a dashed directional line . For example since a load balancer usually cannot be configured until a web application is running in the three tiered application of the example deployment plan specifies that the example task E for deploying the load balancer e.g. Apache LB INSTALL does not begin execution until the example task D for deploying the web application e.g. bank app INSTALL is completed.

A single appserver node in the illustrated example represents a cluster of appserver nodes . For example the example appserver node of is a cluster node including two sub nodes e.g. app server and app server . In some examples the sub nodes may include additional sets of deployment time dependencies. For example the deployment plan may indicate that the task D e.g. Bank App INSTALL complete in all sub nodes e.g. app server and app server before the task E e.g. Apache LB INSTALL may begin. Alternatively each node in a cluster of the nodes may be represented by a separate virtual machine .

The profile promoter GUI of the illustrated example is provided with an example single addition control and an example multiple addition control to add ones of the selected deployment environments in which the selected update profile is to be promoted. When a user of the example profile promoter selects the example single addition control the selected one of the available deployment environments is moved to the listing of the selected deployment environments . When the user selects the example multiple addition control the selected ones of the available deployment environments in the example listing of available deployment environments are moved to the example listing of the selected deployment environments .

The example profile promoter GUI includes an example single removal control and an example multiple removal control to remove selected ones of the deployment environments from the example listing of selected deployment environments . When the user selects the example single removal control the selected one of the deployment environments from the example listing of selected deployment environments is removed from the example listing of the selected deployment environments and moved to the example listing of the available deployment environments . When the example user selects the multiple removal control the selected ones of the deployment environments in the example listing of selected deployment environments are removed from the example listing of the selected deployment environments and moved to the example listing of the available deployment environments .

A user of the example profile promoter may use the human interface device pointer to select an example update promotion Submit control such that selected ones of the example deployment environments included in the example listing of selected deployment environments in the profile promoter GUI are the deployment environments in which the selected update profile is to be promoted. Alternatively the user may use the human interface device pointer to select an example Cancel control to cancel the manage update promotion process. In the illustrated example when the update promotion Submit control is selected the deployment environments included in the listing of selected deployment environments are stored in a data structure such as a lookup table in the example promotion repository . In some examples when the update promotion Submit control is selected the deployment environments included in the listing of selected deployment environments are stored with the selected update profile .

The data table of corresponds to the example flow diagram of . For example row of the data table indicates that the update profile SUP e.g. the update profile was promoted to the testing deployment environment and a copy profile CUP of the source profile was made available to the testing deployment environment. Example rows and indicate that the update profile AUP e.g. the update profile was promoted to the testing deployment environment and the staging deployment environment and that a copy profile of the source profile CUP was made available to the testing deployment environment and the staging deployment environment respectively. In the illustrated example the copy profile CUP is the second copy made and identified accordingly.

The example data table corresponds to the example flow diagram of . For example rows and correspond to the third promotion e.g. the second promotion of the update profile AUP . Example rows and indicate that the update profile AUP e.g. the update profile was promoted to the testing deployment environment e.g. the testing deployment environment and the production deployment environment e.g. the production deployment environment and that a copy profile of the source profile CUP is made available to the testing deployment environment and the production deployment environment respectively. In the illustrated example the copy profile CUP is the third master copy made and identified accordingly. Row indicates that the second copy profile CUP was withdrawn from the staging deployment environment corresponding to the update profile AUP .

Flowcharts representative of example machine readable instructions for implementing the profile promotion handler of are shown in . In this example the machine readable instructions comprise a program for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The program may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Bin ray disk or a memory associated with the processor but the entire program and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowcharts illustrated in many other methods of implementing the example profile promotion handler may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein tangible computer readable storage medium and tangible machine readable storage medium are used interchangeably. Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

The example program of begins at block at which the example profile promotion handler displays the user selectable Manage Update Promotion control in the example profile promoter GUI . At block the example profile promoter determines whether the Manage Update Promotion control has been selected. If at block the example profile promoter determines that the Manage Update Promotion control has not been selected then control returns to block to display the user selectable Manage Update Promotion control . At block the example profile promoter displays the user selectable deployment environments available to promote the update profile and the user selectable update promotion Submit control in the example profile promoter GUI . At block the example profile promoter determines whether the update promotion Submit control has been selected. If at block the example profile promoter determines that the update promotion Submit control has not been selected then control proceeds to block to determine whether there is another update profile available to manage.

If at block the example profile promoter determines the update promotion Submit control has been selected then at block the profile promoter stores an example master copy of the promoted update profile . At block the example profile promoter logs the promotion of the update profile in the example promotion repository . For example the profile promoter may record entries in a data structure e.g. the example data table of the example data table of identifying the source update profile e.g. the update profile promoted identifying a copy identifier of the master copy and identifying the ones of the deployment environments selected for applying the promoted update profile e.g. the listing of selected deployment environments of . At block the example profile promoter notifies the selected ones of the deployment environments of the promoted update profile . At block the example profile promoter determines whether a local copy of the update profile is made at the selected ones of the deployment environments . For example the profile promoter may obtain a message indicating whether the update profile was reviewed accepted and applied or rejected at the selected ones of the deployment environments . If at block the example profile promoter determines that the selected ones of the deployment environments created a local copy of the update profile e.g. the administrator of the selected ones of the deployment environments selected to review accept or apply the update profile then at block the profile promoter logs the local update profile promotion in a data structure e.g. the example data table of in the example promotion repository .

If at block the example profile promoter determines that a local copy of the update profile was not made at the selected ones of the deployment environments or the profile promoter has logged the local update profile promotion in a data structure at block then at block the profile promoter determines whether there is another selected deployment environment to notify of the promoted update profile . If at block the profile promoter determines that there is another selected deployment environment to notify control returns to block to notify the selected ones of the deployment environments of the promoted update profile . If at block the profile promoter determines that the update promotion Submit control has not been selected e.g. a user has selected the Cancel control of or the profile promoter has determined that there is not another selected deployment environment to notify at block then at block the profile promoter determines whether there is another update profile to manage. For example the profile promoter GUI may display another update profile with the user selectable Manage Update Promotion control . If at block the profile promoter determines that the there is another update profile to manage then control returns to block to determine whether the Manage Update Promotion control has been selected fir another update profile. Otherwise if at block the profile promoter determines there is not another update profile to manage the example process of then ends.

The example program of begins at block when the profile promotion handler displays the user selectable Notification control in the example promotion deployer GUI of . For example the promotion deployer of a deployment environment may obtain a notification of a promoted update profile for an application deployed in the deployment environment.

At block the example promotion deployer determines whether the Notification control is selected. For example using the example human interface device pointer the administrator may select the Notification control to review the example update profile included in the list of deployments .

If at block the example profile deployer determines that the Notification control is not selected then control returns to block to display the example promotion deployer GUI of .

If at block the example profile deployer determines that the Notification control is selected e.g. a user wishes to review the update profile then at block the example profile deployer displays additional information about the update profile e.g. the example update profile identified in profile label of the example Accept and Apply Update control and the example Reject control in the example promotion deployer GUI of . For example the additional information about the update profile identified in profile label may include the creator identified at creator label . Using the example human interface device pointer a user may then select the Accept and Apply Update control to accept and apply the update profile identified in profile label or may select the Reject control to reject applying the update profile identified in profile label . In some examples the promotion deployer GUI may include a user selectable control to enable the administrator to accept the update profile identified in profile label and modify the update profile identified in profile label locally e.g. at the deployment environment prior to applying the update profile identified in profile label and or the modified update profile identified in profile label .

At block the example promotion deployer determines whether the administrator selected the Accept and Apply Update control . If at block the example promotion deployer determines that the administrator did not select the Accept and Apply Update control e.g. the administrator selected the Reject control then control proceeds to block to determine whether there is another promoted update profile to review accept and apply or reject.

If at block the example promotion deployer determines that the administrator selected the Accept and Apply Update control then at block the promotion deployer stores a local copy of the update profile identified in profile label at the deployment environment. For example the promotion deployer may obtain a copy of the promoted update profile identified in profile label from the example profile promoter and store a copy of the promoted update profile identified in profile label in a local repository e.g. the example promotion repository .

At block the example promotion deployer notifies the example profile promoter that a local copy of the promoted update profile identified in profile label was created and stored in the deployment environment.

At block the promotion deployer performs a compatibility check between the deployment environment e.g. the deployed application the virtual machines included in the deployment environment etc. and the update profile identified in profile label . For example the promotion deployer may check whether the virtual machines deployed in the deployment environment are able to execute the components of the update profile identified in profile label . If at block the promotion deployer determines that the deployment environment is compatible with the update profile identified in profile label then at block the promotion deployer applies the update profile identified profile label to the deployed application e.g. all of the instances of the application deployed in the deployment environment .

If at block the promotion deployer determines that the deployment environment is not compatible with the update profile identified in profile label or after the promotion deployer applies the update profile identified in profile label at block then at block the promotion deployer determines whether there is another promoted update profile to review accept and apply or reject. If at block the promotion deployer determines that there is another promoted update profile control returns to block to display the promotion deployer GUI of including the user selectable Notification control for the promoted update profile. Otherwise if at block the promotion deployer determines there is not another promoted update profile the example process of then ends.

The processor platform of the illustrated example includes a processor . The processor of the illustrated example is hardware. For example the processor can be implemented by one or more integrated circuits logic circuits microprocessors or controllers from any desired family or manufacturer.

The processor of the illustrated example includes a local memory e.g. a cache . The processor of the illustrated example is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform of the illustrated example also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

In the illustrated example one or more input devices are connected to the interface circuit . The input device s permit s a user to enter data and commands into the processor . The input device s can be implemented by for example an audio sensor a microphone a camera still or video a keyboard a button a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit of the illustrated example. The output devices can be implemented for example by display devices e.g. a light emitting diode LED an organic light emitting diode OLED a liquid crystal display a cathode ray tube display CRT a touchscreen a tactile output device a printer and or speakers . The interface circuit of the illustrated example thus typically includes a graphics driver card a graphics driver chip or a graphics driver processor.

The interface circuit of the illustrated example also includes a communication device such as a transmitter a receiver a transceiver a modem and or network interface card to facilitate exchange of data with external machines e.g. computing devices of any kind via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform of the illustrated example also includes one or more mass storage devices for storing software and or data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives Blu ray disk drives RAID systems and digital versatile disk DVD drives.

The coded instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable tangible computer readable storage medium such as a CD or DVD.

From the foregoing it will be appreciated that the above disclosed methods apparatus and articles of manufacture update application deployments in cloud computing environments while enabling administrators of the cloud computing environments an opportunity to reject the update. Disclosed examples update deployed applications within a deployment environment. An update may additionally be promoted to other deployment environments. Accordingly examples disclosed herein facilitate updating large numbers of application deployments within a cloud computing environment in an efficient and synchronized manner.

Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

